{"version":3,"sources":["components/Loader/index.tsx","components/Web3ReactManager/index.tsx"],"names":["rotate","keyframes","StyledSVG","styled","svg","size","stroke","theme","text1","Loader","rest","viewBox","fill","xmlns","d","strokeWidth","strokeLinecap","strokeLinejoin","MessageWrapper","div","Message","h2","secondary1","Web3ReactManager","children","t","useTranslation","active","useWeb3React","NetworkContextName","networkActive","networkError","error","activateNetwork","activate","triedEager","useEagerConnect","useEffect","network","useInactiveListener","useState","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"mappings":"sTAIMA,EAASC,YAAH,sHASNC,EAAYC,IAAOC,IAAV,iIACGJ,GACN,qBAAGK,QACJ,qBAAGA,QAEA,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,cAAuBD,QAAvB,IAAuBA,IAAUC,EAAMC,SAQtC,SAASC,EAAT,GAQX,IAAD,IAPDJ,YAOC,MAPM,OAON,EANDC,EAMC,EANDA,OACGI,EAKF,iBACD,OACE,kBAACR,EAAD,eACES,QAAQ,YACRC,KAAK,OACLC,MAAM,6BACNR,KAAMA,EACNC,OAAQA,GACJI,GAEJ,0BACEI,EAAE,6HACFC,YAAY,MACZC,cAAc,QACdC,eAAe,WCtCvB,IAAMC,EAAiBf,IAAOgB,IAAV,oHAOdC,EAAUjB,IAAOkB,GAAV,2CACF,qBAAGd,MAAkBe,cAGjB,SAASC,EAAT,GAIX,IAHFC,EAGC,EAHDA,SAIQC,EAAMC,cAAND,EACAE,EAAWC,cAAXD,OACR,EAIIC,YAAaC,KAHPC,EADV,EACEH,OACOI,EAFT,EAEEC,MACUC,EAHZ,EAGEC,SAIIC,EAAaC,cAGnBC,qBAAU,YACJF,GAAeL,GAAkBC,GAAiBJ,GACpDM,EAAgBK,OAEjB,CAACH,EAAYL,EAAeC,EAAcE,EAAiBN,IAG9DY,aAAqBJ,GAGrB,MAAoCK,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OAXAL,qBAAU,WACR,IAAMM,EAAUC,YAAW,WACzBF,GAAc,KACb,KAEH,OAAO,WACLG,aAAaF,MAEd,IAGER,GAIAR,GAAUI,EAEX,kBAACb,EAAD,KACE,kBAACE,EAAD,KAAUK,EAAE,kBAMbE,GAAWG,EAQTN,EAPEiB,EACL,kBAACvB,EAAD,KACE,kBAACT,EAAD,OAEA,KAjBG","file":"static/js/26.efba5972.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled, { keyframes } from 'styled-components';\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst StyledSVG = styled.svg<{ size: string; stroke?: string }>`\n  animation: 2s ${rotate} linear infinite;\n  height: ${({ size }) => size};\n  width: ${({ size }) => size};\n  path {\n    stroke: ${({ stroke, theme }) => stroke ?? theme.text1};\n  }\n`;\n\n/**\n * Takes in custom size and stroke for circle color, default to primary color as fill,\n * need ...rest for layered styles on top\n */\nexport default function Loader({\n  size = '16px',\n  stroke,\n  ...rest\n}: {\n  size?: string;\n  stroke?: string;\n  [k: string]: any;\n}) {\n  return (\n    <StyledSVG\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      size={size}\n      stroke={stroke}\n      {...rest}\n    >\n      <path\n        d=\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 9.27455 20.9097 6.80375 19.1414 5\"\n        strokeWidth=\"2.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </StyledSVG>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\n\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.secondary1};\n`;\n\nexport default function Web3ReactManager({\n  children,\n}: {\n  children: JSX.Element;\n}) {\n  const { t } = useTranslation();\n  const { active } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork,\n  } = useWeb3React(NetworkContextName);\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager);\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null;\n  }\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    );\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <Loader />\n      </MessageWrapper>\n    ) : null;\n  }\n\n  return children;\n}\n"],"sourceRoot":""}