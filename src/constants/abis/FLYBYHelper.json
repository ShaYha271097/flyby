{
  "address": "0x33662248943e97701783ebFE0ae7A6307A2A3b37",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract FLYBYAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_batchAuction",
          "type": "address"
        }
      ],
      "name": "getBatchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "commitmentsTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumCommitmentAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.BatchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdsale",
          "type": "address"
        }
      ],
      "name": "getCrowdsaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "goal",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.CrowdsaleInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getTokensInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IFlybyMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd116494b40b906da139d7609547f7819bec59304f00760d613c7f9bdd3842578",
  "receipt": {
    "to": null,
    "from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
    "contractAddress": "0x33662248943e97701783ebFE0ae7A6307A2A3b37",
    "transactionIndex": 5,
    "gasUsed": "1265227",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9e75588b70b85f322b02f2ad945ea48c23aa1fbc3e62dd4e39d3ae56e171574a",
    "transactionHash": "0xd116494b40b906da139d7609547f7819bec59304f00760d613c7f9bdd3842578",
    "logs": [],
    "blockNumber": 9931581,
    "cumulativeGasUsed": "1671168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x519ef066A4db4e967b5f471cca5b69700c217a67",
    "0x9e2aC590611f8e2ed465423dbD5915E92A448462"
  ],
  "solcInputHash": "d514d32e00e632aec9997748b28effb2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract FLYBYAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_batchAuction\",\"type\":\"address\"}],\"name\":\"getBatchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"commitmentsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCommitmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.BatchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"getCrowdsaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"goal\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.CrowdsaleInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IFlybyMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Helper/FLYBYHelper.sol\":\"FLYBYHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/FLYBYAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FLYBYAdminAccess.sol\\\";\\n\\ncontract FLYBYAccessControls is FLYBYAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x15d26912cdf5e68c3bf91040671f5c6f863e32b72906663c4007777abcb5d1e3\",\"license\":\"MIT\"},\"contracts/Access/FLYBYAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\ncontract FLYBYAdminAccess is AccessControl {\\n    bool private initAccess;\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x043cc7e6c78cafc685a1348e2af7fb6d49dd66383605b5265383a795f9388f9a\",\"license\":\"MIT\"},\"contracts/Helper/FLYBYHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Access/FLYBYAccessControls.sol\\\";\\n\\n/********************\\n *      TOKENs\\n ********************/\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TokenHelper {\\n    struct TokenInfo {\\n        address addr;\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    function getTokensInfo(address[] memory addresses) public view returns (TokenInfo[] memory)\\n    {\\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            infos[i] = getTokenInfo(addresses[i]);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getTokenInfo(address _address) public view returns (TokenInfo memory) {\\n        TokenInfo memory info;\\n        IERC20 token = IERC20(_address);\\n\\n        info.addr = _address;\\n        info.name = token.name();\\n        info.symbol = token.symbol();\\n        info.decimals = token.decimals();\\n\\n        return info;\\n    }\\n\\n    function allowance(address _token, address _owner, address _spender) public view returns(uint256) {\\n        return IERC20(_token).allowance(_owner, _spender);\\n    }\\n}\\n\\n/*****************************\\n *           Base\\n *****************************/\\ncontract BaseHelper {\\n    IFlybyMarketFactory public market;\\n    FLYBYAccessControls public accessControls;\\n\\n    function setContracts(\\n        address _market\\n    ) public {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"FLYBYHelper: Sender must be Admin\\\"\\n        );\\n        if (_market != address(0)) {\\n            market = IFlybyMarketFactory(_market);\\n        }\\n    }\\n}\\n\\n/******************************\\n *           Markets\\n ******************************/\\n\\ninterface IFlybyMarketFactory {\\n    function getMarketTemplateId(address _auction) external view returns(uint64);\\n    function getMarkets() external view returns(address[] memory);\\n    function numberOfAuctions() external view returns(uint256);\\n    function auctions(uint256) external view returns(address);\\n}\\n\\ninterface IFlybyMarket {\\n    function paymentCurrency() external view returns (address) ;\\n    function auctionToken() external view returns (address) ;\\n    function marketPrice() external view returns (uint128, uint128);\\n    function marketInfo()\\n        external\\n        view\\n        returns (\\n        uint64 startTime,\\n        uint64 endTime,\\n        uint128 totalTokens\\n        );\\n    function auctionSuccessful() external view returns (bool);\\n    function commitments(address user) external view returns (uint256);\\n    function claimed(address user) external view returns (uint256);\\n    function tokensClaimable(address user) external view returns (uint256);\\n    function hasAdminRole(address user) external view returns (bool);\\n}\\n\\ninterface ICrowdsale is IFlybyMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\n\\ninterface IBatchAuction is IFlybyMarket {\\n    function marketStatus() external view returns(\\n        uint256 commitmentsTotal,\\n        uint256 minimumCommitmentAmount,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\n\\n\\n\\ncontract MarketHelper is BaseHelper, TokenHelper {\\n\\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    struct CrowdsaleInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint128 commitmentsTotal;\\n        uint128 totalTokens;\\n        uint128 rate;\\n        uint128 goal;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n    }\\n\\n    struct BatchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint256 commitmentsTotal;\\n        uint256 minimumCommitmentAmount;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n    }\\n\\n    // struct MarketBaseInfo {\\n    //     address addr;\\n    //     uint64 templateId;\\n    //     uint64 startTime;\\n    //     uint64 endTime;\\n    //     bool finalized;\\n    //     TokenInfo tokenInfo;\\n    // }\\n\\n    // struct UserMarketInfo {\\n    //     uint256 commitments;\\n    //     uint256 tokensClaimable;\\n    //     uint256 claimed;\\n    //     bool isAdmin;\\n    // }\\n\\n    // function getMarkets(\\n    //     uint256 pageSize,\\n    //     uint256 pageNbr\\n    // ) public view returns (MarketBaseInfo[] memory) {\\n    //     return getMarkets(pageSize, pageNbr, 0);\\n    // }\\n\\n    // function getMarkets() public view returns (MarketBaseInfo[] memory) {\\n    //     address[] memory markets = market.getMarkets();\\n    //     MarketBaseInfo[] memory infos = new MarketBaseInfo[](markets.length);\\n\\n    //     for (uint256 i = 0; i < markets.length; i++) {\\n    //         MarketBaseInfo memory marketInfo = _getMarketInfo(markets[i]);\\n    //         infos[i] = marketInfo;\\n    //     }\\n\\n    //     return infos;\\n    // }\\n\\n    // function _getMarketInfo(address _marketAddress) private view returns (MarketBaseInfo memory marketInfo) {\\n    //         uint64 templateId = market.getMarketTemplateId(_marketAddress);\\n    //         address auctionToken;\\n    //         uint64 startTime;\\n    //         uint64 endTime;\\n    //         bool finalized;\\n    //         (auctionToken, startTime, endTime, finalized) = IBaseAuction(_marketAddress)\\n    //             .getBaseInformation();\\n    //         TokenInfo memory tokenInfo = getTokenInfo(auctionToken);\\n\\n    //         marketInfo.addr = _marketAddress;\\n    //         marketInfo.templateId = templateId;\\n    //         marketInfo.startTime = startTime;\\n    //         marketInfo.endTime = endTime;\\n    //         marketInfo.finalized = finalized;\\n    //         marketInfo.tokenInfo = tokenInfo;        \\n    // }\\n\\n    function getCrowdsaleInfo(address _crowdsale) public view returns (CrowdsaleInfo memory) {\\n        ICrowdsale crowdsale = ICrowdsale(_crowdsale);\\n        CrowdsaleInfo memory info;\\n\\n        info.addr = address(crowdsale);\\n        (info.commitmentsTotal, info.finalized, info.usePointList) = crowdsale.marketStatus();\\n        (info.startTime, info.endTime, info.totalTokens) = crowdsale.marketInfo();\\n        (info.rate, info.goal) = crowdsale.marketPrice();\\n        (info.auctionSuccessful) = crowdsale.auctionSuccessful();\\n        info.tokenInfo = getTokenInfo(crowdsale.auctionToken());\\n\\n        address paymentCurrency = crowdsale.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n\\n        return info;\\n    }\\n\\n    function getBatchAuctionInfo(address payable _batchAuction) public view returns (BatchAuctionInfo memory) \\n    {\\n        IBatchAuction batchAuction = IBatchAuction(_batchAuction);\\n        BatchAuctionInfo memory info;\\n        \\n        info.addr = address(batchAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = batchAuction.marketInfo();\\n        (info.auctionSuccessful) = batchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.minimumCommitmentAmount,\\n            info.finalized,\\n            info.usePointList\\n        ) = batchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(batchAuction.auctionToken());\\n        address paymentCurrency = batchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n\\n        return info;\\n    }\\n\\n    // function getUserMarketInfo(address _action, address _user) public view returns(UserMarketInfo memory userInfo) {\\n    //     IFlybyMarket market = IFlybyMarket(_action);\\n    //     userInfo.commitments = market.commitments(_user);\\n    //     userInfo.tokensClaimable = market.tokensClaimable(_user);\\n    //     userInfo.claimed = market.claimed(_user);\\n    //     userInfo.isAdmin = market.hasAdminRole(_user);\\n    // }\\n\\n    function _getETHInfo() private pure returns(TokenInfo memory token) {\\n            token.addr = ETH_ADDRESS;\\n            token.name = \\\"ETHEREUM\\\";\\n            token.symbol = \\\"ETH\\\";\\n            token.decimals = 18;\\n    }\\n\\n}\\n\\ncontract FLYBYHelper is MarketHelper {\\n\\n    constructor(\\n        address _accessControls,\\n        address _market\\n    ) { \\n        require(_accessControls != address(0));\\n        accessControls = FLYBYAccessControls(_accessControls);\\n        market = IFlybyMarketFactory(_market);\\n    }\\n}\",\"keccak256\":\"0x7dfbb08eb8ed3813aad68c025498c01937da88361350bfc62fc726e1289f0982\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/EnumerableSet.sol\\\";\\n\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x70a4ac51d4857ce35422d73f70cbec83f00f568e1f95a804dcfbbe509de5a82c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xe0521887b553a6c5bef0acd727645ff69535b60fe7c5947e40f19391307d70d2\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x01c748c0e9f9c425f95c8f0e7eb6625675a4fde41b7f5444bcf6b894b375e72c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620015e1380380620015e183398101604081905261003191610091565b6001600160a01b03821661004457600080fd5b600180546001600160a01b039384166001600160a01b031991821617909155600080549290931691161790556100c3565b80516001600160a01b038116811461008c57600080fd5b919050565b600080604083850312156100a3578182fd5b6100ac83610075565b91506100ba60208401610075565b90509250929050565b61150e80620000d36000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635a2e2f471161005b5780635a2e2f4714610116578063748365ef1461012b57806380f5560514610140578063927da1051461014857610088565b8063193d13621461008d5780631f69565f146100b65780633c74720c146100d657806346a0fe47146100f6575b600080fd5b6100a061009b366004610d97565b610168565b6040516100ad9190611224565b60405180910390f35b6100c96100c4366004610d97565b61047e565b6040516100ad9190611410565b6100e96100e4366004610d97565b610614565b6040516100ad919061131a565b610109610104366004610e20565b61097e565b6040516100ad9190611183565b610129610124366004610d97565b610a67565b005b610133610b3a565b6040516100ad9190611155565b610133610b49565b61015b610156366004610dd6565b610b58565b6040516100ad9190611423565b610170610c51565b81610179610c51565b6001600160a01b0382168082526040805162018df760e91b8152905163031bee0091600480820192606092909190829003018186803b1580156101bb57600080fd5b505afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f3919061104e565b6001600160801b0316608084015267ffffffffffffffff90811660608401521660408083019190915280516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561025a57600080fd5b505afa15801561026e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102929190610ed3565b15156101208201526040805163e0e081d760e01b815290516001600160a01b0384169163e0e081d7916004808301926080929190829003018186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103129190611009565b1515610100850152151560e084015260c083015260a0820152604080516304cfed9960e51b815290516103a8916001600160a01b038516916399fdb32091600480820192602092909190829003018186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c49190610dba565b8161014001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190610dba565b905061042e610cc1565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156104625761045b610be1565b905061046e565b61046b8261047e565b90505b610160830152509150505b919050565b610486610cc1565b61048e610cc1565b6001600160a01b038316808252604080516306fdde0360e01b815290518592916306fdde03916004808301926000929190829003018186803b1580156104d357600080fd5b505afa1580156104e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050f9190810190610eed565b8260400181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058c9190810190610eed565b8260600181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cd57600080fd5b505afa1580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106059190611087565b60ff1660208301525092915050565b61061c610cf2565b81610625610cf2565b6001600160a01b0382168082526040805163e0e081d760e01b8152905163e0e081d791600480820192606092909190829003018186803b15801561066857600080fd5b505afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190610f7d565b151561012084015215156101008301526001600160801b0316604080830191909152805162018df760e91b815290516001600160a01b0384169163031bee00916004808301926060929190829003018186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610737919061104e565b6001600160801b0316606084015267ffffffffffffffff90811660e08401521660c0820152604080516308b42a7160e31b815281516001600160a01b038516926345a153889260048082019391829003018186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190610fbf565b6001600160801b0390811660a0840152166080820152604080516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190610ed3565b816101400190151590811515815250506108aa826001600160a01b03166399fdb3206040518163ffffffff1660e01b815260040160206040518083038186803b15801561037057600080fd5b8161016001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ee57600080fd5b505afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190610dba565b9050610930610cc1565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156109645761095d610be1565b9050610970565b61096d8261047e565b90505b610180830152509392505050565b60606000825167ffffffffffffffff8111156109aa57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109e357816020015b6109d0610cc1565b8152602001906001900390816109c85790505b50905060005b8351811015610a6057610a22848281518110610a1557634e487b7160e01b600052603260045260246000fd5b602002602001015161047e565b828281518110610a4257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610a5890611486565b9150506109e9565b5092915050565b60015460405163c395fcb360e01b81526001600160a01b039091169063c395fcb390610a97903390600401611155565b60206040518083038186803b158015610aaf57600080fd5b505afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190610ed3565b610b0c5760405162461bcd60e51b8152600401610b03906111e3565b60405180910390fd5b6001600160a01b03811615610b3757600080546001600160a01b0319166001600160a01b0383161790555b50565b6001546001600160a01b031681565b6000546001600160a01b031681565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90610b899086908690600401611169565b60206040518083038186803b158015610ba157600080fd5b505afa158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd99190610ff1565b949350505050565b610be9610cc1565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526040805180820182526008815267455448455245554d60c01b602080830191909152828401919091528151808301909252600382526208aa8960eb1b82820152606083019190915260129082015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101408101610caf610cc1565b8152602001610cbc610cc1565b905290565b604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526101608101610caf610cc1565b8051801515811461047957600080fd5b80516001600160801b038116811461047957600080fd5b805167ffffffffffffffff8116811461047957600080fd5b600060208284031215610da8578081fd5b8135610db3816114c3565b9392505050565b600060208284031215610dcb578081fd5b8151610db3816114c3565b600080600060608486031215610dea578182fd5b8335610df5816114c3565b92506020840135610e05816114c3565b91506040840135610e15816114c3565b809150509250925092565b60006020808385031215610e32578182fd5b823567ffffffffffffffff80821115610e49578384fd5b818501915085601f830112610e5c578384fd5b813581811115610e6e57610e6e6114ad565b8381029150610e7e84830161142c565b8181528481019084860184860187018a1015610e98578788fd5b8795505b83861015610ec65780359450610eb1856114c3565b84835260019590950194918601918601610e9c565b5098975050505050505050565b600060208284031215610ee4578081fd5b610db382610d58565b600060208284031215610efe578081fd5b815167ffffffffffffffff80821115610f15578283fd5b818401915084601f830112610f28578283fd5b815181811115610f3a57610f3a6114ad565b610f4d601f8201601f191660200161142c565b9150808252856020828501011115610f63578384fd5b610f74816020840160208601611456565b50949350505050565b600080600060608486031215610f91578283fd5b610f9a84610d68565b9250610fa860208501610d58565b9150610fb660408501610d58565b90509250925092565b60008060408385031215610fd1578182fd5b610fda83610d68565b9150610fe860208401610d68565b90509250929050565b600060208284031215611002578081fd5b5051919050565b6000806000806080858703121561101e578081fd5b845193506020850151925061103560408601610d58565b915061104360608601610d58565b905092959194509250565b600080600060608486031215611062578283fd5b61106b84610d7f565b925061107960208501610d7f565b9150610fb660408501610d68565b600060208284031215611098578081fd5b815160ff81168114610db3578182fd5b6001600160a01b03169052565b15159052565b600081518084526110d3816020860160208601611456565b601f01601f19169290920160200192915050565b600060018060a01b0382511683526020820151602084015260408201516080604085015261111860808501826110bb565b90506060830151848203606086015261113182826110bb565b95945050505050565b6001600160801b03169052565b67ffffffffffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156111d657603f198886030184526111c48583516110e7565b945092850192908501906001016111a8565b5092979650505050505050565b60208082526021908201527f464c59425948656c7065723a2053656e646572206d7573742062652041646d696040820152603760f91b606082015260800190565b6000602082526112386020830184516110a8565b602083015161124a60408401826110a8565b50604083015161125d6060840182611147565b5060608301516112706080840182611147565b50608083015161128360a084018261113a565b5060a083015160c083015260c083015160e083015260e08301516101006112ac818501836110b5565b84015190506101206112c0848201836110b5565b84015190506101406112d4848201836110b5565b8085015191505061018061016081818601526112f46101a08601846110e7565b90860151858203601f19018387015290925061131083826110e7565b9695505050505050565b60006020825261132e6020830184516110a8565b602083015161134060408401826110a8565b506040830151611353606084018261113a565b506060830151611366608084018261113a565b50608083015161137960a084018261113a565b5060a083015161138c60c084018261113a565b5060c083015161139f60e0840182611147565b5060e08301516101006113b481850183611147565b84015190506101206113c8848201836110b5565b84015190506101406113dc848201836110b5565b84015190506101606113f0848201836110b5565b808501519150506101a061018081818601526112f46101c08601846110e7565b600060208252610db360208301846110e7565b90815260200190565b60405181810167ffffffffffffffff8111828210171561144e5761144e6114ad565b604052919050565b60005b83811015611471578181015183820152602001611459565b83811115611480576000848401525b50505050565b60006000198214156114a657634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b3757600080fdfea2646970667358221220925105c1e107ce7e8460c9097085fe80d2d9d893867ee40cb6ed0bf9ddf62fc364736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635a2e2f471161005b5780635a2e2f4714610116578063748365ef1461012b57806380f5560514610140578063927da1051461014857610088565b8063193d13621461008d5780631f69565f146100b65780633c74720c146100d657806346a0fe47146100f6575b600080fd5b6100a061009b366004610d97565b610168565b6040516100ad9190611224565b60405180910390f35b6100c96100c4366004610d97565b61047e565b6040516100ad9190611410565b6100e96100e4366004610d97565b610614565b6040516100ad919061131a565b610109610104366004610e20565b61097e565b6040516100ad9190611183565b610129610124366004610d97565b610a67565b005b610133610b3a565b6040516100ad9190611155565b610133610b49565b61015b610156366004610dd6565b610b58565b6040516100ad9190611423565b610170610c51565b81610179610c51565b6001600160a01b0382168082526040805162018df760e91b8152905163031bee0091600480820192606092909190829003018186803b1580156101bb57600080fd5b505afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f3919061104e565b6001600160801b0316608084015267ffffffffffffffff90811660608401521660408083019190915280516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561025a57600080fd5b505afa15801561026e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102929190610ed3565b15156101208201526040805163e0e081d760e01b815290516001600160a01b0384169163e0e081d7916004808301926080929190829003018186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103129190611009565b1515610100850152151560e084015260c083015260a0820152604080516304cfed9960e51b815290516103a8916001600160a01b038516916399fdb32091600480820192602092909190829003018186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c49190610dba565b8161014001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190610dba565b905061042e610cc1565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156104625761045b610be1565b905061046e565b61046b8261047e565b90505b610160830152509150505b919050565b610486610cc1565b61048e610cc1565b6001600160a01b038316808252604080516306fdde0360e01b815290518592916306fdde03916004808301926000929190829003018186803b1580156104d357600080fd5b505afa1580156104e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050f9190810190610eed565b8260400181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058c9190810190610eed565b8260600181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cd57600080fd5b505afa1580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106059190611087565b60ff1660208301525092915050565b61061c610cf2565b81610625610cf2565b6001600160a01b0382168082526040805163e0e081d760e01b8152905163e0e081d791600480820192606092909190829003018186803b15801561066857600080fd5b505afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190610f7d565b151561012084015215156101008301526001600160801b0316604080830191909152805162018df760e91b815290516001600160a01b0384169163031bee00916004808301926060929190829003018186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610737919061104e565b6001600160801b0316606084015267ffffffffffffffff90811660e08401521660c0820152604080516308b42a7160e31b815281516001600160a01b038516926345a153889260048082019391829003018186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190610fbf565b6001600160801b0390811660a0840152166080820152604080516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190610ed3565b816101400190151590811515815250506108aa826001600160a01b03166399fdb3206040518163ffffffff1660e01b815260040160206040518083038186803b15801561037057600080fd5b8161016001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ee57600080fd5b505afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190610dba565b9050610930610cc1565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156109645761095d610be1565b9050610970565b61096d8261047e565b90505b610180830152509392505050565b60606000825167ffffffffffffffff8111156109aa57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109e357816020015b6109d0610cc1565b8152602001906001900390816109c85790505b50905060005b8351811015610a6057610a22848281518110610a1557634e487b7160e01b600052603260045260246000fd5b602002602001015161047e565b828281518110610a4257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610a5890611486565b9150506109e9565b5092915050565b60015460405163c395fcb360e01b81526001600160a01b039091169063c395fcb390610a97903390600401611155565b60206040518083038186803b158015610aaf57600080fd5b505afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190610ed3565b610b0c5760405162461bcd60e51b8152600401610b03906111e3565b60405180910390fd5b6001600160a01b03811615610b3757600080546001600160a01b0319166001600160a01b0383161790555b50565b6001546001600160a01b031681565b6000546001600160a01b031681565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90610b899086908690600401611169565b60206040518083038186803b158015610ba157600080fd5b505afa158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd99190610ff1565b949350505050565b610be9610cc1565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526040805180820182526008815267455448455245554d60c01b602080830191909152828401919091528151808301909252600382526208aa8960eb1b82820152606083019190915260129082015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101408101610caf610cc1565b8152602001610cbc610cc1565b905290565b604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526101608101610caf610cc1565b8051801515811461047957600080fd5b80516001600160801b038116811461047957600080fd5b805167ffffffffffffffff8116811461047957600080fd5b600060208284031215610da8578081fd5b8135610db3816114c3565b9392505050565b600060208284031215610dcb578081fd5b8151610db3816114c3565b600080600060608486031215610dea578182fd5b8335610df5816114c3565b92506020840135610e05816114c3565b91506040840135610e15816114c3565b809150509250925092565b60006020808385031215610e32578182fd5b823567ffffffffffffffff80821115610e49578384fd5b818501915085601f830112610e5c578384fd5b813581811115610e6e57610e6e6114ad565b8381029150610e7e84830161142c565b8181528481019084860184860187018a1015610e98578788fd5b8795505b83861015610ec65780359450610eb1856114c3565b84835260019590950194918601918601610e9c565b5098975050505050505050565b600060208284031215610ee4578081fd5b610db382610d58565b600060208284031215610efe578081fd5b815167ffffffffffffffff80821115610f15578283fd5b818401915084601f830112610f28578283fd5b815181811115610f3a57610f3a6114ad565b610f4d601f8201601f191660200161142c565b9150808252856020828501011115610f63578384fd5b610f74816020840160208601611456565b50949350505050565b600080600060608486031215610f91578283fd5b610f9a84610d68565b9250610fa860208501610d58565b9150610fb660408501610d58565b90509250925092565b60008060408385031215610fd1578182fd5b610fda83610d68565b9150610fe860208401610d68565b90509250929050565b600060208284031215611002578081fd5b5051919050565b6000806000806080858703121561101e578081fd5b845193506020850151925061103560408601610d58565b915061104360608601610d58565b905092959194509250565b600080600060608486031215611062578283fd5b61106b84610d7f565b925061107960208501610d7f565b9150610fb660408501610d68565b600060208284031215611098578081fd5b815160ff81168114610db3578182fd5b6001600160a01b03169052565b15159052565b600081518084526110d3816020860160208601611456565b601f01601f19169290920160200192915050565b600060018060a01b0382511683526020820151602084015260408201516080604085015261111860808501826110bb565b90506060830151848203606086015261113182826110bb565b95945050505050565b6001600160801b03169052565b67ffffffffffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156111d657603f198886030184526111c48583516110e7565b945092850192908501906001016111a8565b5092979650505050505050565b60208082526021908201527f464c59425948656c7065723a2053656e646572206d7573742062652041646d696040820152603760f91b606082015260800190565b6000602082526112386020830184516110a8565b602083015161124a60408401826110a8565b50604083015161125d6060840182611147565b5060608301516112706080840182611147565b50608083015161128360a084018261113a565b5060a083015160c083015260c083015160e083015260e08301516101006112ac818501836110b5565b84015190506101206112c0848201836110b5565b84015190506101406112d4848201836110b5565b8085015191505061018061016081818601526112f46101a08601846110e7565b90860151858203601f19018387015290925061131083826110e7565b9695505050505050565b60006020825261132e6020830184516110a8565b602083015161134060408401826110a8565b506040830151611353606084018261113a565b506060830151611366608084018261113a565b50608083015161137960a084018261113a565b5060a083015161138c60c084018261113a565b5060c083015161139f60e0840182611147565b5060e08301516101006113b481850183611147565b84015190506101206113c8848201836110b5565b84015190506101406113dc848201836110b5565b84015190506101606113f0848201836110b5565b808501519150506101a061018081818601526112f46101c08601846110e7565b600060208252610db360208301846110e7565b90815260200190565b60405181810167ffffffffffffffff8111828210171561144e5761144e6114ad565b604052919050565b60005b83811015611471578181015183820152602001611459565b83811115611480576000848401525b50505050565b60006000198214156114a657634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b3757600080fdfea2646970667358221220925105c1e107ce7e8460c9097085fe80d2d9d893867ee40cb6ed0bf9ddf62fc364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6057,
        "contract": "contracts/Helper/FLYBYHelper.sol:FLYBYHelper",
        "label": "market",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFlybyMarketFactory)6116"
      },
      {
        "astId": 6060,
        "contract": "contracts/Helper/FLYBYHelper.sol:FLYBYHelper",
        "label": "accessControls",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FLYBYAccessControls)208"
      }
    ],
    "types": {
      "t_contract(FLYBYAccessControls)208": {
        "encoding": "inplace",
        "label": "contract FLYBYAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IFlybyMarketFactory)6116": {
        "encoding": "inplace",
        "label": "contract IFlybyMarketFactory",
        "numberOfBytes": "20"
      }
    }
  }
}