{
  "address": "0xB6AaDa04B2B496658A3fF0303c0477Be78b1d527",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "AddedCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AdminRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AdminRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        }
      ],
      "name": "AuctionPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AuctionWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MinterRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MinterRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OperatorRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OperatorRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SmartContractRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SmartContractRoleRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMART_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addOperatorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addSmartContractRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSuccessful",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitment",
          "type": "uint256"
        }
      ],
      "name": "calculateCommitment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "committed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitTokensFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "enableList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeTimeExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInformation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pointList",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getCrowdsaleInitData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasMinterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasOperatorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasSmartContractRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initAccessControls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pointList",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "initCrowdsale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "totalTokens",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "goal",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketStatus",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "commitmentsTotal",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "finalized",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usePointList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketTemplate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeOperatorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeSmartContractRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        }
      ],
      "name": "setAuctionPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setAuctionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setAuctionWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_list",
          "type": "address"
        }
      ],
      "name": "setList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "tokensClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimerCommitment",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeefe91fbe784e2ab4054cacc8cf1da4425eada418e91afff2ee96643baaf9bf8",
  "receipt": {
    "to": null,
    "from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
    "contractAddress": "0xB6AaDa04B2B496658A3fF0303c0477Be78b1d527",
    "transactionIndex": 7,
    "gasUsed": "3475723",
    "logsBloom": "0x
    "blockHash": "0xb6f05c8f37852ddfaae426e3635c17b3fba1911f344ba0c7984bbabc2630a252",
    "transactionHash": "0xeefe91fbe784e2ab4054cacc8cf1da4425eada418e91afff2ee96643baaf9bf8",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 9931575,
        "transactionHash": "0xeefe91fbe784e2ab4054cacc8cf1da4425eada418e91afff2ee96643baaf9bf8",
        "address": "0xB6AaDa04B2B496658A3fF0303c0477Be78b1d527",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xb6f05c8f37852ddfaae426e3635c17b3fba1911f344ba0c7984bbabc2630a252"
      }
    ],
    "blockNumber": 9931575,
    "cumulativeGasUsed": "6702299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d514d32e00e632aec9997748b28effb2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"AddedCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AdminRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AdminRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"AuctionPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AuctionWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MinterRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MinterRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OperatorRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OperatorRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SmartContractRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SmartContractRoleRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMART_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSmartContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitment\",\"type\":\"uint256\"}],\"name\":\"calculateCommitment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"committed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitTokensFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeTimeExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pointList\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getCrowdsaleInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasMinterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasOperatorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasSmartContractRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pointList\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"initCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"goal\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSmartContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"}],\"name\":\"setAuctionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setAuctionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setAuctionWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_list\",\"type\":\"address\"}],\"name\":\"setList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerCommitment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdminRole(address)\":{\"details\":\"The sender must have the admin role.\",\"params\":{\"_address\":\"EOA or contract receiving the new role.\"}},\"addMinterRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"addOperatorRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"addSmartContractRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"auctionEnded()\":{\"returns\":{\"_0\":\"auctionEnded True if sold out or time has ended.\"}},\"auctionSuccessful()\":{\"returns\":{\"_0\":\"auctionSuccessful True if the commitmentsTotal is equal or higher than goal.\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"},\"returns\":{\"results\":\"An array with the returned data of each function call, mapped one-to-one to `calls`. F1: External is ok here because this is the batch function, adding it to a batch makes no sense F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value C3: The length of the loop is fully under user control, so can't be exploited C7: Delegatecall is only used on the same contract, so it's safe\",\"successes\":\"An array indicating the success of a call, mapped one-to-one to `calls`.\"}},\"finalize()\":{\"details\":\"Must be called after crowdsale ends, to do some extra finalization work. Calls the contracts finalization function.\"},\"finalizeTimeExpired()\":{\"returns\":{\"_0\":\"True if 7 days have passed since the end of the auction\"}},\"finalized()\":{\"returns\":{\"_0\":\"bool True if sale has been finalised.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAdminRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked.\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not.\"}},\"hasMinterRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"hasOperatorRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasSmartContractRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"initAccessControls(address)\":{\"params\":{\"_admin\":\"Admins address.\"}},\"initMarket(bytes)\":{\"params\":{\"_data\":\"Encoded data for initialization.\"}},\"isOpen()\":{\"returns\":{\"_0\":\"isOpen True if the crowdsale is open, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAdminRole(address)\":{\"details\":\"The sender must have the admin role.\",\"params\":{\"_address\":\"EOA or contract affected.\"}},\"removeMinterRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"removeOperatorRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"removeSmartContractRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAuctionPrice(uint256,uint256)\":{\"params\":{\"_goal\":\"Minimum amount raised and goal for the auction.\",\"_rate\":\"Price per token.\"}},\"setAuctionTime(uint256,uint256)\":{\"params\":{\"_endTime\":\"Auction end time.\",\"_startTime\":\"Auction start time.\"}},\"setAuctionWallet(address)\":{\"params\":{\"_wallet\":\"Auction wallet is where funds will be sent.\"}},\"tokensClaimable(address)\":{\"returns\":{\"claimerCommitment\":\"How many tokens the user is able to claim.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawTokens(address)\":{\"details\":\"Withdraw tokens only after crowdsale ends.\",\"params\":{\"beneficiary\":\"Whose tokens will be withdrawn.\"}}},\"stateVariables\":{\"marketTemplate\":{\"details\":\"For different marketplace types, this must be incremented.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MinterRoleGranted(address,address)\":{\"notice\":\"Events for adding and removing various roles\"}},\"kind\":\"user\",\"methods\":{\"MINTER_ROLE()\":{\"notice\":\"Role definitions\"},\"addAdminRole(address)\":{\"notice\":\"Grants the admin role to an address.\"},\"addMinterRole(address)\":{\"notice\":\"Grants the minter role to an address\"},\"addOperatorRole(address)\":{\"notice\":\"Grants the operator role to an address\"},\"addSmartContractRole(address)\":{\"notice\":\"Grants the smart contract role to an address\"},\"auctionEnded()\":{\"notice\":\"Checks if the sale has ended.\"},\"auctionSuccessful()\":{\"notice\":\"Checks if the sale minimum amount was raised.\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"finalize()\":{\"notice\":\"Manually finalizes the Crowdsale.\"},\"finalized()\":{\"notice\":\"Checks if the sale has been finalised.\"},\"hasAdminRole(address)\":{\"notice\":\"Used to check whether an address has the admin role.\"},\"hasMinterRole(address)\":{\"notice\":\"Used to check whether an address has the minter role\"},\"hasOperatorRole(address)\":{\"notice\":\"Used to check whether an address has the operator role\"},\"hasSmartContractRole(address)\":{\"notice\":\"Used to check whether an address has the smart contract role\"},\"initAccessControls(address)\":{\"notice\":\"Initializes access controls.\"},\"initMarket(bytes)\":{\"notice\":\"Decodes and hands Crowdsale data to the initCrowdsale function.\"},\"isOpen()\":{\"notice\":\"Checks if the sale is open.\"},\"marketTemplate()\":{\"notice\":\"FLYBYMarket template id for the factory contract.\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`. F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert) if part of a batch this could be used to grief once as the second call would not need the permit\"},\"removeAdminRole(address)\":{\"notice\":\"Removes the admin role from an address.\"},\"removeMinterRole(address)\":{\"notice\":\"Removes the minter role from an address\"},\"removeOperatorRole(address)\":{\"notice\":\"Removes the operator role from an address\"},\"removeSmartContractRole(address)\":{\"notice\":\"Removes the smart contract role from an address\"},\"setAuctionPrice(uint256,uint256)\":{\"notice\":\"Admin can set auction price through this function.\"},\"setAuctionTime(uint256,uint256)\":{\"notice\":\"Admin can set start and end time through this function.\"},\"setAuctionWallet(address)\":{\"notice\":\"Admin can set the auction wallet through this function.\"},\"tokensClaimable(address)\":{\"notice\":\"Adjusts users commitment depending on amount already claimed and unclaimed tokens left.\"},\"withdrawTokens(address)\":{\"notice\":\"Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auctions/PrivateSale.sol\":\"PrivateSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/FLYBYAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FLYBYAdminAccess.sol\\\";\\n\\ncontract FLYBYAccessControls is FLYBYAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x15d26912cdf5e68c3bf91040671f5c6f863e32b72906663c4007777abcb5d1e3\",\"license\":\"MIT\"},\"contracts/Access/FLYBYAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\ncontract FLYBYAdminAccess is AccessControl {\\n    bool private initAccess;\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x043cc7e6c78cafc685a1348e2af7fb6d49dd66383605b5265383a795f9388f9a\",\"license\":\"MIT\"},\"contracts/Auctions/PrivateSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../OpenZeppelin/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../OpenZeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../Access/FLYBYAccessControls.sol\\\";\\nimport \\\"../Utils/SafeTransfer.sol\\\";\\nimport \\\"../Utils/BoringBatchable.sol\\\";\\nimport \\\"../Utils/BoringMath.sol\\\";\\nimport \\\"../Interfaces/IPointList.sol\\\";\\nimport \\\"../Interfaces/IFlybyMarket.sol\\\";\\nimport \\\"../RedeemToken.sol\\\";\\nimport \\\"../OpenZeppelin/access/Ownable.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\ncontract PrivateSale is IFlybyMarket, FLYBYAccessControls, BoringBatchable, SafeTransfer, Ownable, ReentrancyGuard {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice FLYBYMarket template id for the factory contract.\\n     * @dev For different marketplace types, this must be incremented.\\n     */ \\n    uint256 public constant override marketTemplate = 1;\\n    uint256 private constant AUCTION_TOKEN_DECIMALS = 1e18;\\n\\n    struct MarketPrice {\\n        uint128 rate;\\n        uint128 goal; \\n    }\\n    MarketPrice public marketPrice;\\n\\n    struct MarketInfo {\\n        uint256 startTime;\\n        uint256 endTime; \\n        uint128 totalTokens;\\n    }\\n    MarketInfo public marketInfo;\\n\\n    struct MarketStatus {\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n    }\\n    MarketStatus public marketStatus;\\n\\n    address public auctionToken;\\n    address payable public wallet;\\n    address public paymentCurrency;\\n    address public pointList;\\n\\n    mapping(address => uint256) public commitments;\\n    mapping(address => uint256) public claimed;\\n\\n    event AuctionTimeUpdated(uint256 startTime, uint256 endTime); \\n    event AuctionPriceUpdated(uint256 rate, uint256 goal); \\n    event AuctionWalletUpdated(address wallet); \\n    event AddedCommitment(address addr, uint256 commitment);\\n    event AuctionFinalized();\\n    event AuctionCancelled();\\n\\n    function initCrowdsale(\\n        address _funder,\\n        address _token,\\n        address _paymentCurrency,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _rate,\\n        uint256 _goal,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    ) public {\\n        require(_startTime < 10000000000);\\n        require(_endTime < 10000000000);\\n        require(_startTime >= block.timestamp);\\n        require(_endTime > _startTime);\\n        require(_rate > 0);\\n        require(_wallet != address(0));\\n        require(_admin != address(0));\\n        require(_totalTokens > 0);\\n        require(_goal > 0);\\n        require(IERC20(_token).decimals() == 18);\\n        require(IERC20(_paymentCurrency).decimals() > 0);\\n\\n        marketPrice.rate = BoringMath.to128(_rate);\\n        marketPrice.goal = BoringMath.to128(_goal);\\n\\n        marketInfo.startTime = BoringMath.to128(_startTime);\\n        marketInfo.endTime = BoringMath.to128(_endTime);\\n        marketInfo.totalTokens = BoringMath.to128(_totalTokens);\\n\\n        auctionToken = _token;\\n        paymentCurrency = _paymentCurrency;\\n        wallet = _wallet;\\n\\n        initAccessControls(_admin);\\n        _setList(_pointList);\\n        _safeTransferFrom(_token, _funder, _totalTokens);\\n    }\\n\\n    function commitTokens(uint256 _amount, bool readAndAgreedToMarketParticipationAgreement) public {\\n        commitTokensFrom(_msgSender(), _amount, readAndAgreedToMarketParticipationAgreement);\\n    }\\n\\n    function _getMinCommit() internal view returns (uint256) {\\n        uint8 decimalPaymentCurrency = IERC20(paymentCurrency).decimals();\\n        return 999 * 10 ** decimalPaymentCurrency;\\n    }\\n\\n    function _getMaxCommit() internal view returns (uint256) {\\n        uint8 decimalPaymentCurrency = IERC20(paymentCurrency).decimals();\\n        return 9999 * 10 ** decimalPaymentCurrency;\\n    }\\n    \\n    function commitTokensFrom(\\n        address _from,\\n        uint256 _amount,\\n        bool readAndAgreedToMarketParticipationAgreement\\n    ) \\n        public nonReentrant\\n    {\\n        require(_getMinCommit() <= _amount && _amount <= _getMaxCommit());\\n        require(readAndAgreedToMarketParticipationAgreement);\\n        uint256 tokensToTransfer = calculateCommitment(_amount);\\n        if (tokensToTransfer > 0) {\\n            _safeTransferFrom(paymentCurrency, _msgSender(), tokensToTransfer);\\n            _addCommitment(_from, tokensToTransfer);\\n            if (marketInfo.totalTokens == _getTokenAmount(uint256(marketStatus.commitmentsTotal))) {\\n                marketInfo.endTime = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    function calculateCommitment(uint256 _commitment)\\n        public\\n        view\\n        returns (uint256 committed)\\n    {\\n        uint256 tokens = _getTokenAmount(_commitment);\\n        uint256 tokensCommited =_getTokenAmount(uint256(marketStatus.commitmentsTotal));\\n        if (tokensCommited.add(tokens) > uint256(marketInfo.totalTokens)) {\\n            return _getTokenPrice(uint256(marketInfo.totalTokens).sub(tokensCommited));\\n        }\\n        return _commitment;\\n    }\\n\\n    /**\\n     * @notice Updates commitment of the buyer and the amount raised, emits an event.\\n     * @param _addr Recipient of the token purchase.\\n     * @param _commitment Value in wei or token involved in the purchase.\\n     */\\n    function _addCommitment(address _addr, uint256 _commitment) internal {\\n        require(block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime));\\n        require(_addr != address(0));\\n\\n        uint256 newCommitment = commitments[_addr].add(_commitment);\\n        if (marketStatus.usePointList) {\\n            require(IPointList(pointList).hasPoints(_addr, newCommitment));\\n        }\\n\\n        commitments[_addr] = newCommitment;        \\n        marketStatus.commitmentsTotal = BoringMath.to128(uint256(marketStatus.commitmentsTotal).add(_commitment));\\n        emit AddedCommitment(_addr, _commitment);\\n    }\\n\\n    function withdrawTokens() public {\\n        withdrawTokens(payable(_msgSender()));\\n    }\\n\\n    /**\\n     * @notice Approve tokens\\n     * @param addressToApprove Address approved\\n     * @param token Token Address\\n     * @param amount Amount of token\\n     */\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (IERC20(token).allowance(address(this), addressToApprove) < amount) {\\n            IERC20(token).approve(addressToApprove, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\\n     * @dev Withdraw tokens only after crowdsale ends.\\n     * @param beneficiary Whose tokens will be withdrawn.\\n     */\\n    function withdrawTokens(address payable beneficiary) public nonReentrant {    \\n        if (auctionSuccessful()) {\\n            require(marketStatus.finalized);\\n            uint256 tokensToClaim = tokensClaimable(beneficiary);\\n            require(tokensToClaim > 0); \\n            claimed[beneficiary] = claimed[beneficiary].add(tokensToClaim);\\n            commitments[beneficiary] = 0;\\n            approve(0x9B1110E54430e279D740072199583845E989D30a, auctionToken, tokensToClaim); \\n            \\n            uint256 firstRedeemToken = tokensToClaim.div(4);\\n            uint256 secondRedeemToken = tokensToClaim.div(4);\\n            uint256 thirdRedeemToken = tokensToClaim.div(4);\\n            uint256 fourthRedeemToken = tokensToClaim.div(4);\\n            \\n            RedeemToken(0x9B1110E54430e279D740072199583845E989D30a).lockTokens(auctionToken, address(this), firstRedeemToken, marketInfo.endTime + 10 * 30, beneficiary);\\n            RedeemToken(0x9B1110E54430e279D740072199583845E989D30a).lockTokens(auctionToken, address(this), secondRedeemToken, marketInfo.endTime + 10 * 60, beneficiary);\\n            RedeemToken(0x9B1110E54430e279D740072199583845E989D30a).lockTokens(auctionToken, address(this), thirdRedeemToken, marketInfo.endTime + 10 * 90, beneficiary);\\n            RedeemToken(0x9B1110E54430e279D740072199583845E989D30a).lockTokens(auctionToken, address(this), fourthRedeemToken, marketInfo.endTime + 10 * 120, beneficiary);\\n        } else {\\n            require(block.timestamp > uint256(marketInfo.endTime));\\n            uint256 accountBalance = commitments[beneficiary];\\n            commitments[beneficiary] = 0;\\n            _safeTokenPayment(paymentCurrency, beneficiary, accountBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adjusts users commitment depending on amount already claimed and unclaimed tokens left.\\n     * @return claimerCommitment How many tokens the user is able to claim.\\n     */\\n    function tokensClaimable(address _user) public view returns (uint256 claimerCommitment) {\\n        uint256 unclaimedTokens = IERC20(auctionToken).balanceOf(address(this));\\n        claimerCommitment = _getTokenAmount(commitments[_user]);\\n        claimerCommitment = claimerCommitment.sub(claimed[_user]);\\n\\n        if (claimerCommitment > unclaimedTokens) {\\n            claimerCommitment = unclaimedTokens;\\n        }\\n    }\\n\\n    /********************************\\n     *       Finalize Auction\\n     ********************************/\\n    \\n    /**\\n     * @notice Manually finalizes the Crowdsale.\\n     * @dev Must be called after crowdsale ends, to do some extra finalization work.\\n     * Calls the contracts finalization function.\\n     */\\n    function finalize() public nonReentrant {\\n        require(            \\n            hasAdminRole(_msgSender()) \\n            || wallet == _msgSender()\\n            || hasSmartContractRole(_msgSender()) \\n            || finalizeTimeExpired()\\n        );\\n        MarketStatus storage status = marketStatus;\\n        require(!status.finalized);\\n        MarketInfo storage info = marketInfo;\\n        require(auctionEnded()); \\n\\n        if (auctionSuccessful()) {\\n            _safeTokenPayment(paymentCurrency, wallet, uint256(status.commitmentsTotal));\\n            uint256 soldTokens = _getTokenAmount(uint256(status.commitmentsTotal));\\n            uint256 unsoldTokens = uint256(info.totalTokens).sub(soldTokens);\\n\\n            if(unsoldTokens > 0) {\\n                _safeTokenPayment(auctionToken, wallet, unsoldTokens);\\n            }\\n        } else {\\n            _safeTokenPayment(auctionToken, wallet, uint256(info.totalTokens));\\n        }\\n\\n        status.finalized = true;\\n        emit AuctionFinalized();\\n    }\\n\\n    /**********************************\\n     *     Other useful functions \\n     **********************************/\\n    \\n    function tokenPrice() public view returns (uint256) {\\n        return uint256(marketPrice.rate); \\n    }\\n\\n    function _getTokenPrice(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(uint256(marketPrice.rate)).div(AUCTION_TOKEN_DECIMALS);   \\n    }\\n\\n    function getTokenAmount(uint256 _amount) public view returns (uint256) {\\n        _getTokenAmount(_amount);\\n    }\\n\\n    /**\\n     * @notice Calculates the number of tokens to purchase.\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param _amount Value in wei or token to be converted into tokens.\\n     * @return tokenAmount Number of tokens that can be purchased with the specified amount.\\n     */\\n    function _getTokenAmount(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(AUCTION_TOKEN_DECIMALS).div(uint256(marketPrice.rate));\\n    }\\n\\n    /**\\n     * @notice Checks if the sale is open.\\n     * @return isOpen True if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        return block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime);\\n    }\\n\\n    /**\\n     * @notice Checks if the sale minimum amount was raised.\\n     * @return auctionSuccessful True if the commitmentsTotal is equal or higher than goal.\\n     */\\n    function auctionSuccessful() public view returns (bool) {\\n        return uint256(marketStatus.commitmentsTotal) >= uint256(marketPrice.goal);\\n    }\\n\\n    /**\\n     * @notice Checks if the sale has ended.\\n     * @return auctionEnded True if sold out or time has ended.\\n     */\\n    function auctionEnded() public view returns (bool) {\\n        return block.timestamp > uint256(marketInfo.endTime) || \\n        _getTokenAmount(uint256(marketStatus.commitmentsTotal) + 1) >= uint256(marketInfo.totalTokens);\\n    }\\n\\n    /**\\n     * @notice Checks if the sale has been finalised.\\n     * @return bool True if sale has been finalised.\\n     */\\n    function finalized() public view returns (bool) {\\n        return marketStatus.finalized;\\n    }\\n\\n    /**\\n     * @return True if 7 days have passed since the end of the auction\\n     */\\n    function finalizeTimeExpired() public view returns (bool) {\\n        return uint256(marketInfo.endTime) + 7 days < block.timestamp;\\n    }\\n\\n    /******************************\\n     *        Point Lists\\n     ******************************/\\n    \\n    function setList(address _list) external {\\n        require(hasAdminRole(_msgSender()));\\n        _setList(_list);\\n    }\\n\\n    function enableList(bool _status) external {\\n        require(hasAdminRole(_msgSender()));\\n        marketStatus.usePointList = _status;\\n    }\\n\\n    function _setList(address _pointList) private {\\n        if (_pointList != address(0)) {\\n            pointList = _pointList;\\n            marketStatus.usePointList = true;\\n        }\\n    }\\n\\n    /******************************\\n     *       Setter Auction\\n     ******************************/\\n\\n    /**\\n     * @notice Admin can set start and end time through this function.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     */\\n    function setAuctionTime(uint256 _startTime, uint256 _endTime) external {\\n        require(hasAdminRole(_msgSender()));\\n        require(_startTime < 10000000000);\\n        require(_endTime < 10000000000);\\n        require(_startTime >= block.timestamp);\\n        require(_endTime > _startTime);\\n\\n        require(marketStatus.commitmentsTotal == 0);\\n\\n        marketInfo.startTime = BoringMath.to128(_startTime);\\n        marketInfo.endTime = BoringMath.to128(_endTime);\\n        \\n        emit AuctionTimeUpdated(_startTime,_endTime);\\n    }\\n\\n    /**\\n     * @notice Admin can set auction price through this function.\\n     * @param _rate Price per token.\\n     * @param _goal Minimum amount raised and goal for the auction.\\n     */\\n    function setAuctionPrice(uint256 _rate, uint256 _goal) external {\\n        require(hasAdminRole(_msgSender()));\\n        require(_goal > 0);\\n        require(_rate > 0);\\n        require(marketStatus.commitmentsTotal == 0);\\n        marketPrice.rate = BoringMath.to128(_rate);\\n        marketPrice.goal = BoringMath.to128(_goal);\\n        require(_getTokenAmount(_goal) <= uint256(marketInfo.totalTokens));\\n\\n        emit AuctionPriceUpdated(_rate,_goal);\\n    }\\n\\n    /**\\n     * @notice Admin can set the auction wallet through this function.\\n     * @param _wallet Auction wallet is where funds will be sent.\\n     */\\n    function setAuctionWallet(address payable _wallet) external onlyOwner {\\n        require(hasAdminRole(_msgSender()));\\n        require(_wallet != address(0));\\n        wallet = _wallet;\\n\\n        emit AuctionWalletUpdated(_wallet);\\n    }\\n\\n    /*******************************\\n     *      Market Launchers\\n     *******************************/\\n    \\n    function init(bytes calldata _data) external override payable {}\\n    \\n    /**\\n     * @notice Decodes and hands Crowdsale data to the initCrowdsale function.\\n     * @param _data Encoded data for initialization.\\n     */\\n    function initMarket(bytes calldata _data) public override {\\n        (\\n            address _funder,\\n            address _token,\\n            address _paymentCurrency,\\n            uint256 _totalTokens,\\n            uint256 _startTime,\\n            uint256 _endTime,\\n            uint256 _rate,\\n            uint256 _goal,\\n            address _admin,\\n            address _pointList,\\n            address payable _wallet\\n        ) = abi.decode(_data, (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            address,\\n            address\\n        ));\\n\\n        initCrowdsale(_funder, _token, _paymentCurrency, _totalTokens, _startTime, _endTime, _rate, _goal, _admin, _pointList, _wallet);\\n    }\\n\\n    function getCrowdsaleInitData(\\n        address _funder,\\n        address _token,\\n        address _paymentCurrency,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _rate,\\n        uint256 _goal,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    )\\n        external pure returns (bytes memory _data)\\n    {\\n        return abi.encode(\\n            _funder,\\n            _token,\\n            _paymentCurrency,\\n            _totalTokens,\\n            _startTime,\\n            _endTime,\\n            _rate,\\n            _goal,\\n            _admin,\\n            _pointList,\\n            _wallet\\n        );\\n    }\\n\\n    function getBaseInformation() external view returns(\\n        address, \\n        uint256,\\n        uint256,\\n        bool \\n    ) {\\n        return (auctionToken, marketInfo.startTime, marketInfo.endTime, marketStatus.finalized);\\n    }\\n\\n    function getTotalTokens() external view returns(uint256) {\\n        return uint256(marketInfo.totalTokens);\\n    }\\n}\\n\",\"keccak256\":\"0x839f8f9b6cb27b20766b29e62ab6f6c0b885daba8f7405aa3f7be2eb69dfac0d\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0xe4f8cb9ac9cd376f81da2348709e1f44dc0bd2fb44513c5d230702bb1b9e8b36\",\"license\":\"MIT\"},\"contracts/Interfaces/IFlybyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFlybyMarket {\\n\\n    function init(bytes calldata data) external payable;\\n    function initMarket( bytes calldata data ) external;\\n    function marketTemplate() external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xd862ab29398a22d9a62798c45017d14e702eab21756b96f13b20be4e54eb1bdf\",\"license\":\"MIT\"},\"contracts/Interfaces/IPointList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPointList {\\n    function isInList(address account) external view returns (bool);\\n    function hasPoints(address account, uint256 amount) external view  returns (bool);\\n    function setPoints(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external; \\n    function initPointList(address accessControl) external ;\\n\\n}\\n\",\"keccak256\":\"0x5ca6189f48425c8ef1041cecd626b6c6f66af41464fe8e149554d41632544e5c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/EnumerableSet.sol\\\";\\n\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x70a4ac51d4857ce35422d73f70cbec83f00f568e1f95a804dcfbbe509de5a82c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xa7e45faa3e6e933c4829ef8c2317e1a2f289b77202ae83907b5153be6a4b5a81\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a + b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\",\"keccak256\":\"0xc164f4d829f092ff01b333a944130288f57aef6666ad50b48c81ef7cc9dee765\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../Interfaces/IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n        _callOptionalReturn(token, abi.encodeWithSelector(0xa9059cbb, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n        _callOptionalReturn(token, abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb566c622ef146dca7200fa3e879b02b477b8757e21ca2376bfeaa24262656588\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xd217e5030771ed77e0df8d1028f05abdaba7df6991fc6e03229d8624c1999d9a\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xe0521887b553a6c5bef0acd727645ff69535b60fe7c5947e40f19391307d70d2\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x01c748c0e9f9c425f95c8f0e7eb6625675a4fde41b7f5444bcf6b894b375e72c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xc1656b57a49e1aad644a6cb3c589394ac337d328cec38bceef3c8d5bfd7a1949\",\"license\":\"MIT\"},\"contracts/RedeemToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Interfaces/IERC20.sol\\\";\\nimport \\\"./Utils/SafeTransfer.sol\\\";\\nimport \\\"./OpenZeppelin/math/SafeMath.sol\\\";\\nimport \\\"./OpenZeppelin/utils/Context.sol\\\";\\n\\ncontract RedeemToken is SafeTransfer, Context {\\n  using SafeMath for uint256;\\n\\n  struct Item {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 userIndex;\\n    address owner;\\n  }\\n\\n  /// @notice tracking assets belonging to a particular user\\n  struct UserInfo {\\n    mapping(address => mapping(address => uint256[])) lockToItems;\\n  }\\n\\n  mapping(address => UserInfo) users;\\n  /// @notice id number of the vault deposit\\n  uint256 public depositId;\\n  /// @notice an array of all the deposit Ids\\n  uint256[] public allDepositIds;\\n  /// @notice mapping from item Id to the Item struct\\n  mapping(uint256 => Item) public lockedItem;\\n\\n  event onLock(address tokenAddress, address user, uint256 amount);\\n  event onUnlock(address tokenAddress, uint256 amount);\\n\\n  /**\\n   * @notice Locking tokens in the vault\\n   * @param _tokenAddress Address of the token locked\\n   * @param _amount Number of tokens locked\\n   * @param _unlockTime Timestamp number marking when tokens get unlocked\\n   * @param _withdrawer Address where tokens can be withdrawn after unlocking\\n   */\\n  function lockTokens(\\n    address _tokenAddress,\\n    address _privateSaleAddress,\\n    uint256 _amount,\\n    uint256 _unlockTime,\\n    address _withdrawer\\n  )\\n    public returns (uint256 _id)\\n  {\\n    require(_amount > 0, \\\"RedeemToken: token amount is Zero\\\");\\n    require(_unlockTime < 10000000000, \\\"ReddemToken: timestamp should be in seconds\\\");\\n    require(_withdrawer != address(0), \\\"ReddemToken: withdrawer is zero address\\\");\\n    _safeTransferFrom(_tokenAddress, _msgSender(), _amount);\\n\\n    _id = ++depositId;\\n\\n    lockedItem[_id].amount = _amount;\\n    lockedItem[_id].unlockTime = _unlockTime;\\n    lockedItem[_id].owner = _withdrawer;\\n\\n    allDepositIds.push(_id);\\n\\n    UserInfo storage userItem = users[_withdrawer];\\n    userItem.lockToItems[_tokenAddress][_privateSaleAddress].push(_id);\\n    uint256 userIndex = userItem.lockToItems[_tokenAddress][_privateSaleAddress].length - 1;\\n    lockedItem[_id].userIndex = userIndex;\\n\\n    emit onLock(_tokenAddress, _msgSender(), lockedItem[_id].amount);\\n  }\\n\\n  /**\\n   * @notice Withdrawing tokens from the vault\\n   * @param _tokenAddress Address of the token to withdraw\\n   * @param _index Index number of the list with Ids\\n   * @param _id Id number\\n   * @param _amount Number of tokens to withdraw\\n   */\\n  function withdrawTokens(\\n    address _tokenAddress,\\n    address _privateSaleAddress,\\n    uint256 _index,\\n    uint256 _id,\\n    uint256 _amount,\\n    address _recipient\\n  ) external {\\n    require(_amount > 0, \\\"RedeemToken: token amount is zero\\\");\\n    uint256 id = users[_recipient].lockToItems[_tokenAddress][_privateSaleAddress][_index];\\n    Item storage userItem = lockedItem[id];\\n    require(id == _id && userItem.owner == _recipient, \\\"RedeemToken: not found\\\");\\n    require(userItem.unlockTime < block.timestamp, \\\"RedeemToken: not unlocked yet\\\");\\n    userItem.amount = userItem.amount.sub(_amount);\\n\\n    _safeTransfer(_tokenAddress, _recipient, _amount);\\n    emit onUnlock(_tokenAddress, _amount);\\n  }\\n\\n  /**\\n   * @notice Retrieve data from the item under user index number\\n   * @param _index Index number of the list with item ids\\n   * @param _tokenAddress Address of the token corresponding to this item\\n   * @param _user User address\\n   * @return Items token amount number, Items unlock timestamp, Items owner address, Items Id number\\n   */\\n  function getItemAtUserIndex(\\n    uint256 _index,\\n    address _tokenAddress,\\n    address _privateSaleAddress,\\n    address _user\\n  )\\n    external view returns (uint256, uint256, address, uint256)\\n  {\\n    uint256 id = users[_user].lockToItems[_tokenAddress][_privateSaleAddress][_index];\\n    Item storage item = lockedItem[id];\\n    return (item.amount, item.unlockTime, item.owner, id);\\n  }\\n\\n  /**\\n   * @notice Retrieve all the data from Item struct under given Id.\\n   * @param _id Id number.\\n   * @return All the data for this Id (token amount number, unlock time number, owner address and user index number)\\n   */\\n  function getLockedItemAtId(uint256 _id) external view returns (uint256, uint256, address, uint256, uint256) {\\n      Item storage item = lockedItem[_id];\\n      return (item.amount, item.unlockTime, item.owner, item.userIndex, _id);\\n  }\\n\\n  /**\\n   * @notice Get locked item's ids of the specified user\\n   * @param _user User address\\n   * @param _tokenAddress Address token\\n   */\\n  function getLockedItemIdsOfUser(address _user, address _tokenAddress, address _privateSaleAddress) external view returns (uint256[] memory) {\\n    UserInfo storage user = users[_user];\\n    return user.lockToItems[_tokenAddress][_privateSaleAddress];\\n  }\\n}\",\"keccak256\":\"0x4a97f31a54ccf69ed638870bd59e31daded0ebf8b8f8dc5c197ec5c46e6ed424\",\"license\":\"MIT\"},\"contracts/Utils/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\nimport \\\"./BoringERC20.sol\\\";\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string));\\n    }\\n\\n    /**\\n     * @notice Allows batched call to self (this contract).\\n     * @param calls An array of inputs for each call.\\n     * @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n     * @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n     * @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n     * F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n     * F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n     * C3: The length of the loop is fully under user control, so can't be exploited\\n     * C7: Delegatecall is only used on the same contract, so it's safe\\n     */\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /**\\n     * @notice Call wrapper that performs `ERC20.permit` on `token`.\\n     * Lookup `IERC20.permit`.\\n     * F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n     * if part of a batch this could be used to grief once as the second call would not need the permit\\n     */\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0xc8fa0456e38bbb57f17d2397cc712e61904564dcff041cf2c9bd1bc88d5a122d\",\"license\":\"MIT\"},\"contracts/Utils/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../Interfaces/IERC20.sol\\\";\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41;\\n    bytes4 private constant SIG_NAME = 0x06fdde03;\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567;\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb;\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd;\\n\\n    /**\\n     * @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n     * @param token The address of the ERC-20 token contract.\\n     * @return (string) Token symbol.\\n     */\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n     * @param token The address of the ERC-20 token contract.\\n     * @return (string) Token name.\\n     */\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n     * @param token The address of the ERC-20 token contract.\\n     * @return (uint8) Token decimals.\\n     */\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n     * Reverts on a failed transfer.\\n     * @param token The address of the ERC-20 token.\\n     * @param to Transfer tokens to.\\n     * @param amount The token amount.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n     * Reverts on a failed transfer.\\n     * @param token The address of the ERC-20 token.\\n     * @param from Transfer tokens from.\\n     * @param to Transfer tokens to.\\n     * @param amount The token amount.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\",\"keccak256\":\"0x413926605152de55ab59259a7c23e2cd974bd316dbf777113f235f05dbc6e1bb\",\"license\":\"MIT\"},\"contracts/Utils/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"BoringMath: Div zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(type(uint128).max), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(type(uint64).max), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(type(uint32).max), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function to16(uint256 a) internal pure returns (uint16 c) {\\n        require(a <= uint16(type(uint16).max), \\\"BoringMath: uint16 Overflow\\\");\\n        c = uint16(a);\\n    }\\n\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath16 {\\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\",\"keccak256\":\"0x89df8679004bb5921d308b1339717c59cdb689cedbb673cdb2510fceece81b87\",\"license\":\"MIT\"},\"contracts/Utils/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract SafeTransfer {\\n\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to,_amount );\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n    \\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n    \\n    function _safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n    \\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        (bool success, bytes memory data) =\\n            token.call(\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        (bool success, bytes memory data) =\\n            token.call(\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: cannot transfer\\\");\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x06e753bab2eba23d922c4b950cce37d50c9d058cf9a36feabcd1efa21e46d3cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006200001e6200007f565b60018054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600160025562000083565b3390565b613d0e80620000936000396000f3fe6080604052600436106103c35760003560e01c806386433374116101f2578063c9fab0591161010d578063e0e081d7116100a0578063f08b82e61161006f578063f08b82e614610ac5578063f2fde38b14610ada578063f5b541a614610afa578063fc4e3e0a14610b0f576103c3565b8063e0e081d714610a4c578063e6594abd14610a70578063e8fcf72314610a90578063f04899d314610ab0576103c3565b8063d547741f116100dc578063d547741f146109cc578063d69d3e62146109ec578063dc97e08214610a0c578063dccfe31014610a2c576103c3565b8063c9fab05914610956578063ca15c87314610976578063d2423b5114610996578063d5391393146109b7576103c3565b80639a87222c11610185578063b7928b1d11610154578063b7928b1d146108d6578063c2507ac1146108f6578063c395fcb314610916578063c884ef8314610936576103c3565b80639a87222c1461086c578063a217fddf1461088c578063adbf3776146108a1578063b3f05b97146108c1576103c3565b80639010d07c116101c15780639010d07c146107f757806391d14854146108175780639478941c1461083757806399fdb32014610857576103c3565b806386433374146107985780638a845fc0146107ad5780638d8f2adb146107cd5780638da5cb5b146107e2576103c3565b806347535d7b116102e25780636595171c116102755780637c516e94116102445780637c516e941461072e5780637ff9b5961461074e57806381353c8e14610763578063857d260814610783576103c3565b80636595171c146106b95780636ae260c1146106d9578063715018a6146106f957806373973fcb1461070e576103c3565b80634dc80e15116102b15780634dc80e15146106515780634ddf47d414610671578063521eb2731461068457806354f1e12614610699576103c3565b806347535d7b146105e757806349df728c146105fc5780634b3e6abb1461061c5780634bb278f31461063c576103c3565b806324e4025b1161035a57806336d0054b1161032957806336d0054b1461056d5780633d15cc6d146105825780633f16431a146105a457806345a15388146105c4576103c3565b806324e4025b146104e85780632f2ff15d14610508578063314148e21461052857806336568abe1461054d576103c3565b80631702645511610396578063170264551461046f5780631b3e460e14610484578063212f8a81146104a6578063248a9ca3146104c8576103c3565b8063031bee00146103c8578063099db017146103f55780630cc4c03314610422578063113b0ab21461044f575b600080fd5b3480156103d457600080fd5b506103dd610b2f565b6040516103ec939291906139e3565b60405180910390f35b34801561040157600080fd5b50610415610410366004612f31565b610b44565b6040516103ec91906135bd565b34801561042e57600080fd5b5061044261043d36600461300a565b610b66565b6040516103ec91906135d1565b34801561045b57600080fd5b5061041561046a366004612f31565b610bad565b34801561047b57600080fd5b50610415610bc7565b34801561049057600080fd5b50610499610be2565b6040516103ec91906135c8565b3480156104b257600080fd5b506104c66104c136600461302b565b610be7565b005b3480156104d457600080fd5b506104996104e3366004613119565b610cb9565b3480156104f457600080fd5b506104c6610503366004613160565b610cce565b34801561051457600080fd5b506104c6610523366004613131565b610db4565b34801561053457600080fd5b5061053d610dfc565b6040516103ec94939291906134fe565b34801561055957600080fd5b506104c6610568366004613131565b610e25565b34801561057957600080fd5b50610415610e67565b34801561058e57600080fd5b50610597610e86565b6040516103ec91906133c3565b3480156105b057600080fd5b506104c66105bf366004612f31565b610e95565b3480156105d057600080fd5b506105d9610ef7565b6040516103ec9291906139bb565b3480156105f357600080fd5b50610415610f11565b34801561060857600080fd5b506104c6610617366004612f31565b610f2d565b34801561062857600080fd5b506104c66106373660046130e1565b611356565b34801561064857600080fd5b506104c6611388565b34801561065d57600080fd5b5061049961066c366004612f31565b611530565b6104c661067f366004613181565b610df8565b34801561069057600080fd5b50610597611615565b3480156106a557600080fd5b506104c66106b4366004612f31565b611624565b3480156106c557600080fd5b506104c66106d4366004612f31565b611686565b3480156106e557600080fd5b506104c66106f4366004613160565b6116db565b34801561070557600080fd5b506104c661179c565b34801561071a57600080fd5b50610499610729366004613119565b61182b565b34801561073a57600080fd5b506104c66107493660046131ee565b6118a1565b34801561075a57600080fd5b50610499611915565b34801561076f57600080fd5b506104c661077e366004613181565b611924565b34801561078f57600080fd5b50610499611974565b3480156107a457600080fd5b50610415611986565b3480156107b957600080fd5b506104c66107c8366004612f31565b6119c2565b3480156107d957600080fd5b506104c6611a24565b3480156107ee57600080fd5b50610597611a31565b34801561080357600080fd5b50610597610812366004613160565b611a45565b34801561082357600080fd5b50610415610832366004613131565b611a66565b34801561084357600080fd5b506104c6610852366004612f31565b611a7e565b34801561086357600080fd5b50610597611ae0565b34801561087857600080fd5b506104c6610887366004612f31565b611aef565b34801561089857600080fd5b50610499611bab565b3480156108ad57600080fd5b506104c66108bc366004612f31565b611bb0565b3480156108cd57600080fd5b50610415611c12565b3480156108e257600080fd5b506104c66108f1366004612f31565b611c22565b34801561090257600080fd5b50610499610911366004613119565b611c84565b34801561092257600080fd5b50610415610931366004612f31565b611c8f565b34801561094257600080fd5b50610499610951366004612f31565b611c9b565b34801561096257600080fd5b506104c661097136600461300a565b611cad565b34801561098257600080fd5b50610499610991366004613119565b611f3f565b6109a96109a436600461306c565b611f56565b6040516103ec929190613526565b3480156109c357600080fd5b5061049961214c565b3480156109d857600080fd5b506104c66109e7366004613131565b61215e565b3480156109f857600080fd5b506104c6610a07366004612f31565b612198565b348015610a1857600080fd5b506104c6610a2736600461332b565b6121b8565b348015610a3857600080fd5b506104c6610a47366004612f31565b6121ca565b348015610a5857600080fd5b50610a6161221f565b6040516103ec93929190613998565b348015610a7c57600080fd5b506104c6610a8b366004612f31565b612244565b348015610a9c57600080fd5b50610499610aab366004612f31565b6122a7565b348015610abc57600080fd5b506105976122b9565b348015610ad157600080fd5b506104996122c8565b348015610ae657600080fd5b506104c6610af5366004612f31565b6122d7565b348015610b0657600080fd5b506104996123a3565b348015610b1b57600080fd5b50610415610b2a366004612f31565b6123b5565b6004546005546006546001600160801b031683565b6000610b5e600080516020613cb983398151915283611a66565b90505b919050565b60608b8b8b8b8b8b8b8b8b8b8b604051602001610b8d9b9a999897969594939291906133f1565b60405160208183030381529060405290509b9a5050505050505050505050565b6000610b5e600080516020613c7983398151915283611a66565b6005546000904290610bdc9062093a80613a4e565b10905090565b600181565b600280541415610c125760405162461bcd60e51b8152600401610c0990613876565b60405180910390fd5b6002805581610c1f6123cf565b11158015610c345750610c30612477565b8211155b610c3d57600080fd5b80610c4757600080fd5b6000610c528361182b565b90508015610cae57600a54610c78906001600160a01b0316610c72612519565b8361251d565b610c82848261260c565b600754610c97906001600160801b0316612798565b6006546001600160801b03161415610cae57426005555b505060016002555050565b60009081526020819052604090206002015490565b610cd9610931612519565b610ce257600080fd5b60008111610cef57600080fd5b60008211610cfc57600080fd5b6007546001600160801b031615610d1257600080fd5b610d1b826127c3565b600380546001600160801b0319166001600160801b0392909216919091179055610d44816127c3565b600380546001600160801b03928316600160801b0290831617905560065416610d6c82612798565b1115610d7757600080fd5b7f622a57040c34e45abc5fadeb22e4c3c687cf48a096c86694cd21a7be9e7851ee8282604051610da89291906139d5565b60405180910390a15050565b600082815260208190526040902060020154610dd290610832612519565b610dee5760405162461bcd60e51b8152600401610c0990613682565b610df882826127f0565b5050565b6008546004546005546007546001600160a01b039093169260ff600160801b9091041690919293565b610e2d612519565b6001600160a01b0316816001600160a01b031614610e5d5760405162461bcd60e51b8152600401610c099061391b565b610df88282612859565b6003546007546001600160801b03600160801b90920482169116101590565b600a546001600160a01b031681565b610ead600080516020613c7983398151915282610db4565b610eb5612519565b6001600160a01b0316816001600160a01b03167f1d5f9ec24c6f91be922ea13ceaad919ad6554a41b5c26087f96289a9baf98ad260405160405180910390a350565b6003546001600160801b0380821691600160801b90041682565b6004546000904210801590610f2857506005544211155b905090565b600280541415610f4f5760405162461bcd60e51b8152600401610c0990613876565b60028055610f5b610e67565b1561130f57600754600160801b900460ff16610f7657600080fd5b6000610f8182611530565b905060008111610f9057600080fd5b6001600160a01b0382166000908152600d6020526040902054610fb390826128c2565b6001600160a01b038084166000908152600d6020908152604080832094909455600c90529182209190915560085461100291739b1110e54430e279d740072199583845e989d30a9116836128f0565b600061100f8260046129fd565b9050600061101e8360046129fd565b9050600061102d8460046129fd565b9050600061103c8560046129fd565b600854600554919250739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b0316903090889061107b9061012c613a4e565b8b6040518663ffffffff1660e01b815260040161109c959493929190613474565b602060405180830381600087803b1580156110b657600080fd5b505af11580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190613313565b50600854600554739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b03909116903090879061112d90610258613a4e565b8b6040518663ffffffff1660e01b815260040161114e959493929190613474565b602060405180830381600087803b15801561116857600080fd5b505af115801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190613313565b50600854600554739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b0390911690309086906111df90610384613a4e565b8b6040518663ffffffff1660e01b8152600401611200959493929190613474565b602060405180830381600087803b15801561121a57600080fd5b505af115801561122e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112529190613313565b50600854600554739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b039091169030908590611291906104b0613a4e565b8b6040518663ffffffff1660e01b81526004016112b2959493929190613474565b602060405180830381600087803b1580156112cc57600080fd5b505af11580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113049190613313565b50505050505061134e565b600554421161131d57600080fd5b6001600160a01b038082166000908152600c602052604081208054919055600a54909161134c91168383612a28565b505b506001600255565b611361610931612519565b61136a57600080fd5b60078054911515600160881b0260ff60881b19909216919091179055565b6002805414156113aa5760405162461bcd60e51b8152600401610c0990613876565b600280556113b9610931612519565b806113d957506113c7612519565b6009546001600160a01b039081169116145b806113ea57506113ea61046a612519565b806113f857506113f8610bc7565b61140157600080fd5b60078054600160801b900460ff161561141957600080fd5b6004611423611986565b61142c57600080fd5b611434610e67565b156114c257600a546009548354611461926001600160a01b039081169216906001600160801b0316612a28565b8154600090611478906001600160801b0316612798565b6002830154909150600090611496906001600160801b031683612a67565b905080156114bb576008546009546114bb916001600160a01b03908116911683612a28565b50506114ed565b60085460095460028301546114ed926001600160a01b039081169216906001600160801b0316612a28565b815460ff60801b1916600160801b1782556040517f32bebcfd2d04dbae321298091d96d2cb1d07279f59718cd83bd98245b8b82b5a90600090a150506001600255565b6008546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906115659030906004016133c3565b60206040518083038186803b15801561157d57600080fd5b505afa158015611591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b59190613313565b6001600160a01b0384166000908152600c60205260409020549091506115da90612798565b6001600160a01b0384166000908152600d6020526040902054909250611601908390612a67565b91508082111561160f578091505b50919050565b6009546001600160a01b031681565b61163c600080516020613cb98339815191528261215e565b611644612519565b6001600160a01b0316816001600160a01b03167f56692a161ffec953ddf9def93b958ea8d1ec95e21b80870c66be91a4374dc4e360405160405180910390a350565b611691600082610db4565b611699612519565b6001600160a01b0316816001600160a01b03167f2570ac42fd8b322dc453ada624dc2ed0e9bdd67f16f201a25bbd30468f2aa18760405160405180910390a350565b6116e6610931612519565b6116ef57600080fd5b6402540be400821061170057600080fd5b6402540be400811061171157600080fd5b4282101561171e57600080fd5b81811161172a57600080fd5b6007546001600160801b03161561174057600080fd5b611749826127c3565b6001600160801b031660045561175e816127c3565b6001600160801b03166005556040517f5725d1e4352d6944889e54837ffaefde55cdc0b55796b831365d61cd4c87fdb890610da890849084906139d5565b6117a4612519565b6001600160a01b03166117b5611a31565b6001600160a01b0316146117db5760405162461bcd60e51b8152600401610c09906137fe565b60015460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360018054610100600160a81b0319169055565b60008061183783612798565b600754909150600090611852906001600160801b0316612798565b6006549091506001600160801b031661186b82846128c2565b1115611899576006546118909061188b906001600160801b031683612a67565b612a95565b92505050610b61565b509192915050565b60405163d505accf60e01b81526001600160a01b0389169063d505accf906118d9908a908a908a908a908a908a908a906004016134a4565b600060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b505050505050505050505050565b6003546001600160801b031690565b60008080808080808080808061193c8c8e018e612f54565b9a509a509a509a509a509a509a509a509a509a509a506119658b8b8b8b8b8b8b8b8b8b8b611cad565b50505050505050505050505050565b600080516020613c7983398151915281565b600554600090421180610f2857506006546007546001600160801b03918216916119bb916119b691166001613a4e565b612798565b1015905090565b6119da600080516020613c798339815191528261215e565b6119e2612519565b6001600160a01b0316816001600160a01b03167fe5f1aa9e528307345194b88b24a32401c13926e0823060f1049d9b26c0bb62b260405160405180910390a350565b611a2f610617612519565b565b60015461010090046001600160a01b031690565b6000828152602081905260408120611a5d9083612abd565b90505b92915050565b6000828152602081905260408120611a5d9083612ac9565b611a96600080516020613c998339815191528261215e565b611a9e612519565b6001600160a01b0316816001600160a01b03167f70b25138b6fadeb9992d18b9653564271823e34b3e3257515d12a6d4b15fcddf60405160405180910390a350565b6008546001600160a01b031681565b611af7612519565b6001600160a01b0316611b08611a31565b6001600160a01b031614611b2e5760405162461bcd60e51b8152600401610c09906137fe565b611b39610931612519565b611b4257600080fd5b6001600160a01b038116611b5557600080fd5b600980546001600160a01b0319166001600160a01b0383161790556040517f34ae2bad9265f0212d4cf341708b8250949164bb54f9d0e4f442024f83bb2f9090611ba09083906133c3565b60405180910390a150565b600081565b611bc8600080516020613cb983398151915282610db4565b611bd0612519565b6001600160a01b0316816001600160a01b03167f0be6ab9784c7401fafb73f7bc47bc67cc4ef8c47a60ad3cb66d1de0353a0784c60405160405180910390a350565b600754600160801b900460ff1690565b611c3a600080516020613c9983398151915282610db4565b611c42612519565b6001600160a01b0316816001600160a01b03167f2d45ee102874989882745a26688d0b4fffee125a18df26536b12582c7fde4e1760405160405180910390a350565b600061160f82612798565b6000610b5e8183611a66565b600d6020526000908152604090205481565b6402540be4008710611cbe57600080fd5b6402540be4008610611ccf57600080fd5b42871015611cdc57600080fd5b868611611ce857600080fd5b60008511611cf557600080fd5b6001600160a01b038116611d0857600080fd5b6001600160a01b038316611d1b57600080fd5b60008811611d2857600080fd5b60008411611d3557600080fd5b896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6e57600080fd5b505afa158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da6919061334f565b60ff16601214611db557600080fd5b6000896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611df057600080fd5b505afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e28919061334f565b60ff1611611e3557600080fd5b611e3e856127c3565b600380546001600160801b0319166001600160801b0392909216919091179055611e67846127c3565b600380546001600160801b03928316600160801b029216919091179055611e8d876127c3565b6001600160801b0316600455611ea2866127c3565b6001600160801b0316600555611eb7886127c3565b600680546001600160801b0319166001600160801b0392909216919091179055600880546001600160a01b03199081166001600160a01b038d811691909117909255600a805482168c841617905560098054909116918316919091179055611f1e83612244565b611f2782612ade565b611f328a8c8a61251d565b5050505050505050505050565b6000818152602081905260408120610b5e90612b20565b6060808367ffffffffffffffff811115611f8057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611fa9578160200160208202803683370190505b5091508367ffffffffffffffff811115611fd357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561200657816020015b6060815260200190600190039081611ff15790505b50905060005b84811015612143576000803088888581811061203857634e487b7160e01b600052603260045260246000fd5b905060200281019061204a9190613a02565b604051612058929190613397565b600060405180830381855af49150503d8060008114612093576040519150601f19603f3d011682016040523d82523d6000602084013e612098565b606091505b509150915081806120a7575085155b6120b082612b2b565b906120ce5760405162461bcd60e51b8152600401610c0991906135d1565b50818584815181106120f057634e487b7160e01b600052603260045260246000fd5b6020026020010190151590811515815250508084848151811061212357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061213b90613bff565b91505061200c565b50935093915050565b600080516020613cb983398151915281565b60008281526020819052604090206002015461217c90610832612519565b610e5d5760405162461bcd60e51b8152600401610c099061374e565b6121a3610931612519565b6121ac57600080fd5b6121b581612ade565b50565b610df86121c3612519565b8383610be7565b6121d560008261215e565b6121dd612519565b6001600160a01b0316816001600160a01b03167f21ba1239795d4e22874e3dc55f0a9d7b65bfb23069d32965d7c23be9524ccf9560405160405180910390a350565b6007546001600160801b0381169060ff600160801b8204811691600160881b90041683565b60015460ff16156122675760405162461bcd60e51b8152600401610c0990613613565b6001600160a01b03811661228d5760405162461bcd60e51b8152600401610c09906137d5565b612298600082610dee565b506001805460ff191681179055565b600c6020526000908152604090205481565b600b546001600160a01b031681565b6006546001600160801b031690565b6122df612519565b6001600160a01b03166122f0611a31565b6001600160a01b0316146123165760405162461bcd60e51b8152600401610c09906137fe565b6001600160a01b03811661233c5760405162461bcd60e51b8152600401610c09906136d1565b6001546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600080516020613c9983398151915281565b6000610b5e600080516020613c9983398151915283611a66565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561242057600080fd5b505afa158015612434573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612458919061334f565b905061246581600a613acc565b612471906103e7613b9d565b91505090565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612500919061334f565b905061250d81600a613acc565b6124719061270f613b9d565b3390565b600080846001600160a01b03166323b872dd85308660405160240161254493929190613450565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161257d91906133a7565b6000604051808303816000865af19150503d80600081146125ba576040519150601f19603f3d011682016040523d82523d6000602084013e6125bf565b606091505b50915091508180156125e95750805115806125e95750808060200190518101906125e991906130fd565b6126055760405162461bcd60e51b8152600401610c09906138e4565b5050505050565b600454421080159061262057506005544211155b61262957600080fd5b6001600160a01b03821661263c57600080fd5b6001600160a01b0382166000908152600c602052604081205461265f90836128c2565b600754909150600160881b900460ff16156126ff57600b54604051631cd53d5560e01b81526001600160a01b0390911690631cd53d55906126a690869085906004016134e5565b60206040518083038186803b1580156126be57600080fd5b505afa1580156126d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f691906130fd565b6126ff57600080fd5b6001600160a01b0383166000908152600c6020526040902081905560075461273990612734906001600160801b0316846128c2565b6127c3565b600780546001600160801b0319166001600160801b03929092169190911790556040517f077511a636ba1f10551cc7b89c13ff66a6ac9344e8a917527817a9690b15af7a9061278b90859085906134e5565b60405180910390a1505050565b600354600090610b5e906001600160801b03166127bd84670de0b6b3a7640000612b8b565b906129fd565b60006001600160801b038211156127ec5760405162461bcd60e51b8152600401610c0990613717565b5090565b60008281526020819052604090206128089082612bcb565b15610df857612815612519565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206128719082612be0565b15610df85761287e612519565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000816128cf8185613a4e565b9150811015611a605760405162461bcd60e51b8152600401610c099061379e565b604051636eb1769f60e11b815281906001600160a01b0384169063dd62ed3e9061292090309088906004016133d7565b60206040518083038186803b15801561293857600080fd5b505afa15801561294c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129709190613313565b10156129f85760405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906129a490869085906004016134e5565b602060405180830381600087803b1580156129be57600080fd5b505af11580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f691906130fd565b505b505050565b6000808211612a1e5760405162461bcd60e51b8152600401610c099061396a565b611a5d8284613a66565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612a5c57612a578282612bf5565b6129f8565b6129f8838383612c82565b600082612a748382613bbc565b9150811115611a605760405162461bcd60e51b8152600401610c09906135e4565b600354600090610b5e90670de0b6b3a7640000906127bd9085906001600160801b0316612b8b565b6000611a5d8383612d55565b6000611a5d836001600160a01b038416612dae565b6001600160a01b038116156121b557600b80546001600160a01b0383166001600160a01b03199091161790556007805460ff60881b1916600160881b17905550565b6000610b5e82612dc6565b6060604482511015612b71575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610b61565b60048201915081806020019051810190610b5e9190613270565b6000811580612baf57508282612ba18183613b9d565b9250612bad9083613a66565b145b611a605760405162461bcd60e51b8152600401610c09906138ad565b6000611a5d836001600160a01b038416612dca565b6000611a5d836001600160a01b038416612e14565b604080516000808252602082019092526001600160a01b038416908390604051612c1f91906133a7565b60006040518083038185875af1925050503d8060008114612c5c576040519150601f19603f3d011682016040523d82523d6000602084013e612c61565b606091505b50509050806129f85760405162461bcd60e51b8152600401610c0990613833565b600080846001600160a01b031663a9059cbb8585604051602401612ca79291906134e5565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612ce091906133a7565b6000604051808303816000865af19150503d8060008114612d1d576040519150601f19603f3d011682016040523d82523d6000602084013e612d22565b606091505b5091509150818015612d4c575080511580612d4c575080806020019051810190612d4c91906130fd565b61260557600080fd5b81546000908210612d785760405162461bcd60e51b8152600401610c0990613640565b826000018281548110612d9b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000612dd68383612dae565b612e0c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611a60565b506000611a60565b60008181526001830160205260408120548015612f27576000612e38600183613bbc565b8554909150600090612e4c90600190613bbc565b90506000866000018281548110612e7357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612ea457634e487b7160e01b600052603260045260246000fd5b600091825260209091200155612ebb836001613a4e565b60008281526001890160205260409020558654879080612eeb57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611a60565b6000915050611a60565b600060208284031215612f42578081fd5b8135612f4d81613c46565b9392505050565b60008060008060008060008060008060006101608c8e031215612f75578687fd5b8b35612f8081613c46565b9a5060208c0135612f9081613c46565b995060408c0135612fa081613c46565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506101008c0135612fd481613c46565b92506101208c0135612fe581613c46565b91506101408c0135612ff681613c46565b809150509295989b509295989b9093969950565b60008060008060008060008060008060006101608c8e031215612f75578081fd5b60008060006060848603121561303f578283fd5b833561304a81613c46565b925060208401359150604084013561306181613c5b565b809150509250925092565b600080600060408486031215613080578283fd5b833567ffffffffffffffff80821115613097578485fd5b818601915086601f8301126130aa578485fd5b8135818111156130b8578586fd5b87602080830285010111156130cb578586fd5b6020928301955093505084013561306181613c5b565b6000602082840312156130f2578081fd5b8135612f4d81613c5b565b60006020828403121561310e578081fd5b8151612f4d81613c5b565b60006020828403121561312a578081fd5b5035919050565b60008060408385031215613143578182fd5b82359150602083013561315581613c46565b809150509250929050565b60008060408385031215613172578182fd5b50508035926020909101359150565b60008060208385031215613193578182fd5b823567ffffffffffffffff808211156131aa578384fd5b818501915085601f8301126131bd578384fd5b8135818111156131cb578485fd5b8660208285010111156131dc578485fd5b60209290920196919550909350505050565b600080600080600080600080610100898b03121561320a578182fd5b883561321581613c46565b9750602089013561322581613c46565b9650604089013561323581613c46565b9550606089013594506080890135935060a089013561325381613c69565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215613281578081fd5b815167ffffffffffffffff80821115613298578283fd5b818401915084601f8301126132ab578283fd5b8151818111156132bd576132bd613c30565b604051601f8201601f1916810160200183811182821017156132e1576132e1613c30565b6040528181528382016020018710156132f8578485fd5b613309826020830160208701613bd3565b9695505050505050565b600060208284031215613324578081fd5b5051919050565b6000806040838503121561333d578182fd5b82359150602083013561315581613c5b565b600060208284031215613360578081fd5b8151612f4d81613c69565b60008151808452613383816020860160208601613bd3565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b600082516133b9818460208701613bd3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039b8c168152998b1660208b0152978a1660408a01526060890196909652608088019490945260a087019290925260c086015260e0850152841661010084015283166101208301529091166101408201526101600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b604080825283519082018190526000906020906060840190828701845b82811015613561578151151584529284019290840190600101613543565b5050508381038285015284518082528282019080840283018401878501865b838110156135ae57601f1986840301855261359c83835161336b565b94870194925090860190600101613580565b50909998505050505050505050565b901515815260200190565b90815260200190565b600060208252611a5d602083018461336b565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5cd959606a1b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b6020808252600f908201526e125b98dbdc9c9958dd081a5b9c1d5d608a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252601f908201527f5472616e7366657248656c7065723a2063616e6e6f74207472616e7366657200604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b602080825260149082015273426f72696e674d6174683a20446976207a65726f60601b604082015260600190565b6001600160801b0393909316835290151560208301521515604082015260600190565b6001600160801b0392831681529116602082015260400190565b918252602082015260400190565b92835260208301919091526001600160801b0316604082015260600190565b6000808335601e19843603018112613a18578283fd5b83018035915067ffffffffffffffff821115613a32578283fd5b602001915036819003821315613a4757600080fd5b9250929050565b60008219821115613a6157613a61613c1a565b500190565b600082613a8157634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613a985750613ac3565b818704821115613aaa57613aaa613c1a565b80861615613ab757918102915b9490941c938002613a89565b94509492505050565b6000611a5d60001960ff851684600082613ae857506001612f4d565b81613af557506000612f4d565b8160018114613b0b5760028114613b1557613b42565b6001915050612f4d565b60ff841115613b2657613b26613c1a565b6001841b915084821115613b3c57613b3c613c1a565b50612f4d565b5060208310610133831016604e8410600b8410161715613b75575081810a83811115613b7057613b70613c1a565b612f4d565b613b828484846001613a86565b808604821115613b9457613b94613c1a565b02949350505050565b6000816000190483118215151615613bb757613bb7613c1a565b500290565b600082821015613bce57613bce613c1a565b500390565b60005b83811015613bee578181015183820152602001613bd6565b838111156129f65750506000910152565b6000600019821415613c1357613c13613c1a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146121b557600080fd5b80151581146121b557600080fd5b60ff811681146121b557600080fdfe9d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873bfd97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212205f36d273a696bc356f0623e9ee711ee101933d07928630b6e527e82df2e0a76664736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106103c35760003560e01c806386433374116101f2578063c9fab0591161010d578063e0e081d7116100a0578063f08b82e61161006f578063f08b82e614610ac5578063f2fde38b14610ada578063f5b541a614610afa578063fc4e3e0a14610b0f576103c3565b8063e0e081d714610a4c578063e6594abd14610a70578063e8fcf72314610a90578063f04899d314610ab0576103c3565b8063d547741f116100dc578063d547741f146109cc578063d69d3e62146109ec578063dc97e08214610a0c578063dccfe31014610a2c576103c3565b8063c9fab05914610956578063ca15c87314610976578063d2423b5114610996578063d5391393146109b7576103c3565b80639a87222c11610185578063b7928b1d11610154578063b7928b1d146108d6578063c2507ac1146108f6578063c395fcb314610916578063c884ef8314610936576103c3565b80639a87222c1461086c578063a217fddf1461088c578063adbf3776146108a1578063b3f05b97146108c1576103c3565b80639010d07c116101c15780639010d07c146107f757806391d14854146108175780639478941c1461083757806399fdb32014610857576103c3565b806386433374146107985780638a845fc0146107ad5780638d8f2adb146107cd5780638da5cb5b146107e2576103c3565b806347535d7b116102e25780636595171c116102755780637c516e94116102445780637c516e941461072e5780637ff9b5961461074e57806381353c8e14610763578063857d260814610783576103c3565b80636595171c146106b95780636ae260c1146106d9578063715018a6146106f957806373973fcb1461070e576103c3565b80634dc80e15116102b15780634dc80e15146106515780634ddf47d414610671578063521eb2731461068457806354f1e12614610699576103c3565b806347535d7b146105e757806349df728c146105fc5780634b3e6abb1461061c5780634bb278f31461063c576103c3565b806324e4025b1161035a57806336d0054b1161032957806336d0054b1461056d5780633d15cc6d146105825780633f16431a146105a457806345a15388146105c4576103c3565b806324e4025b146104e85780632f2ff15d14610508578063314148e21461052857806336568abe1461054d576103c3565b80631702645511610396578063170264551461046f5780631b3e460e14610484578063212f8a81146104a6578063248a9ca3146104c8576103c3565b8063031bee00146103c8578063099db017146103f55780630cc4c03314610422578063113b0ab21461044f575b600080fd5b3480156103d457600080fd5b506103dd610b2f565b6040516103ec939291906139e3565b60405180910390f35b34801561040157600080fd5b50610415610410366004612f31565b610b44565b6040516103ec91906135bd565b34801561042e57600080fd5b5061044261043d36600461300a565b610b66565b6040516103ec91906135d1565b34801561045b57600080fd5b5061041561046a366004612f31565b610bad565b34801561047b57600080fd5b50610415610bc7565b34801561049057600080fd5b50610499610be2565b6040516103ec91906135c8565b3480156104b257600080fd5b506104c66104c136600461302b565b610be7565b005b3480156104d457600080fd5b506104996104e3366004613119565b610cb9565b3480156104f457600080fd5b506104c6610503366004613160565b610cce565b34801561051457600080fd5b506104c6610523366004613131565b610db4565b34801561053457600080fd5b5061053d610dfc565b6040516103ec94939291906134fe565b34801561055957600080fd5b506104c6610568366004613131565b610e25565b34801561057957600080fd5b50610415610e67565b34801561058e57600080fd5b50610597610e86565b6040516103ec91906133c3565b3480156105b057600080fd5b506104c66105bf366004612f31565b610e95565b3480156105d057600080fd5b506105d9610ef7565b6040516103ec9291906139bb565b3480156105f357600080fd5b50610415610f11565b34801561060857600080fd5b506104c6610617366004612f31565b610f2d565b34801561062857600080fd5b506104c66106373660046130e1565b611356565b34801561064857600080fd5b506104c6611388565b34801561065d57600080fd5b5061049961066c366004612f31565b611530565b6104c661067f366004613181565b610df8565b34801561069057600080fd5b50610597611615565b3480156106a557600080fd5b506104c66106b4366004612f31565b611624565b3480156106c557600080fd5b506104c66106d4366004612f31565b611686565b3480156106e557600080fd5b506104c66106f4366004613160565b6116db565b34801561070557600080fd5b506104c661179c565b34801561071a57600080fd5b50610499610729366004613119565b61182b565b34801561073a57600080fd5b506104c66107493660046131ee565b6118a1565b34801561075a57600080fd5b50610499611915565b34801561076f57600080fd5b506104c661077e366004613181565b611924565b34801561078f57600080fd5b50610499611974565b3480156107a457600080fd5b50610415611986565b3480156107b957600080fd5b506104c66107c8366004612f31565b6119c2565b3480156107d957600080fd5b506104c6611a24565b3480156107ee57600080fd5b50610597611a31565b34801561080357600080fd5b50610597610812366004613160565b611a45565b34801561082357600080fd5b50610415610832366004613131565b611a66565b34801561084357600080fd5b506104c6610852366004612f31565b611a7e565b34801561086357600080fd5b50610597611ae0565b34801561087857600080fd5b506104c6610887366004612f31565b611aef565b34801561089857600080fd5b50610499611bab565b3480156108ad57600080fd5b506104c66108bc366004612f31565b611bb0565b3480156108cd57600080fd5b50610415611c12565b3480156108e257600080fd5b506104c66108f1366004612f31565b611c22565b34801561090257600080fd5b50610499610911366004613119565b611c84565b34801561092257600080fd5b50610415610931366004612f31565b611c8f565b34801561094257600080fd5b50610499610951366004612f31565b611c9b565b34801561096257600080fd5b506104c661097136600461300a565b611cad565b34801561098257600080fd5b50610499610991366004613119565b611f3f565b6109a96109a436600461306c565b611f56565b6040516103ec929190613526565b3480156109c357600080fd5b5061049961214c565b3480156109d857600080fd5b506104c66109e7366004613131565b61215e565b3480156109f857600080fd5b506104c6610a07366004612f31565b612198565b348015610a1857600080fd5b506104c6610a2736600461332b565b6121b8565b348015610a3857600080fd5b506104c6610a47366004612f31565b6121ca565b348015610a5857600080fd5b50610a6161221f565b6040516103ec93929190613998565b348015610a7c57600080fd5b506104c6610a8b366004612f31565b612244565b348015610a9c57600080fd5b50610499610aab366004612f31565b6122a7565b348015610abc57600080fd5b506105976122b9565b348015610ad157600080fd5b506104996122c8565b348015610ae657600080fd5b506104c6610af5366004612f31565b6122d7565b348015610b0657600080fd5b506104996123a3565b348015610b1b57600080fd5b50610415610b2a366004612f31565b6123b5565b6004546005546006546001600160801b031683565b6000610b5e600080516020613cb983398151915283611a66565b90505b919050565b60608b8b8b8b8b8b8b8b8b8b8b604051602001610b8d9b9a999897969594939291906133f1565b60405160208183030381529060405290509b9a5050505050505050505050565b6000610b5e600080516020613c7983398151915283611a66565b6005546000904290610bdc9062093a80613a4e565b10905090565b600181565b600280541415610c125760405162461bcd60e51b8152600401610c0990613876565b60405180910390fd5b6002805581610c1f6123cf565b11158015610c345750610c30612477565b8211155b610c3d57600080fd5b80610c4757600080fd5b6000610c528361182b565b90508015610cae57600a54610c78906001600160a01b0316610c72612519565b8361251d565b610c82848261260c565b600754610c97906001600160801b0316612798565b6006546001600160801b03161415610cae57426005555b505060016002555050565b60009081526020819052604090206002015490565b610cd9610931612519565b610ce257600080fd5b60008111610cef57600080fd5b60008211610cfc57600080fd5b6007546001600160801b031615610d1257600080fd5b610d1b826127c3565b600380546001600160801b0319166001600160801b0392909216919091179055610d44816127c3565b600380546001600160801b03928316600160801b0290831617905560065416610d6c82612798565b1115610d7757600080fd5b7f622a57040c34e45abc5fadeb22e4c3c687cf48a096c86694cd21a7be9e7851ee8282604051610da89291906139d5565b60405180910390a15050565b600082815260208190526040902060020154610dd290610832612519565b610dee5760405162461bcd60e51b8152600401610c0990613682565b610df882826127f0565b5050565b6008546004546005546007546001600160a01b039093169260ff600160801b9091041690919293565b610e2d612519565b6001600160a01b0316816001600160a01b031614610e5d5760405162461bcd60e51b8152600401610c099061391b565b610df88282612859565b6003546007546001600160801b03600160801b90920482169116101590565b600a546001600160a01b031681565b610ead600080516020613c7983398151915282610db4565b610eb5612519565b6001600160a01b0316816001600160a01b03167f1d5f9ec24c6f91be922ea13ceaad919ad6554a41b5c26087f96289a9baf98ad260405160405180910390a350565b6003546001600160801b0380821691600160801b90041682565b6004546000904210801590610f2857506005544211155b905090565b600280541415610f4f5760405162461bcd60e51b8152600401610c0990613876565b60028055610f5b610e67565b1561130f57600754600160801b900460ff16610f7657600080fd5b6000610f8182611530565b905060008111610f9057600080fd5b6001600160a01b0382166000908152600d6020526040902054610fb390826128c2565b6001600160a01b038084166000908152600d6020908152604080832094909455600c90529182209190915560085461100291739b1110e54430e279d740072199583845e989d30a9116836128f0565b600061100f8260046129fd565b9050600061101e8360046129fd565b9050600061102d8460046129fd565b9050600061103c8560046129fd565b600854600554919250739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b0316903090889061107b9061012c613a4e565b8b6040518663ffffffff1660e01b815260040161109c959493929190613474565b602060405180830381600087803b1580156110b657600080fd5b505af11580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190613313565b50600854600554739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b03909116903090879061112d90610258613a4e565b8b6040518663ffffffff1660e01b815260040161114e959493929190613474565b602060405180830381600087803b15801561116857600080fd5b505af115801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190613313565b50600854600554739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b0390911690309086906111df90610384613a4e565b8b6040518663ffffffff1660e01b8152600401611200959493929190613474565b602060405180830381600087803b15801561121a57600080fd5b505af115801561122e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112529190613313565b50600854600554739b1110e54430e279d740072199583845e989d30a916302ef846a916001600160a01b039091169030908590611291906104b0613a4e565b8b6040518663ffffffff1660e01b81526004016112b2959493929190613474565b602060405180830381600087803b1580156112cc57600080fd5b505af11580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113049190613313565b50505050505061134e565b600554421161131d57600080fd5b6001600160a01b038082166000908152600c602052604081208054919055600a54909161134c91168383612a28565b505b506001600255565b611361610931612519565b61136a57600080fd5b60078054911515600160881b0260ff60881b19909216919091179055565b6002805414156113aa5760405162461bcd60e51b8152600401610c0990613876565b600280556113b9610931612519565b806113d957506113c7612519565b6009546001600160a01b039081169116145b806113ea57506113ea61046a612519565b806113f857506113f8610bc7565b61140157600080fd5b60078054600160801b900460ff161561141957600080fd5b6004611423611986565b61142c57600080fd5b611434610e67565b156114c257600a546009548354611461926001600160a01b039081169216906001600160801b0316612a28565b8154600090611478906001600160801b0316612798565b6002830154909150600090611496906001600160801b031683612a67565b905080156114bb576008546009546114bb916001600160a01b03908116911683612a28565b50506114ed565b60085460095460028301546114ed926001600160a01b039081169216906001600160801b0316612a28565b815460ff60801b1916600160801b1782556040517f32bebcfd2d04dbae321298091d96d2cb1d07279f59718cd83bd98245b8b82b5a90600090a150506001600255565b6008546040516370a0823160e01b815260009182916001600160a01b03909116906370a08231906115659030906004016133c3565b60206040518083038186803b15801561157d57600080fd5b505afa158015611591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b59190613313565b6001600160a01b0384166000908152600c60205260409020549091506115da90612798565b6001600160a01b0384166000908152600d6020526040902054909250611601908390612a67565b91508082111561160f578091505b50919050565b6009546001600160a01b031681565b61163c600080516020613cb98339815191528261215e565b611644612519565b6001600160a01b0316816001600160a01b03167f56692a161ffec953ddf9def93b958ea8d1ec95e21b80870c66be91a4374dc4e360405160405180910390a350565b611691600082610db4565b611699612519565b6001600160a01b0316816001600160a01b03167f2570ac42fd8b322dc453ada624dc2ed0e9bdd67f16f201a25bbd30468f2aa18760405160405180910390a350565b6116e6610931612519565b6116ef57600080fd5b6402540be400821061170057600080fd5b6402540be400811061171157600080fd5b4282101561171e57600080fd5b81811161172a57600080fd5b6007546001600160801b03161561174057600080fd5b611749826127c3565b6001600160801b031660045561175e816127c3565b6001600160801b03166005556040517f5725d1e4352d6944889e54837ffaefde55cdc0b55796b831365d61cd4c87fdb890610da890849084906139d5565b6117a4612519565b6001600160a01b03166117b5611a31565b6001600160a01b0316146117db5760405162461bcd60e51b8152600401610c09906137fe565b60015460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360018054610100600160a81b0319169055565b60008061183783612798565b600754909150600090611852906001600160801b0316612798565b6006549091506001600160801b031661186b82846128c2565b1115611899576006546118909061188b906001600160801b031683612a67565b612a95565b92505050610b61565b509192915050565b60405163d505accf60e01b81526001600160a01b0389169063d505accf906118d9908a908a908a908a908a908a908a906004016134a4565b600060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b505050505050505050505050565b6003546001600160801b031690565b60008080808080808080808061193c8c8e018e612f54565b9a509a509a509a509a509a509a509a509a509a509a506119658b8b8b8b8b8b8b8b8b8b8b611cad565b50505050505050505050505050565b600080516020613c7983398151915281565b600554600090421180610f2857506006546007546001600160801b03918216916119bb916119b691166001613a4e565b612798565b1015905090565b6119da600080516020613c798339815191528261215e565b6119e2612519565b6001600160a01b0316816001600160a01b03167fe5f1aa9e528307345194b88b24a32401c13926e0823060f1049d9b26c0bb62b260405160405180910390a350565b611a2f610617612519565b565b60015461010090046001600160a01b031690565b6000828152602081905260408120611a5d9083612abd565b90505b92915050565b6000828152602081905260408120611a5d9083612ac9565b611a96600080516020613c998339815191528261215e565b611a9e612519565b6001600160a01b0316816001600160a01b03167f70b25138b6fadeb9992d18b9653564271823e34b3e3257515d12a6d4b15fcddf60405160405180910390a350565b6008546001600160a01b031681565b611af7612519565b6001600160a01b0316611b08611a31565b6001600160a01b031614611b2e5760405162461bcd60e51b8152600401610c09906137fe565b611b39610931612519565b611b4257600080fd5b6001600160a01b038116611b5557600080fd5b600980546001600160a01b0319166001600160a01b0383161790556040517f34ae2bad9265f0212d4cf341708b8250949164bb54f9d0e4f442024f83bb2f9090611ba09083906133c3565b60405180910390a150565b600081565b611bc8600080516020613cb983398151915282610db4565b611bd0612519565b6001600160a01b0316816001600160a01b03167f0be6ab9784c7401fafb73f7bc47bc67cc4ef8c47a60ad3cb66d1de0353a0784c60405160405180910390a350565b600754600160801b900460ff1690565b611c3a600080516020613c9983398151915282610db4565b611c42612519565b6001600160a01b0316816001600160a01b03167f2d45ee102874989882745a26688d0b4fffee125a18df26536b12582c7fde4e1760405160405180910390a350565b600061160f82612798565b6000610b5e8183611a66565b600d6020526000908152604090205481565b6402540be4008710611cbe57600080fd5b6402540be4008610611ccf57600080fd5b42871015611cdc57600080fd5b868611611ce857600080fd5b60008511611cf557600080fd5b6001600160a01b038116611d0857600080fd5b6001600160a01b038316611d1b57600080fd5b60008811611d2857600080fd5b60008411611d3557600080fd5b896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6e57600080fd5b505afa158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da6919061334f565b60ff16601214611db557600080fd5b6000896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611df057600080fd5b505afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e28919061334f565b60ff1611611e3557600080fd5b611e3e856127c3565b600380546001600160801b0319166001600160801b0392909216919091179055611e67846127c3565b600380546001600160801b03928316600160801b029216919091179055611e8d876127c3565b6001600160801b0316600455611ea2866127c3565b6001600160801b0316600555611eb7886127c3565b600680546001600160801b0319166001600160801b0392909216919091179055600880546001600160a01b03199081166001600160a01b038d811691909117909255600a805482168c841617905560098054909116918316919091179055611f1e83612244565b611f2782612ade565b611f328a8c8a61251d565b5050505050505050505050565b6000818152602081905260408120610b5e90612b20565b6060808367ffffffffffffffff811115611f8057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611fa9578160200160208202803683370190505b5091508367ffffffffffffffff811115611fd357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561200657816020015b6060815260200190600190039081611ff15790505b50905060005b84811015612143576000803088888581811061203857634e487b7160e01b600052603260045260246000fd5b905060200281019061204a9190613a02565b604051612058929190613397565b600060405180830381855af49150503d8060008114612093576040519150601f19603f3d011682016040523d82523d6000602084013e612098565b606091505b509150915081806120a7575085155b6120b082612b2b565b906120ce5760405162461bcd60e51b8152600401610c0991906135d1565b50818584815181106120f057634e487b7160e01b600052603260045260246000fd5b6020026020010190151590811515815250508084848151811061212357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061213b90613bff565b91505061200c565b50935093915050565b600080516020613cb983398151915281565b60008281526020819052604090206002015461217c90610832612519565b610e5d5760405162461bcd60e51b8152600401610c099061374e565b6121a3610931612519565b6121ac57600080fd5b6121b581612ade565b50565b610df86121c3612519565b8383610be7565b6121d560008261215e565b6121dd612519565b6001600160a01b0316816001600160a01b03167f21ba1239795d4e22874e3dc55f0a9d7b65bfb23069d32965d7c23be9524ccf9560405160405180910390a350565b6007546001600160801b0381169060ff600160801b8204811691600160881b90041683565b60015460ff16156122675760405162461bcd60e51b8152600401610c0990613613565b6001600160a01b03811661228d5760405162461bcd60e51b8152600401610c09906137d5565b612298600082610dee565b506001805460ff191681179055565b600c6020526000908152604090205481565b600b546001600160a01b031681565b6006546001600160801b031690565b6122df612519565b6001600160a01b03166122f0611a31565b6001600160a01b0316146123165760405162461bcd60e51b8152600401610c09906137fe565b6001600160a01b03811661233c5760405162461bcd60e51b8152600401610c09906136d1565b6001546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600080516020613c9983398151915281565b6000610b5e600080516020613c9983398151915283611a66565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561242057600080fd5b505afa158015612434573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612458919061334f565b905061246581600a613acc565b612471906103e7613b9d565b91505090565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612500919061334f565b905061250d81600a613acc565b6124719061270f613b9d565b3390565b600080846001600160a01b03166323b872dd85308660405160240161254493929190613450565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161257d91906133a7565b6000604051808303816000865af19150503d80600081146125ba576040519150601f19603f3d011682016040523d82523d6000602084013e6125bf565b606091505b50915091508180156125e95750805115806125e95750808060200190518101906125e991906130fd565b6126055760405162461bcd60e51b8152600401610c09906138e4565b5050505050565b600454421080159061262057506005544211155b61262957600080fd5b6001600160a01b03821661263c57600080fd5b6001600160a01b0382166000908152600c602052604081205461265f90836128c2565b600754909150600160881b900460ff16156126ff57600b54604051631cd53d5560e01b81526001600160a01b0390911690631cd53d55906126a690869085906004016134e5565b60206040518083038186803b1580156126be57600080fd5b505afa1580156126d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f691906130fd565b6126ff57600080fd5b6001600160a01b0383166000908152600c6020526040902081905560075461273990612734906001600160801b0316846128c2565b6127c3565b600780546001600160801b0319166001600160801b03929092169190911790556040517f077511a636ba1f10551cc7b89c13ff66a6ac9344e8a917527817a9690b15af7a9061278b90859085906134e5565b60405180910390a1505050565b600354600090610b5e906001600160801b03166127bd84670de0b6b3a7640000612b8b565b906129fd565b60006001600160801b038211156127ec5760405162461bcd60e51b8152600401610c0990613717565b5090565b60008281526020819052604090206128089082612bcb565b15610df857612815612519565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206128719082612be0565b15610df85761287e612519565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000816128cf8185613a4e565b9150811015611a605760405162461bcd60e51b8152600401610c099061379e565b604051636eb1769f60e11b815281906001600160a01b0384169063dd62ed3e9061292090309088906004016133d7565b60206040518083038186803b15801561293857600080fd5b505afa15801561294c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129709190613313565b10156129f85760405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906129a490869085906004016134e5565b602060405180830381600087803b1580156129be57600080fd5b505af11580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f691906130fd565b505b505050565b6000808211612a1e5760405162461bcd60e51b8152600401610c099061396a565b611a5d8284613a66565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612a5c57612a578282612bf5565b6129f8565b6129f8838383612c82565b600082612a748382613bbc565b9150811115611a605760405162461bcd60e51b8152600401610c09906135e4565b600354600090610b5e90670de0b6b3a7640000906127bd9085906001600160801b0316612b8b565b6000611a5d8383612d55565b6000611a5d836001600160a01b038416612dae565b6001600160a01b038116156121b557600b80546001600160a01b0383166001600160a01b03199091161790556007805460ff60881b1916600160881b17905550565b6000610b5e82612dc6565b6060604482511015612b71575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610b61565b60048201915081806020019051810190610b5e9190613270565b6000811580612baf57508282612ba18183613b9d565b9250612bad9083613a66565b145b611a605760405162461bcd60e51b8152600401610c09906138ad565b6000611a5d836001600160a01b038416612dca565b6000611a5d836001600160a01b038416612e14565b604080516000808252602082019092526001600160a01b038416908390604051612c1f91906133a7565b60006040518083038185875af1925050503d8060008114612c5c576040519150601f19603f3d011682016040523d82523d6000602084013e612c61565b606091505b50509050806129f85760405162461bcd60e51b8152600401610c0990613833565b600080846001600160a01b031663a9059cbb8585604051602401612ca79291906134e5565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612ce091906133a7565b6000604051808303816000865af19150503d8060008114612d1d576040519150601f19603f3d011682016040523d82523d6000602084013e612d22565b606091505b5091509150818015612d4c575080511580612d4c575080806020019051810190612d4c91906130fd565b61260557600080fd5b81546000908210612d785760405162461bcd60e51b8152600401610c0990613640565b826000018281548110612d9b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000612dd68383612dae565b612e0c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611a60565b506000611a60565b60008181526001830160205260408120548015612f27576000612e38600183613bbc565b8554909150600090612e4c90600190613bbc565b90506000866000018281548110612e7357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612ea457634e487b7160e01b600052603260045260246000fd5b600091825260209091200155612ebb836001613a4e565b60008281526001890160205260409020558654879080612eeb57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611a60565b6000915050611a60565b600060208284031215612f42578081fd5b8135612f4d81613c46565b9392505050565b60008060008060008060008060008060006101608c8e031215612f75578687fd5b8b35612f8081613c46565b9a5060208c0135612f9081613c46565b995060408c0135612fa081613c46565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506101008c0135612fd481613c46565b92506101208c0135612fe581613c46565b91506101408c0135612ff681613c46565b809150509295989b509295989b9093969950565b60008060008060008060008060008060006101608c8e031215612f75578081fd5b60008060006060848603121561303f578283fd5b833561304a81613c46565b925060208401359150604084013561306181613c5b565b809150509250925092565b600080600060408486031215613080578283fd5b833567ffffffffffffffff80821115613097578485fd5b818601915086601f8301126130aa578485fd5b8135818111156130b8578586fd5b87602080830285010111156130cb578586fd5b6020928301955093505084013561306181613c5b565b6000602082840312156130f2578081fd5b8135612f4d81613c5b565b60006020828403121561310e578081fd5b8151612f4d81613c5b565b60006020828403121561312a578081fd5b5035919050565b60008060408385031215613143578182fd5b82359150602083013561315581613c46565b809150509250929050565b60008060408385031215613172578182fd5b50508035926020909101359150565b60008060208385031215613193578182fd5b823567ffffffffffffffff808211156131aa578384fd5b818501915085601f8301126131bd578384fd5b8135818111156131cb578485fd5b8660208285010111156131dc578485fd5b60209290920196919550909350505050565b600080600080600080600080610100898b03121561320a578182fd5b883561321581613c46565b9750602089013561322581613c46565b9650604089013561323581613c46565b9550606089013594506080890135935060a089013561325381613c69565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215613281578081fd5b815167ffffffffffffffff80821115613298578283fd5b818401915084601f8301126132ab578283fd5b8151818111156132bd576132bd613c30565b604051601f8201601f1916810160200183811182821017156132e1576132e1613c30565b6040528181528382016020018710156132f8578485fd5b613309826020830160208701613bd3565b9695505050505050565b600060208284031215613324578081fd5b5051919050565b6000806040838503121561333d578182fd5b82359150602083013561315581613c5b565b600060208284031215613360578081fd5b8151612f4d81613c69565b60008151808452613383816020860160208601613bd3565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b600082516133b9818460208701613bd3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039b8c168152998b1660208b0152978a1660408a01526060890196909652608088019490945260a087019290925260c086015260e0850152841661010084015283166101208301529091166101408201526101600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b604080825283519082018190526000906020906060840190828701845b82811015613561578151151584529284019290840190600101613543565b5050508381038285015284518082528282019080840283018401878501865b838110156135ae57601f1986840301855261359c83835161336b565b94870194925090860190600101613580565b50909998505050505050505050565b901515815260200190565b90815260200190565b600060208252611a5d602083018461336b565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5cd959606a1b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b6020808252600f908201526e125b98dbdc9c9958dd081a5b9c1d5d608a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252601f908201527f5472616e7366657248656c7065723a2063616e6e6f74207472616e7366657200604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b602080825260149082015273426f72696e674d6174683a20446976207a65726f60601b604082015260600190565b6001600160801b0393909316835290151560208301521515604082015260600190565b6001600160801b0392831681529116602082015260400190565b918252602082015260400190565b92835260208301919091526001600160801b0316604082015260600190565b6000808335601e19843603018112613a18578283fd5b83018035915067ffffffffffffffff821115613a32578283fd5b602001915036819003821315613a4757600080fd5b9250929050565b60008219821115613a6157613a61613c1a565b500190565b600082613a8157634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613a985750613ac3565b818704821115613aaa57613aaa613c1a565b80861615613ab757918102915b9490941c938002613a89565b94509492505050565b6000611a5d60001960ff851684600082613ae857506001612f4d565b81613af557506000612f4d565b8160018114613b0b5760028114613b1557613b42565b6001915050612f4d565b60ff841115613b2657613b26613c1a565b6001841b915084821115613b3c57613b3c613c1a565b50612f4d565b5060208310610133831016604e8410600b8410161715613b75575081810a83811115613b7057613b70613c1a565b612f4d565b613b828484846001613a86565b808604821115613b9457613b94613c1a565b02949350505050565b6000816000190483118215151615613bb757613bb7613c1a565b500290565b600082821015613bce57613bce613c1a565b500390565b60005b83811015613bee578181015183820152602001613bd6565b838111156129f65750506000910152565b6000600019821415613c1357613c13613c1a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146121b557600080fd5b80151581146121b557600080fd5b60ff811681146121b557600080fdfe9d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873bfd97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212205f36d273a696bc356f0623e9ee711ee101933d07928630b6e527e82df2e0a76664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdminRole(address)": {
        "details": "The sender must have the admin role.",
        "params": {
          "_address": "EOA or contract receiving the new role."
        }
      },
      "addMinterRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "addOperatorRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "addSmartContractRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "auctionEnded()": {
        "returns": {
          "_0": "auctionEnded True if sold out or time has ended."
        }
      },
      "auctionSuccessful()": {
        "returns": {
          "_0": "auctionSuccessful True if the commitmentsTotal is equal or higher than goal."
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        },
        "returns": {
          "results": "An array with the returned data of each function call, mapped one-to-one to `calls`. F1: External is ok here because this is the batch function, adding it to a batch makes no sense F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value C3: The length of the loop is fully under user control, so can't be exploited C7: Delegatecall is only used on the same contract, so it's safe",
          "successes": "An array indicating the success of a call, mapped one-to-one to `calls`."
        }
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contracts finalization function."
      },
      "finalizeTimeExpired()": {
        "returns": {
          "_0": "True if 7 days have passed since the end of the auction"
        }
      },
      "finalized()": {
        "returns": {
          "_0": "bool True if sale has been finalised."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAdminRole(address)": {
        "params": {
          "_address": "EOA or contract being checked."
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not."
        }
      },
      "hasMinterRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "hasOperatorRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasSmartContractRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "initAccessControls(address)": {
        "params": {
          "_admin": "Admins address."
        }
      },
      "initMarket(bytes)": {
        "params": {
          "_data": "Encoded data for initialization."
        }
      },
      "isOpen()": {
        "returns": {
          "_0": "isOpen True if the crowdsale is open, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAdminRole(address)": {
        "details": "The sender must have the admin role.",
        "params": {
          "_address": "EOA or contract affected."
        }
      },
      "removeMinterRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "removeOperatorRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "removeSmartContractRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAuctionPrice(uint256,uint256)": {
        "params": {
          "_goal": "Minimum amount raised and goal for the auction.",
          "_rate": "Price per token."
        }
      },
      "setAuctionTime(uint256,uint256)": {
        "params": {
          "_endTime": "Auction end time.",
          "_startTime": "Auction start time."
        }
      },
      "setAuctionWallet(address)": {
        "params": {
          "_wallet": "Auction wallet is where funds will be sent."
        }
      },
      "tokensClaimable(address)": {
        "returns": {
          "claimerCommitment": "How many tokens the user is able to claim."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawTokens(address)": {
        "details": "Withdraw tokens only after crowdsale ends.",
        "params": {
          "beneficiary": "Whose tokens will be withdrawn."
        }
      }
    },
    "stateVariables": {
      "marketTemplate": {
        "details": "For different marketplace types, this must be incremented."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MinterRoleGranted(address,address)": {
        "notice": "Events for adding and removing various roles"
      }
    },
    "kind": "user",
    "methods": {
      "MINTER_ROLE()": {
        "notice": "Role definitions"
      },
      "addAdminRole(address)": {
        "notice": "Grants the admin role to an address."
      },
      "addMinterRole(address)": {
        "notice": "Grants the minter role to an address"
      },
      "addOperatorRole(address)": {
        "notice": "Grants the operator role to an address"
      },
      "addSmartContractRole(address)": {
        "notice": "Grants the smart contract role to an address"
      },
      "auctionEnded()": {
        "notice": "Checks if the sale has ended."
      },
      "auctionSuccessful()": {
        "notice": "Checks if the sale minimum amount was raised."
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "finalize()": {
        "notice": "Manually finalizes the Crowdsale."
      },
      "finalized()": {
        "notice": "Checks if the sale has been finalised."
      },
      "hasAdminRole(address)": {
        "notice": "Used to check whether an address has the admin role."
      },
      "hasMinterRole(address)": {
        "notice": "Used to check whether an address has the minter role"
      },
      "hasOperatorRole(address)": {
        "notice": "Used to check whether an address has the operator role"
      },
      "hasSmartContractRole(address)": {
        "notice": "Used to check whether an address has the smart contract role"
      },
      "initAccessControls(address)": {
        "notice": "Initializes access controls."
      },
      "initMarket(bytes)": {
        "notice": "Decodes and hands Crowdsale data to the initCrowdsale function."
      },
      "isOpen()": {
        "notice": "Checks if the sale is open."
      },
      "marketTemplate()": {
        "notice": "FLYBYMarket template id for the factory contract."
      },
      "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`. F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert) if part of a batch this could be used to grief once as the second call would not need the permit"
      },
      "removeAdminRole(address)": {
        "notice": "Removes the admin role from an address."
      },
      "removeMinterRole(address)": {
        "notice": "Removes the minter role from an address"
      },
      "removeOperatorRole(address)": {
        "notice": "Removes the operator role from an address"
      },
      "removeSmartContractRole(address)": {
        "notice": "Removes the smart contract role from an address"
      },
      "setAuctionPrice(uint256,uint256)": {
        "notice": "Admin can set auction price through this function."
      },
      "setAuctionTime(uint256,uint256)": {
        "notice": "Admin can set start and end time through this function."
      },
      "setAuctionWallet(address)": {
        "notice": "Admin can set the auction wallet through this function."
      },
      "tokensClaimable(address)": {
        "notice": "Adjusts users commitment depending on amount already claimed and unclaimed tokens left."
      },
      "withdrawTokens(address)": {
        "notice": "Withdraws bought tokens, or returns commitment if the sale is unsuccessful."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7955,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)7950_storage)"
      },
      {
        "astId": 215,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "initAccess",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8223,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10731,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2172,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "marketPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(MarketPrice)2169_storage"
      },
      {
        "astId": 2182,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "marketInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(MarketInfo)2179_storage"
      },
      {
        "astId": 2192,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "marketStatus",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MarketStatus)2189_storage"
      },
      {
        "astId": 2194,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "auctionToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2196,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "wallet",
        "offset": 0,
        "slot": "9",
        "type": "t_address_payable"
      },
      {
        "astId": 2198,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "paymentCurrency",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2200,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "pointList",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2204,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "commitments",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2208,
        "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
        "label": "claimed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7950_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7950_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)10401_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10400,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10124_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)2179_storage": {
        "encoding": "inplace",
        "label": "struct PrivateSale.MarketInfo",
        "members": [
          {
            "astId": 2174,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2176,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2178,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "totalTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MarketPrice)2169_storage": {
        "encoding": "inplace",
        "label": "struct PrivateSale.MarketPrice",
        "members": [
          {
            "astId": 2166,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2168,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "goal",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarketStatus)2189_storage": {
        "encoding": "inplace",
        "label": "struct PrivateSale.MarketStatus",
        "members": [
          {
            "astId": 2184,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "commitmentsTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2186,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "finalized",
            "offset": 16,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2188,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "usePointList",
            "offset": 17,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)7950_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 7947,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)10401_storage"
          },
          {
            "astId": 7949,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)10124_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10119,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10123,
            "contract": "contracts/Auctions/PrivateSale.sol:PrivateSale",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}