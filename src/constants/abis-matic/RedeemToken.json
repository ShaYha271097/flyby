{
  "address": "0x0FDfCA7F77A5a7a3da8e4913e4dCE0C29d9A01D3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onUnlock",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDepositIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_privateSaleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getItemAtUserIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getLockedItemAtId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_privateSaleAddress",
          "type": "address"
        }
      ],
      "name": "getLockedItemIdsOfUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_privateSaleAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        }
      ],
      "name": "lockTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_privateSaleAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c3ce1fb5f894cf6491520effb638248ec06ffde091ee22afd04835e0be5826a",
  "receipt": {
    "to": null,
    "from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
    "contractAddress": "0x0FDfCA7F77A5a7a3da8e4913e4dCE0C29d9A01D3",
    "transactionIndex": 0,
    "gasUsed": "789023",
    "logsBloom": "0x
    "blockHash": "0x0cbd9c7a72c7ab79ddf068ba487b1e8bb124c9455b1b3bf34f8d473ed2d8931d",
    "transactionHash": "0x1c3ce1fb5f894cf6491520effb638248ec06ffde091ee22afd04835e0be5826a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23508157,
        "transactionHash": "0x1c3ce1fb5f894cf6491520effb638248ec06ffde091ee22afd04835e0be5826a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000059b3976f0a5270000000000000000000000000000000000000000000000009b891b1e28fc4ede00000000000000000000000000000000000000000000042df48b7df377cb3bed0000000000000000000000000000000000000000000000009b837fe4b20ba9b700000000000000000000000000000000000000000000042df491192ceebbe114",
        "logIndex": 0,
        "blockHash": "0x0cbd9c7a72c7ab79ddf068ba487b1e8bb124c9455b1b3bf34f8d473ed2d8931d"
      }
    ],
    "blockNumber": 23508157,
    "cumulativeGasUsed": "789023",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f3d7a5d64038e00daef5026933823eb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onUnlock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_privateSaleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getItemAtUserIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLockedItemAtId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_privateSaleAddress\",\"type\":\"address\"}],\"name\":\"getLockedItemIdsOfUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_privateSaleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"lockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_privateSaleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getItemAtUserIndex(uint256,address,address,address)\":{\"params\":{\"_index\":\"Index number of the list with item ids\",\"_tokenAddress\":\"Address of the token corresponding to this item\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"Items token amount number, Items unlock timestamp, Items owner address, Items Id number\"}},\"getLockedItemAtId(uint256)\":{\"params\":{\"_id\":\"Id number.\"},\"returns\":{\"_0\":\"All the data for this Id (token amount number, unlock time number, owner address and user index number)\"}},\"getLockedItemIdsOfUser(address,address,address)\":{\"params\":{\"_tokenAddress\":\"Address token\",\"_user\":\"User address\"}},\"lockTokens(address,address,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Number of tokens locked\",\"_tokenAddress\":\"Address of the token locked\",\"_unlockTime\":\"Timestamp number marking when tokens get unlocked\",\"_withdrawer\":\"Address where tokens can be withdrawn after unlocking\"}},\"withdrawTokens(address,address,uint256,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Number of tokens to withdraw\",\"_id\":\"Id number\",\"_index\":\"Index number of the list with Ids\",\"_tokenAddress\":\"Address of the token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allDepositIds(uint256)\":{\"notice\":\"an array of all the deposit Ids\"},\"depositId()\":{\"notice\":\"id number of the vault deposit\"},\"getItemAtUserIndex(uint256,address,address,address)\":{\"notice\":\"Retrieve data from the item under user index number\"},\"getLockedItemAtId(uint256)\":{\"notice\":\"Retrieve all the data from Item struct under given Id.\"},\"getLockedItemIdsOfUser(address,address,address)\":{\"notice\":\"Get locked item's ids of the specified user\"},\"lockTokens(address,address,uint256,uint256,address)\":{\"notice\":\"Locking tokens in the vault\"},\"lockedItem(uint256)\":{\"notice\":\"mapping from item Id to the Item struct\"},\"withdrawTokens(address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Withdrawing tokens from the vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RedeemToken.sol\":\"RedeemToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0xe4f8cb9ac9cd376f81da2348709e1f44dc0bd2fb44513c5d230702bb1b9e8b36\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a + b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\",\"keccak256\":\"0xc164f4d829f092ff01b333a944130288f57aef6666ad50b48c81ef7cc9dee765\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xe0521887b553a6c5bef0acd727645ff69535b60fe7c5947e40f19391307d70d2\",\"license\":\"MIT\"},\"contracts/RedeemToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Interfaces/IERC20.sol\\\";\\nimport \\\"./Utils/SafeTransfer.sol\\\";\\nimport \\\"./OpenZeppelin/math/SafeMath.sol\\\";\\nimport \\\"./OpenZeppelin/utils/Context.sol\\\";\\n\\ncontract RedeemToken is SafeTransfer, Context {\\n  using SafeMath for uint256;\\n\\n  struct Item {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 userIndex;\\n    address owner;\\n  }\\n\\n  /// @notice tracking assets belonging to a particular user\\n  struct UserInfo {\\n    mapping(address => mapping(address => uint256[])) lockToItems;\\n  }\\n\\n  mapping(address => UserInfo) users;\\n  /// @notice id number of the vault deposit\\n  uint256 public depositId;\\n  /// @notice an array of all the deposit Ids\\n  uint256[] public allDepositIds;\\n  /// @notice mapping from item Id to the Item struct\\n  mapping(uint256 => Item) public lockedItem;\\n\\n  event onLock(address tokenAddress, address user, uint256 amount);\\n  event onUnlock(address tokenAddress, uint256 amount);\\n\\n  /**\\n   * @notice Locking tokens in the vault\\n   * @param _tokenAddress Address of the token locked\\n   * @param _amount Number of tokens locked\\n   * @param _unlockTime Timestamp number marking when tokens get unlocked\\n   * @param _withdrawer Address where tokens can be withdrawn after unlocking\\n   */\\n  function lockTokens(\\n    address _tokenAddress,\\n    address _privateSaleAddress,\\n    uint256 _amount,\\n    uint256 _unlockTime,\\n    address _withdrawer\\n  )\\n    public returns (uint256 _id)\\n  {\\n    require(_amount > 0, \\\"RedeemToken: token amount is Zero\\\");\\n    require(_unlockTime < 10000000000, \\\"ReddemToken: timestamp should be in seconds\\\");\\n    require(_withdrawer != address(0), \\\"ReddemToken: withdrawer is zero address\\\");\\n    _safeTransferFrom(_tokenAddress, _msgSender(), _amount);\\n\\n    _id = ++depositId;\\n\\n    lockedItem[_id].amount = _amount;\\n    lockedItem[_id].unlockTime = _unlockTime;\\n    lockedItem[_id].owner = _withdrawer;\\n\\n    allDepositIds.push(_id);\\n\\n    UserInfo storage userItem = users[_withdrawer];\\n    userItem.lockToItems[_tokenAddress][_privateSaleAddress].push(_id);\\n    uint256 userIndex = userItem.lockToItems[_tokenAddress][_privateSaleAddress].length - 1;\\n    lockedItem[_id].userIndex = userIndex;\\n\\n    emit onLock(_tokenAddress, _msgSender(), lockedItem[_id].amount);\\n  }\\n\\n  /**\\n   * @notice Withdrawing tokens from the vault\\n   * @param _tokenAddress Address of the token to withdraw\\n   * @param _index Index number of the list with Ids\\n   * @param _id Id number\\n   * @param _amount Number of tokens to withdraw\\n   */\\n  function withdrawTokens(\\n    address _tokenAddress,\\n    address _privateSaleAddress,\\n    uint256 _index,\\n    uint256 _id,\\n    uint256 _amount,\\n    address _recipient\\n  ) external {\\n    require(_amount > 0, \\\"RedeemToken: token amount is zero\\\");\\n    uint256 id = users[_recipient].lockToItems[_tokenAddress][_privateSaleAddress][_index];\\n    Item storage userItem = lockedItem[id];\\n    require(id == _id && userItem.owner == _recipient, \\\"RedeemToken: not found\\\");\\n    require(userItem.unlockTime < block.timestamp, \\\"RedeemToken: not unlocked yet\\\");\\n    userItem.amount = userItem.amount.sub(_amount);\\n\\n    _safeTransfer(_tokenAddress, _recipient, _amount);\\n    emit onUnlock(_tokenAddress, _amount);\\n  }\\n\\n  /**\\n   * @notice Retrieve data from the item under user index number\\n   * @param _index Index number of the list with item ids\\n   * @param _tokenAddress Address of the token corresponding to this item\\n   * @param _user User address\\n   * @return Items token amount number, Items unlock timestamp, Items owner address, Items Id number\\n   */\\n  function getItemAtUserIndex(\\n    uint256 _index,\\n    address _tokenAddress,\\n    address _privateSaleAddress,\\n    address _user\\n  )\\n    external view returns (uint256, uint256, address, uint256)\\n  {\\n    uint256 id = users[_user].lockToItems[_tokenAddress][_privateSaleAddress][_index];\\n    Item storage item = lockedItem[id];\\n    return (item.amount, item.unlockTime, item.owner, id);\\n  }\\n\\n  /**\\n   * @notice Retrieve all the data from Item struct under given Id.\\n   * @param _id Id number.\\n   * @return All the data for this Id (token amount number, unlock time number, owner address and user index number)\\n   */\\n  function getLockedItemAtId(uint256 _id) external view returns (uint256, uint256, address, uint256, uint256) {\\n      Item storage item = lockedItem[_id];\\n      return (item.amount, item.unlockTime, item.owner, item.userIndex, _id);\\n  }\\n\\n  /**\\n   * @notice Get locked item's ids of the specified user\\n   * @param _user User address\\n   * @param _tokenAddress Address token\\n   */\\n  function getLockedItemIdsOfUser(address _user, address _tokenAddress, address _privateSaleAddress) external view returns (uint256[] memory) {\\n    UserInfo storage user = users[_user];\\n    return user.lockToItems[_tokenAddress][_privateSaleAddress];\\n  }\\n}\",\"keccak256\":\"0x4a97f31a54ccf69ed638870bd59e31daded0ebf8b8f8dc5c197ec5c46e6ed424\",\"license\":\"MIT\"},\"contracts/Utils/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract SafeTransfer {\\n\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to,_amount );\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n    \\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n    \\n    function _safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n    \\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        (bool success, bytes memory data) =\\n            token.call(\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        (bool success, bytes memory data) =\\n            token.call(\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: cannot transfer\\\");\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x06e753bab2eba23d922c4b950cce37d50c9d058cf9a36feabcd1efa21e46d3cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d4f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806327a7dae11161005b57806327a7dae1146101205780634bb42a7a146101405780639852099c14610155578063c9028aff1461015d57610088565b806302949dbe1461008d57806302ef846a146100b95780630613aea8146100d957806322e35e01146100fc575b600080fd5b6100a061009b366004610965565b610170565b6040516100b09493929190610c5d565b60405180910390f35b6100cc6100c7366004610879565b61020d565b6040516100b09190610c54565b6100ec6100e736600461094d565b6103c7565b6040516100b09493929190610cad565b61010f61010a36600461094d565b6103f9565b6040516100b0959493929190610c81565b61013361012e366004610837565b610430565b6040516100b09190610a27565b61015361014e3660046108cf565b6104b5565b005b6100cc6105fb565b6100cc61016b36600461094d565b610601565b6001600160a01b03808216600090815260208181526040808320878516845282528083209386168352929052908120805482918291829182918a9081106101c757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600391829052604090922080546001820154919092015491975095506001600160a01b03169350915050945094509450949050565b60008084116102375760405162461bcd60e51b815260040161022e90610b54565b60405180910390fd5b6402540be400831061025b5760405162461bcd60e51b815260040161022e90610a6b565b6001600160a01b0382166102815760405162461bcd60e51b815260040161022e90610b95565b6102938661028d610622565b86610626565b6001600081546102a290610ce8565b9182905550600081815260036020818152604080842089815560018082018a9055930180546001600160a01b0319166001600160a01b03898116918217909255600280548087019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0187905585528483528185208c82168652808452828620918c168087529184529185208054808601825581875293862090930186905584529054939450926103559190610cd1565b600084815260036020526040902060020181905590507fe0896ee63a02ae59823954043dfd52f907878dd98d69cb0f77a9b5c4f48efdaf88610395610622565b600086815260036020526040908190205490516103b4939291906109ea565b60405180910390a1505095945050505050565b60036020819052600091825260409091208054600182015460028301549290930154909291906001600160a01b031684565b60008181526003602081905260409091208054600182015492820154600290920154909492936001600160a01b0390921692909190565b6001600160a01b038084166000908152602081815260408083208685168452808352818420948616845293825291829020805483518184028101840190945280845260609493928301828280156104a657602002820191906000526020600020905b815481526020019060010190808311610492575b50505050509150509392505050565b600082116104d55760405162461bcd60e51b815260040161022e90610bdc565b6001600160a01b038082166000908152602081815260408083208a851684528252808320938916835292905290812080548690811061052457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600390915260409091209091508482148015610560575060038101546001600160a01b038481169116145b61057c5760405162461bcd60e51b815260040161022e90610aed565b4281600101541061059f5760405162461bcd60e51b815260040161022e90610ab6565b80546105ab9085610715565b81556105b8888486610748565b7f75140be428252b59ceb5a81ae184b42fe610b766a7d42b7c7c5e16698b1d084188856040516105e9929190610a0e565b60405180910390a15050505050505050565b60015481565b6002818154811061061157600080fd5b600091825260209091200154905081565b3390565b600080846001600160a01b03166323b872dd85308660405160240161064d939291906109ea565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161068691906109b1565b6000604051808303816000865af19150503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50915091508180156106f25750805115806106f25750808060200190518101906106f2919061092d565b61070e5760405162461bcd60e51b815260040161022e90610c1d565b5050505050565b6000828211156107375760405162461bcd60e51b815260040161022e90610b1d565b6107418284610cd1565b9392505050565b600080846001600160a01b031663a9059cbb858560405160240161076d929190610a0e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516107a691906109b1565b6000604051808303816000865af19150503d80600081146107e3576040519150601f19603f3d011682016040523d82523d6000602084013e6107e8565b606091505b5091509150818015610812575080511580610812575080806020019051810190610812919061092d565b61070e57600080fd5b80356001600160a01b038116811461083257600080fd5b919050565b60008060006060848603121561084b578283fd5b6108548461081b565b92506108626020850161081b565b91506108706040850161081b565b90509250925092565b600080600080600060a08688031215610890578081fd5b6108998661081b565b94506108a76020870161081b565b935060408601359250606086013591506108c36080870161081b565b90509295509295909350565b60008060008060008060c087890312156108e7578081fd5b6108f08761081b565b95506108fe6020880161081b565b945060408701359350606087013592506080870135915061092160a0880161081b565b90509295509295509295565b60006020828403121561093e578081fd5b81518015158114610741578182fd5b60006020828403121561095e578081fd5b5035919050565b6000806000806080858703121561097a578384fd5b8435935061098a6020860161081b565b92506109986040860161081b565b91506109a66060860161081b565b905092959194509250565b60008251815b818110156109d157602081860181015185830152016109b7565b818111156109df5782828501525b509190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610a5f57835183529284019291840191600101610a43565b50909695505050505050565b6020808252602b908201527f52656464656d546f6b656e3a2074696d657374616d702073686f756c6420626560408201526a20696e207365636f6e647360a81b606082015260800190565b6020808252601d908201527f52656465656d546f6b656e3a206e6f7420756e6c6f636b656420796574000000604082015260600190565b60208082526016908201527514995919595b551bdad95b8e881b9bdd08199bdd5b9960521b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526021908201527f52656465656d546f6b656e3a20746f6b656e20616d6f756e74206973205a65726040820152606f60f81b606082015260800190565b60208082526027908201527f52656464656d546f6b656e3a2077697468647261776572206973207a65726f206040820152666164647265737360c81b606082015260800190565b60208082526021908201527f52656465656d546f6b656e3a20746f6b656e20616d6f756e74206973207a65726040820152606f60f81b606082015260800190565b6020808252601f908201527f5472616e7366657248656c7065723a2063616e6e6f74207472616e7366657200604082015260600190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b94855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b600082821015610ce357610ce3610d03565b500390565b6000600019821415610cfc57610cfc610d03565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b20c38d3f703eb7ddbc6aecc82ff2295f781a9fa4ad1105d9bfcd44c5101ffb564736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806327a7dae11161005b57806327a7dae1146101205780634bb42a7a146101405780639852099c14610155578063c9028aff1461015d57610088565b806302949dbe1461008d57806302ef846a146100b95780630613aea8146100d957806322e35e01146100fc575b600080fd5b6100a061009b366004610965565b610170565b6040516100b09493929190610c5d565b60405180910390f35b6100cc6100c7366004610879565b61020d565b6040516100b09190610c54565b6100ec6100e736600461094d565b6103c7565b6040516100b09493929190610cad565b61010f61010a36600461094d565b6103f9565b6040516100b0959493929190610c81565b61013361012e366004610837565b610430565b6040516100b09190610a27565b61015361014e3660046108cf565b6104b5565b005b6100cc6105fb565b6100cc61016b36600461094d565b610601565b6001600160a01b03808216600090815260208181526040808320878516845282528083209386168352929052908120805482918291829182918a9081106101c757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600391829052604090922080546001820154919092015491975095506001600160a01b03169350915050945094509450949050565b60008084116102375760405162461bcd60e51b815260040161022e90610b54565b60405180910390fd5b6402540be400831061025b5760405162461bcd60e51b815260040161022e90610a6b565b6001600160a01b0382166102815760405162461bcd60e51b815260040161022e90610b95565b6102938661028d610622565b86610626565b6001600081546102a290610ce8565b9182905550600081815260036020818152604080842089815560018082018a9055930180546001600160a01b0319166001600160a01b03898116918217909255600280548087019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0187905585528483528185208c82168652808452828620918c168087529184529185208054808601825581875293862090930186905584529054939450926103559190610cd1565b600084815260036020526040902060020181905590507fe0896ee63a02ae59823954043dfd52f907878dd98d69cb0f77a9b5c4f48efdaf88610395610622565b600086815260036020526040908190205490516103b4939291906109ea565b60405180910390a1505095945050505050565b60036020819052600091825260409091208054600182015460028301549290930154909291906001600160a01b031684565b60008181526003602081905260409091208054600182015492820154600290920154909492936001600160a01b0390921692909190565b6001600160a01b038084166000908152602081815260408083208685168452808352818420948616845293825291829020805483518184028101840190945280845260609493928301828280156104a657602002820191906000526020600020905b815481526020019060010190808311610492575b50505050509150509392505050565b600082116104d55760405162461bcd60e51b815260040161022e90610bdc565b6001600160a01b038082166000908152602081815260408083208a851684528252808320938916835292905290812080548690811061052457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600390915260409091209091508482148015610560575060038101546001600160a01b038481169116145b61057c5760405162461bcd60e51b815260040161022e90610aed565b4281600101541061059f5760405162461bcd60e51b815260040161022e90610ab6565b80546105ab9085610715565b81556105b8888486610748565b7f75140be428252b59ceb5a81ae184b42fe610b766a7d42b7c7c5e16698b1d084188856040516105e9929190610a0e565b60405180910390a15050505050505050565b60015481565b6002818154811061061157600080fd5b600091825260209091200154905081565b3390565b600080846001600160a01b03166323b872dd85308660405160240161064d939291906109ea565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161068691906109b1565b6000604051808303816000865af19150503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50915091508180156106f25750805115806106f25750808060200190518101906106f2919061092d565b61070e5760405162461bcd60e51b815260040161022e90610c1d565b5050505050565b6000828211156107375760405162461bcd60e51b815260040161022e90610b1d565b6107418284610cd1565b9392505050565b600080846001600160a01b031663a9059cbb858560405160240161076d929190610a0e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516107a691906109b1565b6000604051808303816000865af19150503d80600081146107e3576040519150601f19603f3d011682016040523d82523d6000602084013e6107e8565b606091505b5091509150818015610812575080511580610812575080806020019051810190610812919061092d565b61070e57600080fd5b80356001600160a01b038116811461083257600080fd5b919050565b60008060006060848603121561084b578283fd5b6108548461081b565b92506108626020850161081b565b91506108706040850161081b565b90509250925092565b600080600080600060a08688031215610890578081fd5b6108998661081b565b94506108a76020870161081b565b935060408601359250606086013591506108c36080870161081b565b90509295509295909350565b60008060008060008060c087890312156108e7578081fd5b6108f08761081b565b95506108fe6020880161081b565b945060408701359350606087013592506080870135915061092160a0880161081b565b90509295509295509295565b60006020828403121561093e578081fd5b81518015158114610741578182fd5b60006020828403121561095e578081fd5b5035919050565b6000806000806080858703121561097a578384fd5b8435935061098a6020860161081b565b92506109986040860161081b565b91506109a66060860161081b565b905092959194509250565b60008251815b818110156109d157602081860181015185830152016109b7565b818111156109df5782828501525b509190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610a5f57835183529284019291840191600101610a43565b50909695505050505050565b6020808252602b908201527f52656464656d546f6b656e3a2074696d657374616d702073686f756c6420626560408201526a20696e207365636f6e647360a81b606082015260800190565b6020808252601d908201527f52656465656d546f6b656e3a206e6f7420756e6c6f636b656420796574000000604082015260600190565b60208082526016908201527514995919595b551bdad95b8e881b9bdd08199bdd5b9960521b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526021908201527f52656465656d546f6b656e3a20746f6b656e20616d6f756e74206973205a65726040820152606f60f81b606082015260800190565b60208082526027908201527f52656464656d546f6b656e3a2077697468647261776572206973207a65726f206040820152666164647265737360c81b606082015260800190565b60208082526021908201527f52656465656d546f6b656e3a20746f6b656e20616d6f756e74206973207a65726040820152606f60f81b606082015260800190565b6020808252601f908201527f5472616e7366657248656c7065723a2063616e6e6f74207472616e7366657200604082015260600190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b94855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b600082821015610ce357610ce3610d03565b500390565b6000600019821415610cfc57610cfc610d03565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b20c38d3f703eb7ddbc6aecc82ff2295f781a9fa4ad1105d9bfcd44c5101ffb564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getItemAtUserIndex(uint256,address,address,address)": {
        "params": {
          "_index": "Index number of the list with item ids",
          "_tokenAddress": "Address of the token corresponding to this item",
          "_user": "User address"
        },
        "returns": {
          "_0": "Items token amount number, Items unlock timestamp, Items owner address, Items Id number"
        }
      },
      "getLockedItemAtId(uint256)": {
        "params": {
          "_id": "Id number."
        },
        "returns": {
          "_0": "All the data for this Id (token amount number, unlock time number, owner address and user index number)"
        }
      },
      "getLockedItemIdsOfUser(address,address,address)": {
        "params": {
          "_tokenAddress": "Address token",
          "_user": "User address"
        }
      },
      "lockTokens(address,address,uint256,uint256,address)": {
        "params": {
          "_amount": "Number of tokens locked",
          "_tokenAddress": "Address of the token locked",
          "_unlockTime": "Timestamp number marking when tokens get unlocked",
          "_withdrawer": "Address where tokens can be withdrawn after unlocking"
        }
      },
      "withdrawTokens(address,address,uint256,uint256,uint256,address)": {
        "params": {
          "_amount": "Number of tokens to withdraw",
          "_id": "Id number",
          "_index": "Index number of the list with Ids",
          "_tokenAddress": "Address of the token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allDepositIds(uint256)": {
        "notice": "an array of all the deposit Ids"
      },
      "depositId()": {
        "notice": "id number of the vault deposit"
      },
      "getItemAtUserIndex(uint256,address,address,address)": {
        "notice": "Retrieve data from the item under user index number"
      },
      "getLockedItemAtId(uint256)": {
        "notice": "Retrieve all the data from Item struct under given Id."
      },
      "getLockedItemIdsOfUser(address,address,address)": {
        "notice": "Get locked item's ids of the specified user"
      },
      "lockTokens(address,address,uint256,uint256,address)": {
        "notice": "Locking tokens in the vault"
      },
      "lockedItem(uint256)": {
        "notice": "mapping from item Id to the Item struct"
      },
      "withdrawTokens(address,address,uint256,uint256,uint256,address)": {
        "notice": "Withdrawing tokens from the vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10795,
        "contract": "contracts/RedeemToken.sol:RedeemToken",
        "label": "users",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(UserInfo)10790_storage)"
      },
      {
        "astId": 10798,
        "contract": "contracts/RedeemToken.sol:RedeemToken",
        "label": "depositId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10802,
        "contract": "contracts/RedeemToken.sol:RedeemToken",
        "label": "allDepositIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10808,
        "contract": "contracts/RedeemToken.sol:RedeemToken",
        "label": "lockedItem",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Item)10782_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_struct(UserInfo)10790_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RedeemToken.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10790_storage"
      },
      "t_mapping(t_uint256,t_struct(Item)10782_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RedeemToken.Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)10782_storage"
      },
      "t_struct(Item)10782_storage": {
        "encoding": "inplace",
        "label": "struct RedeemToken.Item",
        "members": [
          {
            "astId": 10775,
            "contract": "contracts/RedeemToken.sol:RedeemToken",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10777,
            "contract": "contracts/RedeemToken.sol:RedeemToken",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10779,
            "contract": "contracts/RedeemToken.sol:RedeemToken",
            "label": "userIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10781,
            "contract": "contracts/RedeemToken.sol:RedeemToken",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)10790_storage": {
        "encoding": "inplace",
        "label": "struct RedeemToken.UserInfo",
        "members": [
          {
            "astId": 10789,
            "contract": "contracts/RedeemToken.sol:RedeemToken",
            "label": "lockToItems",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}