{
  "address": "0x268CC844b8e1E24F156b7de83A555273De37bD6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_launcher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract FLYBYAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_batchAuction",
          "type": "address"
        }
      ],
      "name": "getBatchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "commitmentsTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumCommitmentAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.BatchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdsale",
          "type": "address"
        }
      ],
      "name": "getCrowdsaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "goal",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.CrowdsaleInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_document",
          "type": "address"
        }
      ],
      "name": "getDocuments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "data",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastModified",
              "type": "uint256"
            }
          ],
          "internalType": "struct DocumentHepler.Document[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_dutchAuction",
          "type": "address"
        }
      ],
      "name": "getDutchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "startPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minimumPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.DutchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_hyperbolicAuction",
          "type": "address"
        }
      ],
      "name": "getHyperbolicAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minimumPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "alpha",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.HyperbolicAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getTokensInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_action",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserMarketInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "commitments",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensClaimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketHelper.UserMarketInfo",
          "name": "userInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IFlybyMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_launcher",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract IFlybyTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7b103d956f46a74c03b2d0d916a98de6ba94ad06f12f23800e41e3126cf2b33",
  "receipt": {
    "to": null,
    "from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
    "contractAddress": "0x268CC844b8e1E24F156b7de83A555273De37bD6b",
    "transactionIndex": 3,
    "gasUsed": "2593442",
    "logsBloom": "0x
    "blockHash": "0x5ffce40117b4bdfffcdb33be2fd633f08d51b5d7ee88654750a3976c951f2903",
    "transactionHash": "0xa7b103d956f46a74c03b2d0d916a98de6ba94ad06f12f23800e41e3126cf2b33",
    "logs": [],
    "blockNumber": 14440481,
    "cumulativeGasUsed": "4714482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x36386b53eAd871D765a43683A955f63FdcD3a810",
    "0x8F8dbD1159A9664F861d9179889a98D65f5D0235",
    "0x7d2482f5F80cE8Bda932fF47233E27f19F07a3cC",
    "0x9E3c511C2C69077A46aB5fce1b79663fe14bD611"
  ],
  "solcInputHash": "0bb2481c0a33b756a35d8c75b9e1dee6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launcher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract FLYBYAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_batchAuction\",\"type\":\"address\"}],\"name\":\"getBatchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"commitmentsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCommitmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.BatchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"getCrowdsaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"goal\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.CrowdsaleInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_document\",\"type\":\"address\"}],\"name\":\"getDocuments\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dutchAuction\",\"type\":\"address\"}],\"name\":\"getDutchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.DutchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_hyperbolicAuction\",\"type\":\"address\"}],\"name\":\"getHyperbolicAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"alpha\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.HyperbolicAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct MarketHelper.UserMarketInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IFlybyMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launcher\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract IFlybyTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Helper/FLYBYHelper.sol\":\"FLYBYHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/FLYBYAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FLYBYAdminAccess.sol\\\";\\n\\ncontract FLYBYAccessControls is FLYBYAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x15d26912cdf5e68c3bf91040671f5c6f863e32b72906663c4007777abcb5d1e3\",\"license\":\"MIT\"},\"contracts/Access/FLYBYAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\ncontract FLYBYAdminAccess is AccessControl {\\n    bool private initAccess;\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x043cc7e6c78cafc685a1348e2af7fb6d49dd66383605b5265383a795f9388f9a\",\"license\":\"MIT\"},\"contracts/Helper/FLYBYHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Access/FLYBYAccessControls.sol\\\";\\n\\n/********************\\n *    UNISWAP V2\\n ********************/\\ninterface IUniswapFactory {\\n    function getPair(address token0, address token1) external view returns (address);\\n}\\n\\ninterface IUniswapPair {\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner) external view returns (uint);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n}\\n\\n/********************\\n *    DOCUMENTS\\n ********************/\\ninterface IDocument {\\n    function getDocument(string calldata _name) external view returns (string memory, uint256);\\n    function getDocumentCount() external view returns (uint256);\\n    function getDocumentName(uint256 index) external view returns (string memory);    \\n}\\n\\ncontract DocumentHepler {\\n    struct Document {\\n        string name;\\n        string data;\\n        uint256 lastModified;\\n    }\\n\\n    function getDocuments(address _document) public view returns(Document[] memory) {\\n        IDocument document = IDocument(_document);\\n        uint256 documentCount = document.getDocumentCount();\\n\\n        Document[] memory documents = new Document[](documentCount);\\n\\n        for(uint256 i = 0; i < documentCount; i++) {\\n            string memory documentName = document.getDocumentName(i);\\n            (\\n                documents[i].data,\\n                documents[i].lastModified\\n            ) = document.getDocument(documentName);\\n            documents[i].name = documentName;\\n        }\\n        return documents;\\n    }\\n}\\n\\n/********************\\n *      TOKENs\\n ********************/\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IFlybyTokenFactory {\\n    function getTokens() external view returns (address[] memory);\\n    function tokens(uint256) external view returns (address);\\n    function numberOfTokens() external view returns (uint256);\\n} \\n\\ncontract TokenHelper {\\n    struct TokenInfo {\\n        address addr;\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    function getTokensInfo(address[] memory addresses) public view returns (TokenInfo[] memory)\\n    {\\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            infos[i] = getTokenInfo(addresses[i]);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getTokenInfo(address _address) public view returns (TokenInfo memory) {\\n        TokenInfo memory info;\\n        IERC20 token = IERC20(_address);\\n\\n        info.addr = _address;\\n        info.name = token.name();\\n        info.symbol = token.symbol();\\n        info.decimals = token.decimals();\\n\\n        return info;\\n    }\\n\\n    function allowance(address _token, address _owner, address _spender) public view returns(uint256) {\\n        return IERC20(_token).allowance(_owner, _spender);\\n    }\\n}\\n\\n/*****************************\\n *           Base\\n *****************************/\\ncontract BaseHelper {\\n    IFlybyMarketFactory public market;\\n    IFlybyTokenFactory public tokenFactory;\\n    address public launcher;\\n    \\n    FLYBYAccessControls public accessControls;\\n\\n    function setContracts(\\n        address _tokenFactory,\\n        address _market,\\n        address _launcher\\n    ) public {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"FLYBYHelper: Sender must be Admin\\\"\\n        );\\n        if (_market != address(0)) {\\n            market = IFlybyMarketFactory(_market);\\n        }\\n        if (_tokenFactory != address(0)) {\\n            tokenFactory = IFlybyTokenFactory(_tokenFactory);\\n        }\\n        if (_launcher != address(0)) {\\n            launcher = _launcher;\\n        }\\n    }\\n}\\n\\n/******************************\\n *           Markets\\n ******************************/\\ninterface IBaseAuction {\\n    function getBaseInformation() external view returns (\\n            address auctionToken,\\n            uint64 startTime,\\n            uint64 endTime,\\n            bool finalized\\n        );\\n}\\n\\ninterface IFlybyMarketFactory {\\n    function getMarketTemplateId(address _auction) external view returns(uint64);\\n    function getMarkets() external view returns(address[] memory);\\n    function numberOfAuctions() external view returns(uint256);\\n    function auctions(uint256) external view returns(address);\\n}\\n\\ninterface IFlybyMarket {\\n    function paymentCurrency() external view returns (address) ;\\n    function auctionToken() external view returns (address) ;\\n    function marketPrice() external view returns (uint128, uint128);\\n    function marketInfo()\\n        external\\n        view\\n        returns (\\n        uint64 startTime,\\n        uint64 endTime,\\n        uint128 totalTokens\\n        );\\n    function auctionSuccessful() external view returns (bool);\\n    function commitments(address user) external view returns (uint256);\\n    function claimed(address user) external view returns (uint256);\\n    function tokensClaimable(address user) external view returns (uint256);\\n    function hasAdminRole(address user) external view returns (bool);\\n}\\n\\ninterface ICrowdsale is IFlybyMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IDutchAuction is IFlybyMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IBatchAuction is IFlybyMarket {\\n    function marketStatus() external view returns(\\n        uint256 commitmentsTotal,\\n        uint256 minimumCommitmentAmount,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IHyperbolicAuction is IFlybyMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\n\\ncontract MarketHelper is BaseHelper, TokenHelper, DocumentHepler {\\n\\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    struct CrowdsaleInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint128 commitmentsTotal;\\n        uint128 totalTokens;\\n        uint128 rate;\\n        uint128 goal;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct DutchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint128 startPrice;\\n        uint128 minimumPrice;\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct BatchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint256 commitmentsTotal;\\n        uint256 minimumCommitmentAmount;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct HyperbolicAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint128 minimumPrice;\\n        uint128 alpha;\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct MarketBaseInfo {\\n        address addr;\\n        uint64 templateId;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        TokenInfo tokenInfo;\\n    }\\n\\n    struct PLInfo {\\n        TokenInfo token0;\\n        TokenInfo token1;\\n        address pairToken;\\n        address operator;\\n        uint256 locktime;\\n        uint256 unlock;\\n        uint256 deadline;\\n        uint256 launchwindow;\\n        uint256 expiry;\\n        uint256 liquidityAdded;\\n        uint256 launched;\\n    }\\n\\n    struct UserMarketInfo {\\n        uint256 commitments;\\n        uint256 tokensClaimable;\\n        uint256 claimed;\\n        bool isAdmin;\\n    }\\n\\n    function getMarkets(\\n        uint256 pageSize,\\n        uint256 pageNbr,\\n        uint256 offset\\n    ) public view returns (MarketBaseInfo[] memory) {\\n        uint256 marketsLength = market.numberOfAuctions();\\n        uint256 startIdx = (pageNbr * pageSize) + offset;\\n        uint256 endIdx = startIdx + pageSize;\\n        MarketBaseInfo[] memory infos;\\n        if (endIdx > marketsLength) {\\n            endIdx = marketsLength;\\n        }\\n        if(endIdx < startIdx) {\\n            return infos;\\n        }\\n        infos = new MarketBaseInfo[](endIdx - startIdx);\\n\\n        for (uint256 marketIdx = 0; marketIdx + startIdx < endIdx; marketIdx++) {\\n            address marketAddress = market.auctions(marketIdx + startIdx);\\n            infos[marketIdx] = _getMarketInfo(marketAddress);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getMarkets(\\n        uint256 pageSize,\\n        uint256 pageNbr\\n    ) public view returns (MarketBaseInfo[] memory) {\\n        return getMarkets(pageSize, pageNbr, 0);\\n    }\\n\\n    function getMarkets() public view returns (MarketBaseInfo[] memory) {\\n        address[] memory markets = market.getMarkets();\\n        MarketBaseInfo[] memory infos = new MarketBaseInfo[](markets.length);\\n\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            MarketBaseInfo memory marketInfo = _getMarketInfo(markets[i]);\\n            infos[i] = marketInfo;\\n        }\\n\\n        return infos;\\n    }\\n\\n    function _getMarketInfo(address _marketAddress) private view returns (MarketBaseInfo memory marketInfo) {\\n            uint64 templateId = market.getMarketTemplateId(_marketAddress);\\n            address auctionToken;\\n            uint64 startTime;\\n            uint64 endTime;\\n            bool finalized;\\n            (auctionToken, startTime, endTime, finalized) = IBaseAuction(_marketAddress)\\n                .getBaseInformation();\\n            TokenInfo memory tokenInfo = getTokenInfo(auctionToken);\\n\\n            marketInfo.addr = _marketAddress;\\n            marketInfo.templateId = templateId;\\n            marketInfo.startTime = startTime;\\n            marketInfo.endTime = endTime;\\n            marketInfo.finalized = finalized;\\n            marketInfo.tokenInfo = tokenInfo;  \\n    }\\n\\n    function getCrowdsaleInfo(address _crowdsale) public view returns (CrowdsaleInfo memory) {\\n        ICrowdsale crowdsale = ICrowdsale(_crowdsale);\\n        CrowdsaleInfo memory info;\\n\\n        info.addr = address(crowdsale);\\n        (info.commitmentsTotal, info.finalized, info.usePointList) = crowdsale.marketStatus();\\n        (info.startTime, info.endTime, info.totalTokens) = crowdsale.marketInfo();\\n        (info.rate, info.goal) = crowdsale.marketPrice();\\n        (info.auctionSuccessful) = crowdsale.auctionSuccessful();\\n        info.tokenInfo = getTokenInfo(crowdsale.auctionToken());\\n\\n        address paymentCurrency = crowdsale.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n\\n        info.documents = getDocuments(_crowdsale);\\n\\n        return info;\\n    }\\n\\n    function getDutchAuctionInfo(address payable _dutchAuction) public view returns (DutchAuctionInfo memory)\\n    {\\n        IDutchAuction dutchAuction = IDutchAuction(_dutchAuction);\\n        DutchAuctionInfo memory info;\\n\\n        info.addr = address(dutchAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = dutchAuction.marketInfo();\\n        (info.startPrice, info.minimumPrice) = dutchAuction.marketPrice();\\n        (info.auctionSuccessful) = dutchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.finalized,\\n            info.usePointList\\n        ) = dutchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(dutchAuction.auctionToken());\\n\\n        address paymentCurrency = dutchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_dutchAuction);\\n\\n        return info;\\n    }\\n\\n    function getBatchAuctionInfo(address payable _batchAuction) public view returns (BatchAuctionInfo memory) \\n    {\\n        IBatchAuction batchAuction = IBatchAuction(_batchAuction);\\n        BatchAuctionInfo memory info;\\n        \\n        info.addr = address(batchAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = batchAuction.marketInfo();\\n        (info.auctionSuccessful) = batchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.minimumCommitmentAmount,\\n            info.finalized,\\n            info.usePointList\\n        ) = batchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(batchAuction.auctionToken());\\n        address paymentCurrency = batchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_batchAuction);\\n\\n        return info;\\n    }\\n\\n    function getHyperbolicAuctionInfo(address payable _hyperbolicAuction) public view returns (HyperbolicAuctionInfo memory)\\n    {\\n        IHyperbolicAuction hyperbolicAuction = IHyperbolicAuction(_hyperbolicAuction);\\n        HyperbolicAuctionInfo memory info;\\n\\n        info.addr = address(hyperbolicAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = hyperbolicAuction.marketInfo();\\n        (info.minimumPrice, info.alpha) = hyperbolicAuction.marketPrice();\\n        (info.auctionSuccessful) = hyperbolicAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.finalized,\\n            info.usePointList\\n        ) = hyperbolicAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(hyperbolicAuction.auctionToken());\\n        \\n        address paymentCurrency = hyperbolicAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_hyperbolicAuction);\\n\\n        return info;\\n    }\\n\\n    function getUserMarketInfo(address _action, address _user) public view returns(UserMarketInfo memory userInfo) {\\n        IFlybyMarket market = IFlybyMarket(_action);\\n        userInfo.commitments = market.commitments(_user);\\n        userInfo.tokensClaimable = market.tokensClaimable(_user);\\n        userInfo.claimed = market.claimed(_user);\\n        userInfo.isAdmin = market.hasAdminRole(_user);\\n    }\\n\\n    function _getETHInfo() private pure returns(TokenInfo memory token) {\\n            token.addr = ETH_ADDRESS;\\n            token.name = \\\"ETHEREUM\\\";\\n            token.symbol = \\\"ETH\\\";\\n            token.decimals = 18;\\n    }\\n\\n}\\n\\ncontract FLYBYHelper is MarketHelper {\\n\\n    constructor(\\n        address _accessControls,\\n        address _tokenFactory,\\n        address _market,\\n        address _launcher\\n    ) { \\n        require(_accessControls != address(0));\\n        accessControls = FLYBYAccessControls(_accessControls);\\n        tokenFactory = IFlybyTokenFactory(_tokenFactory);\\n        market = IFlybyMarketFactory(_market);\\n        launcher = _launcher;\\n    }\\n\\n    function getTokens() public view returns(TokenInfo[] memory) {\\n        address[] memory tokens = tokenFactory.getTokens();\\n        TokenInfo[] memory infos = getTokensInfo(tokens);\\n\\n        infos = getTokensInfo(tokens);\\n\\n        return infos;\\n    }\\n\\n    function getTokens(\\n        uint256 pageSize,\\n        uint256 pageNbr,\\n        uint256 offset\\n    ) public view returns(TokenInfo[] memory) {\\n        uint256 tokensLength = tokenFactory.numberOfTokens();\\n\\n        uint256 startIdx = (pageNbr * pageSize) + offset;\\n        uint256 endIdx = startIdx + pageSize;\\n        TokenInfo[] memory infos;\\n        if (endIdx > tokensLength) {\\n            endIdx = tokensLength;\\n        }\\n        if(endIdx < startIdx) {\\n            return infos;\\n        }\\n        infos = new TokenInfo[](endIdx - startIdx);\\n\\n        for (uint256 tokenIdx = 0; tokenIdx + startIdx < endIdx; tokenIdx++) {\\n            address tokenAddress = tokenFactory.tokens(tokenIdx + startIdx);\\n            infos[tokenIdx] = getTokenInfo(tokenAddress);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getTokens(\\n        uint256 pageSize,\\n        uint256 pageNbr\\n    ) public view returns(TokenInfo[] memory) {\\n        return getTokens(pageSize, pageNbr, 0);\\n    }\\n}\",\"keccak256\":\"0x071200de38b398eae6a050cfc4eed83e4f3ac89f273a6b425ca2ec8e89164060\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/EnumerableSet.sol\\\";\\n\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x70a4ac51d4857ce35422d73f70cbec83f00f568e1f95a804dcfbbe509de5a82c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xe0521887b553a6c5bef0acd727645ff69535b60fe7c5947e40f19391307d70d2\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x01c748c0e9f9c425f95c8f0e7eb6625675a4fde41b7f5444bcf6b894b375e72c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d7b38038062002d7b8339810160408190526200003491620000b9565b6001600160a01b0384166200004857600080fd5b600380546001600160a01b039586166001600160a01b031991821617909155600180549486169482169490941790935560008054928516928416929092179091556002805491909316911617905562000115565b80516001600160a01b0381168114620000b457600080fd5b919050565b60008060008060808587031215620000cf578384fd5b620000da856200009c565b9350620000ea602086016200009c565b9250620000fa604086016200009c565b91506200010a606086016200009c565b905092959194509250565b612c5680620001256000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636306377d116100ad578063927da10511610071578063927da10514610298578063aa6ca808146102b8578063b3066d49146102c0578063e77772fe146102d5578063ec2c9016146102dd5761012c565b80636306377d1461013157806364d414bf14610262578063748365ef1461027557806380968d481461027d57806380f55605146102905761012c565b8063372cfb93116100f4578063372cfb93146101cf57806338d9893b146101ef5780633c74720c1461020f57806346a0fe471461022f578063494cfc6c1461024f5761012c565b8063156ec6811461013157806316eebd1e1461015a578063193d13621461016f5780631f69565f1461018f57806327f50a2d146101af575b600080fd5b61014461013f366004611fbd565b6102e5565b6040516101519190612a9b565b60405180910390f35b61016261069c565b604051610151919061265e565b61018261017d366004611fbd565b6106ab565b6040516101519190612877565b6101a261019d366004611fbd565b610999565b6040516101519190612aae565b6101c26101bd366004611fbd565b610b2f565b604051610151919061268c565b6101e26101dd366004611ff5565b610dc8565b6040516101519190612ac1565b6102026101fd36600461235e565b610fde565b604051610151919061271a565b61022261021d366004611fbd565b611206565b6040516101519190612984565b61024261023d3660046120cc565b61149b565b60405161015191906127c3565b61024261025d366004612311565b611583565b61024261027036600461235e565b61158d565b6101626117b4565b61020261028b366004612311565b6117c3565b6101626117d1565b6102ab6102a636600461202d565b6117e0565b6040516101519190612aee565b610242611869565b6102d36102ce36600461202d565b611916565b005b610162611a41565b610202611a50565b6102ed611d88565b816102f6611d88565b6001600160a01b0382168082526040805162018df760e91b8152905163031bee0091600480820192606092909190829003018186803b15801561033857600080fd5b505afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037091906123a3565b6001600160801b031660808401526001600160401b0390811660608401521660408083019190915280516308b42a7160e31b815281516001600160a01b038516926345a153889260048082019391829003018186803b1580156103d257600080fd5b505afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a91906122c7565b6001600160801b0390811660c08401521660a0820152604080516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561046057600080fd5b505afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049891906121f5565b15156101408201526040805163e0e081d760e01b815290516001600160a01b0384169163e0e081d7916004808301926060929190829003018186803b1580156104e057600080fd5b505afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105189190612285565b151561012084015215156101008301526001600160801b031660e0820152604080516304cfed9960e51b815290516105b3916001600160a01b038516916399fdb32091600480820192602092909190829003018186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d9190611fd9565b8161016001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190611fd9565b9050610639611e08565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561066d57610666611bc0565b9050610679565b61067682610999565b90505b610180830181905261068a86610b2f565b6101a08401525090925050505b919050565b6002546001600160a01b031681565b6106b3611e39565b816106bc611e39565b6001600160a01b0382168082526040805162018df760e91b8152905163031bee0091600480820192606092909190829003018186803b1580156106fe57600080fd5b505afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073691906123a3565b6001600160801b031660808401526001600160401b0390811660608401521660408083019190915280516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d491906121f5565b15156101208201526040805163e0e081d760e01b815290516001600160a01b0384169163e0e081d7916004808301926080929190829003018186803b15801561081c57600080fd5b505afa158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108549190612332565b1515610100850152151560e084015260c083015260a0820152604080516304cfed9960e51b815290516108b2916001600160a01b038516916399fdb32091600480820192602092909190829003018186803b15801561057b57600080fd5b8161014001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f657600080fd5b505afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190611fd9565b9050610938611e08565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561096c57610965611bc0565b9050610978565b61097582610999565b90505b610160830181905261098986610b2f565b6101808401525090949350505050565b6109a1611e08565b6109a9611e08565b6001600160a01b038316808252604080516306fdde0360e01b815290518592916306fdde03916004808301926000929190829003018186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2a919081019061220f565b8260400181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aa7919081019061220f565b8260600181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae857600080fd5b505afa158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2091906123dc565b60ff1660208301525092915050565b606060008290506000816001600160a01b0316633d1c22736040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba991906122f9565b90506000816001600160401b03811115610bd357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c0c57816020015b610bf9611e97565b815260200190600190039081610bf15790505b50905060005b82811015610dbf5760405163635aa3f360e11b81526000906001600160a01b0386169063c6b547e690610c49908590600401612aee565b60006040518083038186803b158015610c6157600080fd5b505afa158015610c75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9d919081019061220f565b604051631f32da9960e21b81529091506001600160a01b03861690637ccb6a6490610ccc908490600401612823565b60006040518083038186803b158015610ce457600080fd5b505afa158015610cf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d209190810190612241565b848481518110610d4057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001858581518110610d6b57634e487b7160e01b600052603260045260246000fd5b602002602001015160400182815250829052505080838381518110610da057634e487b7160e01b600052603260045260246000fd5b6020908102919091010151525080610db781612bc1565b915050610c12565b50949350505050565b610dd0611eb8565b60405163e8fcf72360e01b815283906001600160a01b0382169063e8fcf72390610dfe90869060040161265e565b60206040518083038186803b158015610e1657600080fd5b505afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e91906122f9565b8252604051634dc80e1560e01b81526001600160a01b03821690634dc80e1590610e7c90869060040161265e565b60206040518083038186803b158015610e9457600080fd5b505afa158015610ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecc91906122f9565b602083015260405163c884ef8360e01b81526001600160a01b0382169063c884ef8390610efd90869060040161265e565b60206040518083038186803b158015610f1557600080fd5b505afa158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d91906122f9565b6040808401919091525163c395fcb360e01b81526001600160a01b0382169063c395fcb390610f8090869060040161265e565b60206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd091906121f5565b151560608301525092915050565b600080546040805163286cea3960e11b81529051606093926001600160a01b0316916350d9d472916004808301926020929190829003018186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d91906122f9565b905060008361106c8787612b5b565b6110769190612b43565b905060006110848783612b43565b9050606083821115611094578391505b828210156110a75793506111ff92505050565b6110b18383612b7a565b6001600160401b038111156110d657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561110f57816020015b6110fc611ee2565b8152602001906001900390816110f45790505b50905060005b826111208583612b43565b10156111f857600080546001600160a01b031663571a26a06111428785612b43565b6040518263ffffffff1660e01b815260040161115e9190612aee565b60206040518083038186803b15801561117657600080fd5b505afa15801561118a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ae9190611fd9565b90506111b981611c30565b8383815181106111d957634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806111f090612bc1565b915050611115565b5093505050505b9392505050565b61120e611d88565b81611217611d88565b6001600160a01b0382168082526040805163e0e081d760e01b8152905163e0e081d791600480820192606092909190829003018186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112929190612285565b151561012084015215156101008301526001600160801b0316604080830191909152805162018df760e91b815290516001600160a01b0384169163031bee00916004808301926060929190829003018186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132991906123a3565b6001600160801b031660608401526001600160401b0390811660e08401521660c0820152604080516308b42a7160e31b815281516001600160a01b038516926345a153889260048082019391829003018186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c191906122c7565b6001600160801b0390811660a0840152166080820152604080516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f91906121f5565b816101400190151590811515815250506105b3826001600160a01b03166399fdb3206040518163ffffffff1660e01b815260040160206040518083038186803b15801561057b57600080fd5b6060600082516001600160401b038111156114c657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114ff57816020015b6114ec611e08565b8152602001906001900390816114e45790505b50905060005b835181101561157c5761153e84828151811061153157634e487b7160e01b600052603260045260246000fd5b6020026020010151610999565b82828151811061155e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061157490612bc1565b915050611505565b5092915050565b60606111ff838360005b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663f9f16ef26040518163ffffffff1660e01b815260040160206040518083038186803b1580156115df57600080fd5b505afa1580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161791906122f9565b90506000836116268787612b5b565b6116309190612b43565b9050600061163e8783612b43565b905060608382111561164e578391505b828210156116615793506111ff92505050565b61166b8383612b7a565b6001600160401b0381111561169057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116c957816020015b6116b6611e08565b8152602001906001900390816116ae5790505b50905060005b826116da8583612b43565b10156111f8576001546000906001600160a01b0316634f64b2be6116fe8785612b43565b6040518263ffffffff1660e01b815260040161171a9190612aee565b60206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190611fd9565b905061177581610999565b83838151811061179557634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806117ac90612bc1565b9150506116cf565b6003546001600160a01b031681565b60606111ff83836000610fde565b6000546001600160a01b031681565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e906118119086908690600401612672565b60206040518083038186803b15801561182957600080fd5b505afa15801561183d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186191906122f9565b949350505050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118f79190810190612169565b905060006119048261149b565b905061190f8261149b565b9250505090565b60035460405163c395fcb360e01b81526001600160a01b039091169063c395fcb39061194690339060040161265e565b60206040518083038186803b15801561195e57600080fd5b505afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199691906121f5565b6119bb5760405162461bcd60e51b81526004016119b290612836565b60405180910390fd5b6001600160a01b038216156119e657600080546001600160a01b0319166001600160a01b0384161790555b6001600160a01b03831615611a1157600180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03811615611a3c57600280546001600160a01b0319166001600160a01b0383161790555b505050565b6001546001600160a01b031681565b6000805460408051637616480b60e11b81529051606093926001600160a01b03169163ec2c90169160048083019286929190829003018186803b158015611a9657600080fd5b505afa158015611aaa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad29190810190612169565b9050600081516001600160401b03811115611afd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b3657816020015b611b23611ee2565b815260200190600190039081611b1b5790505b50905060005b8251811015611bb9576000611b77848381518110611b6a57634e487b7160e01b600052603260045260246000fd5b6020026020010151611c30565b905080838381518110611b9a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080611bb190612bc1565b915050611b3c565b5091505090565b611bc8611e08565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526040805180820182526008815267455448455245554d60c01b602080830191909152828401919091528151808301909252600382526208aa8960eb1b82820152606083019190915260129082015290565b611c38611ee2565b6000805460405163b034349360e01b81526001600160a01b039091169063b034349390611c6990869060040161265e565b60206040518083038186803b158015611c8157600080fd5b505afa158015611c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb99190612389565b9050600080600080866001600160a01b031663314148e26040518163ffffffff1660e01b815260040160806040518083038186803b158015611cfa57600080fd5b505afa158015611d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d329190612077565b929650909450925090506000611d4785610999565b6001600160a01b039098168752506001600160401b03948516602087015291841660408601529092166060840152501515608082015260a081019190915290565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526101608101611dee611e08565b8152602001611dfb611e08565b8152602001606081525090565b604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101408101611dee611e08565b60405180606001604052806060815260200160608152602001600081525090565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a08101611f19611e08565b905290565b8051801515811461069757600080fd5b600082601f830112611f3e578081fd5b81516001600160401b03811115611f5757611f57612bf2565b611f6a601f8201601f1916602001612af7565b818152846020838601011115611f7e578283fd5b611861826020830160208701612b91565b80516001600160801b038116811461069757600080fd5b80516001600160401b038116811461069757600080fd5b600060208284031215611fce578081fd5b81356111ff81612c08565b600060208284031215611fea578081fd5b81516111ff81612c08565b60008060408385031215612007578081fd5b823561201281612c08565b9150602083013561202281612c08565b809150509250929050565b600080600060608486031215612041578081fd5b833561204c81612c08565b9250602084013561205c81612c08565b9150604084013561206c81612c08565b809150509250925092565b6000806000806080858703121561208c578081fd5b845161209781612c08565b93506120a560208601611fa6565b92506120b360408601611fa6565b91506120c160608601611f1e565b905092959194509250565b600060208083850312156120de578182fd5b82356001600160401b038111156120f3578283fd5b8301601f81018513612103578283fd5b803561211661211182612b20565b612af7565b8181528381019083850185840285018601891015612132578687fd5b8694505b8385101561215d57803561214981612c08565b835260019490940193918501918501612136565b50979650505050505050565b6000602080838503121561217b578182fd5b82516001600160401b03811115612190578283fd5b8301601f810185136121a0578283fd5b80516121ae61211182612b20565b81815283810190838501858402850186018910156121ca578687fd5b8694505b8385101561215d5780516121e181612c08565b8352600194909401939185019185016121ce565b600060208284031215612206578081fd5b6111ff82611f1e565b600060208284031215612220578081fd5b81516001600160401b03811115612235578182fd5b61186184828501611f2e565b60008060408385031215612253578182fd5b82516001600160401b03811115612268578283fd5b61227485828601611f2e565b925050602083015190509250929050565b600080600060608486031215612299578081fd5b6122a284611f8f565b92506122b060208501611f1e565b91506122be60408501611f1e565b90509250925092565b600080604083850312156122d9578182fd5b6122e283611f8f565b91506122f060208401611f8f565b90509250929050565b60006020828403121561230a578081fd5b5051919050565b60008060408385031215612323578182fd5b50508035926020909101359150565b60008060008060808587031215612347578182fd5b84519350602085015192506120b360408601611f1e565b600080600060608486031215612372578081fd5b505081359360208301359350604090920135919050565b60006020828403121561239a578081fd5b6111ff82611fa6565b6000806000606084860312156123b7578081fd5b6123c084611fa6565b92506123ce60208501611fa6565b91506122be60408501611f8f565b6000602082840312156123ed578081fd5b815160ff811681146111ff578182fd5b6001600160a01b03169052565b60008282518085526020808601955080818302840101818601855b8481101561248457601f1986840301895281516060815181865261244b82870182612497565b91505085820151858203878701526124638282612497565b60409384015196909301959095525098840198925090830190600101612425565b5090979650505050505050565b15159052565b600081518084526124af816020860160208601612b91565b601f01601f19169290920160200192915050565b60006101c06124d38484516123fd565b60208301516124e560208601826123fd565b5060408301516124f86040860182612651565b50606083015161250b6060860182612651565b50608083015161251e6080860182612644565b5060a083015161253160a0860182612644565b5060c083015161254460c0860182612644565b5060e083015161255760e0860182612644565b506101008084015161256b82870182612491565b50506101208084015161258082870182612491565b50506101408084015161259582870182612491565b50506101608084015182828701526125af838701826125f1565b9250505061018080840151858303828701526125cb83826125f1565b925050506101a080840151858303828701526125e7838261240a565b9695505050505050565b600060018060a01b038251168352602082015160208401526040820151608060408501526126226080850182612497565b90506060830151848203606086015261263b8282612497565b95945050505050565b6001600160801b03169052565b6001600160401b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561270c57603f198984030185528151606081518186526126d682870182612497565b915050888201518582038a8701526126ee8282612497565b928901519589019590955250948701949250908601906001016126b0565b509098975050505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561270c57888303603f19018552815180516001600160a01b03168452878101516001600160401b0390811689860152878201518116888601526060808301519091169085015260808082015115159085015260a09081015160c0918501829052906127af818601836125f1565b96890196945050509086019060010161273e565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561281657603f198886030184526128048583516125f1565b945092850192908501906001016127e8565b5092979650505050505050565b6000602082526111ff6020830184612497565b60208082526021908201527f464c59425948656c7065723a2053656e646572206d7573742062652041646d696040820152603760f91b606082015260800190565b60006020825261288b6020830184516123fd565b602083015161289d60408401826123fd565b5060408301516128b06060840182612651565b5060608301516128c36080840182612651565b5060808301516128d660a0840182612644565b5060a083015160c083015260c083015160e083015260e08301516101006128ff81850183612491565b840151905061012061291384820183612491565b840151905061014061292784820183612491565b808501519150506101a061016081818601526129476101c08601846125f1565b9250808601519050601f1961018081878603018188015261296885846125f1565b9088015187820390920184880152935090506125e7838261240a565b6000602082526129986020830184516123fd565b60208301516129aa60408401826123fd565b5060408301516129bd6060840182612644565b5060608301516129d06080840182612644565b5060808301516129e360a0840182612644565b5060a08301516129f660c0840182612644565b5060c0830151612a0960e0840182612651565b5060e0830151610100612a1e81850183612651565b8401519050610120612a3284820183612491565b8401519050610140612a4684820183612491565b8401519050610160612a5a84820183612491565b808501519150506101c06101808181860152612a7a6101e08601846125f1565b9250808601519050601f196101a081878603018188015261296885846125f1565b6000602082526111ff60208301846124c3565b6000602082526111ff60208301846125f1565b81518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b90815260200190565b6040518181016001600160401b0381118282101715612b1857612b18612bf2565b604052919050565b60006001600160401b03821115612b3957612b39612bf2565b5060209081020190565b60008219821115612b5657612b56612bdc565b500190565b6000816000190483118215151615612b7557612b75612bdc565b500290565b600082821015612b8c57612b8c612bdc565b500390565b60005b83811015612bac578181015183820152602001612b94565b83811115612bbb576000848401525b50505050565b6000600019821415612bd557612bd5612bdc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612c1d57600080fd5b5056fea2646970667358221220a8e8857e5b6fd42229a5f4aa4c4841cf6094fe8b19ba10ed900d7706b572fde564736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9640,
        "contract": "contracts/Helper/FLYBYHelper.sol:FLYBYHelper",
        "label": "market",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFlybyMarketFactory)9746"
      },
      {
        "astId": 9643,
        "contract": "contracts/Helper/FLYBYHelper.sol:FLYBYHelper",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFlybyTokenFactory)9506"
      },
      {
        "astId": 9645,
        "contract": "contracts/Helper/FLYBYHelper.sol:FLYBYHelper",
        "label": "launcher",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9648,
        "contract": "contracts/Helper/FLYBYHelper.sol:FLYBYHelper",
        "label": "accessControls",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(FLYBYAccessControls)208"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(FLYBYAccessControls)208": {
        "encoding": "inplace",
        "label": "contract FLYBYAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IFlybyMarketFactory)9746": {
        "encoding": "inplace",
        "label": "contract IFlybyMarketFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IFlybyTokenFactory)9506": {
        "encoding": "inplace",
        "label": "contract IFlybyTokenFactory",
        "numberOfBytes": "20"
      }
    }
  }
}