{
  "address": "0x53B552bd873c8B4E5D623C0de3eCeB7028D42597",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "AddedCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AdminRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AdminRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        }
      ],
      "name": "AuctionPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AuctionWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "DocumentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "DocumentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MinterRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MinterRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OperatorRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OperatorRoleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SmartContractRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SmartContractRoleRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMART_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addOperatorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addSmartContractRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSuccessful",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitment",
          "type": "uint256"
        }
      ],
      "name": "calculateCommitment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "committed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "readAndAgreedToMarketParticipationAgreement",
          "type": "bool"
        }
      ],
      "name": "commitTokensFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "enableList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeTimeExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDocuments",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseInformation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pointList",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getCrowdsaleInitData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getDocument",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDocumentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDocumentName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasMinterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasOperatorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasSmartContractRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initAccessControls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pointList",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "initCrowdsale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "totalTokens",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketParticipationAgreement",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "goal",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketStatus",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "commitmentsTotal",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "finalized",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usePointList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketTemplate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "removeDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeOperatorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeSmartContractRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        }
      ],
      "name": "setAuctionPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setAuctionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setAuctionWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "setDocument",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_name",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_data",
          "type": "string[]"
        }
      ],
      "name": "setDocuments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_list",
          "type": "address"
        }
      ],
      "name": "setList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "tokensClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimerCommitment",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe0e10069130f0e153aaa9ea38cd18fc596cce6ceb9a81f61af565e9cae69d53f",
  "receipt": {
    "to": null,
    "from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
    "contractAddress": "0x53B552bd873c8B4E5D623C0de3eCeB7028D42597",
    "transactionIndex": 1,
    "gasUsed": "4511618",
    "logsBloom": "0x
    "blockHash": "0xa6164b6cc636ca84d495140f407383563cacb78263a5de5ec6650d5823041577",
    "transactionHash": "0xe0e10069130f0e153aaa9ea38cd18fc596cce6ceb9a81f61af565e9cae69d53f",
    "logs": [],
    "blockNumber": 14440441,
    "cumulativeGasUsed": "4769638",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0bb2481c0a33b756a35d8c75b9e1dee6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"AddedCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AdminRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AdminRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"AuctionPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AuctionWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MinterRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MinterRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OperatorRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OperatorRoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SmartContractRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SmartContractRoleRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMART_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSmartContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitment\",\"type\":\"uint256\"}],\"name\":\"calculateCommitment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"committed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readAndAgreedToMarketParticipationAgreement\",\"type\":\"bool\"}],\"name\":\"commitTokensFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeTimeExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pointList\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getCrowdsaleInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDocumentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDocumentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasMinterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasOperatorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasSmartContractRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pointList\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"initCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketParticipationAgreement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"goal\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"removeDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeOperatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSmartContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"}],\"name\":\"setAuctionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setAuctionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setAuctionWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_name\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_data\",\"type\":\"string[]\"}],\"name\":\"setDocuments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_list\",\"type\":\"address\"}],\"name\":\"setList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerCommitment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdminRole(address)\":{\"details\":\"The sender must have the admin role.\",\"params\":{\"_address\":\"EOA or contract receiving the new role.\"}},\"addMinterRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"addOperatorRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"addSmartContractRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract receiving the new role\"}},\"auctionEnded()\":{\"returns\":{\"_0\":\"auctionEnded True if sold out or time has ended.\"}},\"auctionSuccessful()\":{\"returns\":{\"_0\":\"auctionSuccessful True if the commitmentsTotal is equal or higher than goal.\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"},\"returns\":{\"results\":\"An array with the returned data of each function call, mapped one-to-one to `calls`. F1: External is ok here because this is the batch function, adding it to a batch makes no sense F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value C3: The length of the loop is fully under user control, so can't be exploited C7: Delegatecall is only used on the same contract, so it's safe\",\"successes\":\"An array indicating the success of a call, mapped one-to-one to `calls`.\"}},\"calculateCommitment(uint256)\":{\"params\":{\"_commitment\":\"Number of tokens to be commited.\"},\"returns\":{\"committed\":\"The amount able to be purchased during a sale.\"}},\"cancelAuction()\":{\"details\":\"Admin can cancel the auction before it starts\"},\"commitEth(address,bool)\":{\"details\":\"low level token purchase with ETH ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it should not be called by another `nonReentrant` function.\",\"params\":{\"_beneficiary\":\"Recipient of the token purchase.\"}},\"commitTokens(uint256,bool)\":{\"params\":{\"_amount\":\"Amount of tokens to commit.\"}},\"commitTokensFrom(address,uint256,bool)\":{\"details\":\"Users must approve contract prior to committing tokens to auction.\",\"params\":{\"_amount\":\"Amount of approved ERC20 tokens.\",\"_from\":\"User ERC20 address.\"}},\"finalize()\":{\"details\":\"Must be called after crowdsale ends, to do some extra finalization work. Calls the contracts finalization function.\"},\"finalizeTimeExpired()\":{\"returns\":{\"_0\":\"True if 7 days have passed since the end of the auction\"}},\"finalized()\":{\"returns\":{\"_0\":\"bool True if sale has been finalised.\"}},\"getAllDocuments()\":{\"returns\":{\"_0\":\"string List of all documents names present in the contract.\"}},\"getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)\":{\"params\":{\"_admin\":\"Address that can finalize crowdsale.\",\"_endTime\":\"Crowdsale end time.\",\"_funder\":\"The address that funds the token for crowdsale.\",\"_goal\":\"Minimum amount of funds to be raised in weis or tokens.\",\"_paymentCurrency\":\"The currency the crowdsale accepts for payment. Can be ETH or token address.\",\"_pointList\":\"Address that will manage auction approvals.\",\"_rate\":\"Number of token units a buyer gets per wei or token.\",\"_startTime\":\"Crowdsale start time.\",\"_token\":\"Address of the token being sold.\",\"_totalTokens\":\"The total number of tokens to sell in crowdsale.\",\"_wallet\":\"Address where collected funds will be forwarded to.\"},\"returns\":{\"_data\":\"All the data in bytes format.\"}},\"getDocument(string)\":{\"params\":{\"_name\":\"Name of the document\"},\"returns\":{\"_0\":\"string The data associated with the document.\",\"_1\":\"uint256 the timestamp at which the document was last modified.\"}},\"getDocumentCount()\":{\"returns\":{\"_0\":\"uint256 Count of the document names present in the contract.\"}},\"getDocumentName(uint256)\":{\"returns\":{\"_0\":\"string Name of the document name.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAdminRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked.\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not.\"}},\"hasMinterRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"hasOperatorRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasSmartContractRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"initAccessControls(address)\":{\"params\":{\"_admin\":\"Admins address.\"}},\"initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)\":{\"details\":\"Init function.\",\"params\":{\"_admin\":\"Address that can finalize auction.\",\"_endTime\":\"Crowdsale end time.\",\"_funder\":\"The address that funds the token for crowdsale.\",\"_goal\":\"Minimum amount of funds to be raised in weis or tokens.\",\"_paymentCurrency\":\"The currency the crowdsale accepts for payment. Can be ETH or token address.\",\"_pointList\":\"Address that will manage auction approvals.\",\"_rate\":\"Number of token units a buyer gets per wei or token.\",\"_startTime\":\"Crowdsale start time.\",\"_token\":\"Address of the token being sold.\",\"_totalTokens\":\"The total number of tokens to sell in crowdsale.\",\"_wallet\":\"Address where collected funds will be forwarded to.\"}},\"initMarket(bytes)\":{\"params\":{\"_data\":\"Encoded data for initialization.\"}},\"isOpen()\":{\"returns\":{\"_0\":\"isOpen True if the crowdsale is open, false otherwise.\"}},\"marketParticipationAgreement()\":{\"details\":\"Attribution to the awesome delta.financial contracts\"},\"removeAdminRole(address)\":{\"details\":\"The sender must have the admin role.\",\"params\":{\"_address\":\"EOA or contract affected.\"}},\"removeMinterRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"removeOperatorRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"removeSmartContractRole(address)\":{\"details\":\"The sender must have the admin role\",\"params\":{\"_address\":\"EOA or contract affected\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAuctionPrice(uint256,uint256)\":{\"params\":{\"_goal\":\"Minimum amount raised and goal for the auction.\",\"_rate\":\"Price per token.\"}},\"setAuctionTime(uint256,uint256)\":{\"params\":{\"_endTime\":\"Auction end time.\",\"_startTime\":\"Auction start time.\"}},\"setAuctionWallet(address)\":{\"params\":{\"_wallet\":\"Auction wallet is where funds will be sent.\"}},\"tokensClaimable(address)\":{\"returns\":{\"claimerCommitment\":\"How many tokens the user is able to claim.\"}},\"withdrawTokens(address)\":{\"details\":\"Withdraw tokens only after crowdsale ends.\",\"params\":{\"beneficiary\":\"Whose tokens will be withdrawn.\"}}},\"stateVariables\":{\"marketTemplate\":{\"details\":\"For different marketplace types, this must be incremented.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MinterRoleGranted(address,address)\":{\"notice\":\"Events for adding and removing various roles\"}},\"kind\":\"user\",\"methods\":{\"MINTER_ROLE()\":{\"notice\":\"Role definitions\"},\"addAdminRole(address)\":{\"notice\":\"Grants the admin role to an address.\"},\"addMinterRole(address)\":{\"notice\":\"Grants the minter role to an address\"},\"addOperatorRole(address)\":{\"notice\":\"Grants the operator role to an address\"},\"addSmartContractRole(address)\":{\"notice\":\"Grants the smart contract role to an address\"},\"auctionEnded()\":{\"notice\":\"Checks if the sale has ended.\"},\"auctionSuccessful()\":{\"notice\":\"Checks if the sale minimum amount was raised.\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"calculateCommitment(uint256)\":{\"notice\":\"Checks if the commitment does not exceed the goal of this sale.\"},\"cancelAuction()\":{\"notice\":\"Cancel Auction\"},\"commitEth(address,bool)\":{\"notice\":\"Checks the amount of ETH to commit and adds the commitment. Refunds the buyer if commit is too high.\"},\"commitTokens(uint256,bool)\":{\"notice\":\"Buy Tokens by commiting approved ERC20 tokens to this contract address.\"},\"commitTokensFrom(address,uint256,bool)\":{\"notice\":\"Checks how much is user able to commit and processes that commitment.\"},\"finalize()\":{\"notice\":\"Manually finalizes the Crowdsale.\"},\"finalized()\":{\"notice\":\"Checks if the sale has been finalised.\"},\"getAllDocuments()\":{\"notice\":\"Used to retrieve a full list of documents attached to the smart contract.\"},\"getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Collects data to initialize the crowd sale.\"},\"getDocument(string)\":{\"notice\":\"Used to return the details of a document with a known name (`string`).\"},\"getDocumentCount()\":{\"notice\":\"Used to retrieve the total documents in the smart contract.\"},\"getDocumentName(uint256)\":{\"notice\":\"Used to retrieve the document name from index in the smart contract.\"},\"hasAdminRole(address)\":{\"notice\":\"Used to check whether an address has the admin role.\"},\"hasMinterRole(address)\":{\"notice\":\"Used to check whether an address has the minter role\"},\"hasOperatorRole(address)\":{\"notice\":\"Used to check whether an address has the operator role\"},\"hasSmartContractRole(address)\":{\"notice\":\"Used to check whether an address has the smart contract role\"},\"initAccessControls(address)\":{\"notice\":\"Initializes access controls.\"},\"initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Initializes main contract variables and transfers funds for the sale.\"},\"initMarket(bytes)\":{\"notice\":\"Decodes and hands Crowdsale data to the initCrowdsale function.\"},\"isOpen()\":{\"notice\":\"Checks if the sale is open.\"},\"marketTemplate()\":{\"notice\":\"FLYBYMarket template id for the factory contract.\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`. F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert) if part of a batch this could be used to grief once as the second call would not need the permit\"},\"removeAdminRole(address)\":{\"notice\":\"Removes the admin role from an address.\"},\"removeMinterRole(address)\":{\"notice\":\"Removes the minter role from an address\"},\"removeOperatorRole(address)\":{\"notice\":\"Removes the operator role from an address\"},\"removeSmartContractRole(address)\":{\"notice\":\"Removes the smart contract role from an address\"},\"setAuctionPrice(uint256,uint256)\":{\"notice\":\"Admin can set auction price through this function.\"},\"setAuctionTime(uint256,uint256)\":{\"notice\":\"Admin can set start and end time through this function.\"},\"setAuctionWallet(address)\":{\"notice\":\"Admin can set the auction wallet through this function.\"},\"tokensClaimable(address)\":{\"notice\":\"Adjusts users commitment depending on amount already claimed and unclaimed tokens left.\"},\"withdrawTokens(address)\":{\"notice\":\"Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auctions/Crowdsale.sol\":\"Crowdsale\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/FLYBYAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FLYBYAdminAccess.sol\\\";\\n\\ncontract FLYBYAccessControls is FLYBYAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x15d26912cdf5e68c3bf91040671f5c6f863e32b72906663c4007777abcb5d1e3\",\"license\":\"MIT\"},\"contracts/Access/FLYBYAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\ncontract FLYBYAdminAccess is AccessControl {\\n    bool private initAccess;\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\",\"keccak256\":\"0x043cc7e6c78cafc685a1348e2af7fb6d49dd66383605b5265383a795f9388f9a\",\"license\":\"MIT\"},\"contracts/Auctions/Crowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../OpenZeppelin/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../Access/FLYBYAccessControls.sol\\\";\\nimport \\\"../Utils/SafeTransfer.sol\\\";\\nimport \\\"../Utils/BoringBatchable.sol\\\";\\nimport \\\"../Utils/BoringERC20.sol\\\";\\nimport \\\"../Utils/BoringMath.sol\\\";\\nimport \\\"../Utils/Documents.sol\\\";\\nimport \\\"../Interfaces/IPointList.sol\\\";\\nimport \\\"../Interfaces/IFlybyMarket.sol\\\";\\n\\ncontract Crowdsale is IFlybyMarket, FLYBYAccessControls, BoringBatchable, SafeTransfer, Documents, ReentrancyGuard {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringMath64 for uint64;\\n    using BoringERC20 for IERC20;\\n\\n    /**\\n     * @notice FLYBYMarket template id for the factory contract.\\n     * @dev For different marketplace types, this must be incremented.\\n     */ \\n    uint256 public constant override marketTemplate = 1;\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 private constant AUCTION_TOKEN_DECIMALS = 1e18;\\n\\n    struct MarketPrice {\\n        uint128 rate;\\n        uint128 goal; \\n    }\\n    MarketPrice public marketPrice;\\n\\n    struct MarketInfo {\\n        uint64 startTime;\\n        uint64 endTime; \\n        uint128 totalTokens;\\n    }\\n    MarketInfo public marketInfo;\\n\\n    struct MarketStatus {\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n    }\\n    MarketStatus public marketStatus;\\n\\n    address public auctionToken;\\n    address payable public wallet;\\n    address public paymentCurrency;\\n    address public pointList;\\n\\n    mapping(address => uint256) public commitments;\\n    mapping(address => uint256) public claimed;\\n\\n    event AuctionTimeUpdated(uint256 startTime, uint256 endTime); \\n    event AuctionPriceUpdated(uint256 rate, uint256 goal); \\n    event AuctionWalletUpdated(address wallet); \\n    event AddedCommitment(address addr, uint256 commitment);\\n    event AuctionFinalized();\\n    event AuctionCancelled();\\n\\n    /**\\n     * @notice Initializes main contract variables and transfers funds for the sale.\\n     * @dev Init function.\\n     * @param _funder The address that funds the token for crowdsale.\\n     * @param _token Address of the token being sold.\\n     * @param _paymentCurrency The currency the crowdsale accepts for payment. Can be ETH or token address.\\n     * @param _totalTokens The total number of tokens to sell in crowdsale.\\n     * @param _startTime Crowdsale start time.\\n     * @param _endTime Crowdsale end time.\\n     * @param _rate Number of token units a buyer gets per wei or token.\\n     * @param _goal Minimum amount of funds to be raised in weis or tokens.\\n     * @param _admin Address that can finalize auction.\\n     * @param _pointList Address that will manage auction approvals.\\n     * @param _wallet Address where collected funds will be forwarded to.\\n     */\\n    function initCrowdsale(\\n        address _funder,\\n        address _token,\\n        address _paymentCurrency,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _rate,\\n        uint256 _goal,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    ) public {\\n        require(_startTime < 10000000000, \\\"Crowdsale: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_endTime < 10000000000, \\\"Crowdsale: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_startTime >= block.timestamp, \\\"Crowdsale: start time is before current time\\\");\\n        require(_endTime > _startTime, \\\"Crowdsale: start time is not before end time\\\");\\n        require(_rate > 0, \\\"Crowdsale: rate is 0\\\");\\n        require(_wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\n        require(_admin != address(0), \\\"Crowdsale: admin is the zero address\\\");\\n        require(_totalTokens > 0, \\\"Crowdsale: total tokens is 0\\\");\\n        require(_goal > 0, \\\"Crowdsale: goal is 0\\\");\\n        require(IERC20(_token).decimals() == 18, \\\"Crowdsale: Token does not have 18 decimals\\\");\\n        if (_paymentCurrency != ETH_ADDRESS) {\\n            require(IERC20(_paymentCurrency).decimals() > 0, \\\"Crowdsale: Payment currency is not ERC20\\\");\\n        }\\n\\n        marketPrice.rate = BoringMath.to128(_rate);\\n        marketPrice.goal = BoringMath.to128(_goal);\\n\\n        marketInfo.startTime = BoringMath.to64(_startTime);\\n        marketInfo.endTime = BoringMath.to64(_endTime);\\n        marketInfo.totalTokens = BoringMath.to128(_totalTokens);\\n\\n        auctionToken = _token;\\n        paymentCurrency = _paymentCurrency;\\n        wallet = _wallet;\\n\\n        initAccessControls(_admin);\\n        _setList(_pointList);\\n        _safeTransferFrom(_token, _funder, _totalTokens);\\n    }\\n\\n    /****************************\\n     * Commit to buying tokens\\n     ****************************/\\n    \\n    receive() external payable {\\n        revertBecauseUserDidNotProvideAgreement();\\n    }\\n\\n    /**\\n     * @dev Attribution to the awesome delta.financial contracts\\n     */\\n    function marketParticipationAgreement() public pure returns (string memory) {\\n        return \\\"I understand that I am interacting with a smart contract. I understand that tokens commited are subject to the token issuer and local laws where applicable. I reviewed code of the smart contract and understand it fully. I agree to not hold developers or other people associated with the project liable for any losses or misunderstandings\\\";\\n    }\\n\\n    /** \\n     * @dev Not using modifiers is a purposeful choice for code readability.\\n     */\\n    function revertBecauseUserDidNotProvideAgreement() internal pure {\\n        revert(\\\"No agreement provided, please review the smart contract before interacting with it\\\");\\n    }\\n\\n    /**\\n     * @notice Checks the amount of ETH to commit and adds the commitment. Refunds the buyer if commit is too high.\\n     * @dev low level token purchase with ETH ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it should not be called by\\n     * another `nonReentrant` function.\\n     * @param _beneficiary Recipient of the token purchase.\\n     */\\n    function commitEth(\\n        address payable _beneficiary,\\n        bool readAndAgreedToMarketParticipationAgreement\\n    ) \\n        public payable nonReentrant\\n    {\\n        require(paymentCurrency == ETH_ADDRESS, \\\"Crowdsale: Payment currency is not ETH\\\"); \\n        if(readAndAgreedToMarketParticipationAgreement == false) {\\n            revertBecauseUserDidNotProvideAgreement();\\n        }\\n        \\n        uint256 ethToTransfer = calculateCommitment(msg.value);\\n        uint256 ethToRefund = msg.value.sub(ethToTransfer);\\n        if (ethToTransfer > 0) {\\n            _addCommitment(_beneficiary, ethToTransfer);\\n        }\\n        \\n        if (ethToRefund > 0) {\\n            _beneficiary.transfer(ethToRefund);\\n        }\\n    }\\n\\n    /**\\n     * @notice Buy Tokens by commiting approved ERC20 tokens to this contract address.\\n     * @param _amount Amount of tokens to commit.\\n     */\\n    function commitTokens(uint256 _amount, bool readAndAgreedToMarketParticipationAgreement) public {\\n        commitTokensFrom(msg.sender, _amount, readAndAgreedToMarketParticipationAgreement);\\n    }\\n\\n    /**\\n     * @notice Checks how much is user able to commit and processes that commitment.\\n     * @dev Users must approve contract prior to committing tokens to auction.\\n     * @param _from User ERC20 address.\\n     * @param _amount Amount of approved ERC20 tokens.\\n     */\\n    function commitTokensFrom(\\n        address _from,\\n        uint256 _amount,\\n        bool readAndAgreedToMarketParticipationAgreement\\n    ) \\n        public nonReentrant\\n    {\\n        require(address(paymentCurrency) != ETH_ADDRESS, \\\"Crowdsale: Payment currency is not a token\\\");\\n        if(readAndAgreedToMarketParticipationAgreement == false) {\\n            revertBecauseUserDidNotProvideAgreement();\\n        }\\n        uint256 tokensToTransfer = calculateCommitment(_amount);\\n        if (tokensToTransfer > 0) {\\n            _safeTransferFrom(paymentCurrency, msg.sender, tokensToTransfer);\\n            _addCommitment(_from, tokensToTransfer);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the commitment does not exceed the goal of this sale.\\n     * @param _commitment Number of tokens to be commited.\\n     * @return committed The amount able to be purchased during a sale.\\n     */\\n    function calculateCommitment(uint256 _commitment)\\n        public\\n        view\\n        returns (uint256 committed)\\n    {\\n        uint256 tokens = _getTokenAmount(_commitment);\\n        uint256 tokensCommited =_getTokenAmount(uint256(marketStatus.commitmentsTotal));\\n        if ( tokensCommited.add(tokens) > uint256(marketInfo.totalTokens)) {\\n            return _getTokenPrice(uint256(marketInfo.totalTokens).sub(tokensCommited));\\n        }\\n        return _commitment;\\n    }\\n\\n    /**\\n     * @notice Updates commitment of the buyer and the amount raised, emits an event.\\n     * @param _addr Recipient of the token purchase.\\n     * @param _commitment Value in wei or token involved in the purchase.\\n     */\\n    function _addCommitment(address _addr, uint256 _commitment) internal {\\n        require(block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime), \\\"Crowdsale: outside auction hours\\\");\\n        require(_addr != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\n\\n        uint256 newCommitment = commitments[_addr].add(_commitment);\\n        if (marketStatus.usePointList) {\\n            require(IPointList(pointList).hasPoints(_addr, newCommitment));\\n        }\\n\\n        commitments[_addr] = newCommitment;        \\n        marketStatus.commitmentsTotal = BoringMath.to128(uint256(marketStatus.commitmentsTotal).add(_commitment));\\n        emit AddedCommitment(_addr, _commitment);\\n    }\\n\\n    function withdrawTokens() public {\\n        withdrawTokens(payable(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\\n     * @dev Withdraw tokens only after crowdsale ends.\\n     * @param beneficiary Whose tokens will be withdrawn.\\n     */\\n    function withdrawTokens(address payable beneficiary) public nonReentrant {    \\n        if (auctionSuccessful()) {\\n            require(marketStatus.finalized, \\\"Crowdsale: not finalized\\\");\\n            uint256 tokensToClaim = tokensClaimable(beneficiary);\\n            require(tokensToClaim > 0, \\\"Crowdsale: no tokens to claim\\\"); \\n            claimed[beneficiary] = claimed[beneficiary].add(tokensToClaim);\\n            _safeTokenPayment(auctionToken, beneficiary, tokensToClaim);\\n        } else {\\n            require(block.timestamp > uint256(marketInfo.endTime), \\\"Crowdsale: auction has not finished yet\\\");\\n            uint256 accountBalance = commitments[beneficiary];\\n            commitments[beneficiary] = 0;\\n            _safeTokenPayment(paymentCurrency, beneficiary, accountBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adjusts users commitment depending on amount already claimed and unclaimed tokens left.\\n     * @return claimerCommitment How many tokens the user is able to claim.\\n     */\\n    function tokensClaimable(address _user) public view returns (uint256 claimerCommitment) {\\n        uint256 unclaimedTokens = IERC20(auctionToken).balanceOf(address(this));\\n        claimerCommitment = _getTokenAmount(commitments[_user]);\\n        claimerCommitment = claimerCommitment.sub(claimed[_user]);\\n\\n        if (claimerCommitment > unclaimedTokens) {\\n            claimerCommitment = unclaimedTokens;\\n        }\\n    }\\n\\n    /********************************\\n     *       Finalize Auction\\n     ********************************/\\n    \\n    /**\\n     * @notice Manually finalizes the Crowdsale.\\n     * @dev Must be called after crowdsale ends, to do some extra finalization work.\\n     * Calls the contracts finalization function.\\n     */\\n    function finalize() public nonReentrant {\\n        require(            \\n            hasAdminRole(msg.sender) \\n            || wallet == msg.sender\\n            || hasSmartContractRole(msg.sender) \\n            || finalizeTimeExpired(),\\n            \\\"Crowdsale: sender must be an admin\\\"\\n        );\\n        MarketStatus storage status = marketStatus;\\n        require(!status.finalized, \\\"Crowdsale: already finalized\\\");\\n        MarketInfo storage info = marketInfo;\\n        require(auctionEnded(), \\\"Crowdsale: Has not finished yet\\\"); \\n\\n        if (auctionSuccessful()) {\\n            _safeTokenPayment(paymentCurrency, wallet, uint256(status.commitmentsTotal));\\n            uint256 soldTokens = _getTokenAmount(uint256(status.commitmentsTotal));\\n            uint256 unsoldTokens = uint256(info.totalTokens).sub(soldTokens);\\n            if(unsoldTokens > 0) {\\n                _safeTokenPayment(auctionToken, wallet, unsoldTokens);\\n            }\\n        } else {\\n            _safeTokenPayment(auctionToken, wallet, uint256(info.totalTokens));\\n        }\\n\\n        status.finalized = true;\\n        emit AuctionFinalized();\\n    }\\n\\n    /**\\n     * @notice Cancel Auction\\n     * @dev Admin can cancel the auction before it starts\\n     */\\n    function cancelAuction() public nonReentrant {\\n        require(hasAdminRole(msg.sender));\\n        MarketStatus storage status = marketStatus;\\n        require(!status.finalized, \\\"Crowdsale: already finalized\\\");\\n        require( uint256(status.commitmentsTotal) == 0, \\\"Crowdsale: Funds already raised\\\" );\\n\\n        _safeTokenPayment(auctionToken, wallet, uint256(marketInfo.totalTokens));\\n        status.finalized = true;\\n        emit AuctionCancelled();\\n    }\\n\\n    /**********************************\\n     *     Other useful functions \\n     **********************************/\\n    \\n    function tokenPrice() public view returns (uint256) {\\n        return uint256(marketPrice.rate); \\n    }\\n\\n    function _getTokenPrice(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(uint256(marketPrice.rate)).div(AUCTION_TOKEN_DECIMALS);   \\n    }\\n\\n    function getTokenAmount(uint256 _amount) public view returns (uint256) {\\n        _getTokenAmount(_amount);\\n    }\\n\\n    /**\\n     * @notice Calculates the number of tokens to purchase.\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param _amount Value in wei or token to be converted into tokens.\\n     * @return tokenAmount Number of tokens that can be purchased with the specified amount.\\n     */\\n    function _getTokenAmount(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(AUCTION_TOKEN_DECIMALS).div(uint256(marketPrice.rate));\\n    }\\n\\n    /**\\n     * @notice Checks if the sale is open.\\n     * @return isOpen True if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        return block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime);\\n    }\\n\\n    /**\\n     * @notice Checks if the sale minimum amount was raised.\\n     * @return auctionSuccessful True if the commitmentsTotal is equal or higher than goal.\\n     */\\n    function auctionSuccessful() public view returns (bool) {\\n        return uint256(marketStatus.commitmentsTotal) >= uint256(marketPrice.goal);\\n    }\\n\\n    /**\\n     * @notice Checks if the sale has ended.\\n     * @return auctionEnded True if sold out or time has ended.\\n     */\\n    function auctionEnded() public view returns (bool) {\\n        return block.timestamp > uint256(marketInfo.endTime) || \\n        _getTokenAmount(uint256(marketStatus.commitmentsTotal) + 1) >= uint256(marketInfo.totalTokens);\\n    }\\n\\n    /**\\n     * @notice Checks if the sale has been finalised.\\n     * @return bool True if sale has been finalised.\\n     */\\n    function finalized() public view returns (bool) {\\n        return marketStatus.finalized;\\n    }\\n\\n    /**\\n     * @return True if 7 days have passed since the end of the auction\\n     */\\n    function finalizeTimeExpired() public view returns (bool) {\\n        return uint256(marketInfo.endTime) + 7 days < block.timestamp;\\n    }\\n\\n    /*************************\\n     *        Documents\\n     *************************/\\n\\n    function setDocument(string calldata _name, string calldata _data) external {\\n        require(hasAdminRole(msg.sender) );\\n        _setDocument( _name, _data);\\n    }\\n\\n    function setDocuments(string[] calldata _name, string[] calldata _data) external {\\n        require(hasAdminRole(msg.sender) );\\n        uint256 numDocs = _name.length;\\n        for (uint256 i = 0; i < numDocs; i++) {\\n            _setDocument( _name[i], _data[i]);\\n        }\\n    }\\n\\n    function removeDocument(string calldata _name) external {\\n        require(hasAdminRole(msg.sender));\\n        _removeDocument(_name);\\n    }\\n\\n    /******************************\\n     *        Point Lists\\n     ******************************/\\n    \\n    function setList(address _list) external {\\n        require(hasAdminRole(msg.sender));\\n        _setList(_list);\\n    }\\n\\n    function enableList(bool _status) external {\\n        require(hasAdminRole(msg.sender));\\n        marketStatus.usePointList = _status;\\n    }\\n\\n    function _setList(address _pointList) private {\\n        if (_pointList != address(0)) {\\n            pointList = _pointList;\\n            marketStatus.usePointList = true;\\n        }\\n    }\\n\\n    /******************************\\n     *       Setter Auction\\n     ******************************/\\n\\n    /**\\n     * @notice Admin can set start and end time through this function.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     */\\n    function setAuctionTime(uint256 _startTime, uint256 _endTime) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_startTime < 10000000000, \\\"Crowdsale: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_endTime < 10000000000, \\\"Crowdsale: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_startTime >= block.timestamp, \\\"Crowdsale: start time is before current time\\\");\\n        require(_endTime > _startTime, \\\"Crowdsale: end time must be older than start price\\\");\\n\\n        require(marketStatus.commitmentsTotal == 0, \\\"Crowdsale: auction cannot have already started\\\");\\n\\n        marketInfo.startTime = BoringMath.to64(_startTime);\\n        marketInfo.endTime = BoringMath.to64(_endTime);\\n        \\n        emit AuctionTimeUpdated(_startTime,_endTime);\\n    }\\n\\n    /**\\n     * @notice Admin can set auction price through this function.\\n     * @param _rate Price per token.\\n     * @param _goal Minimum amount raised and goal for the auction.\\n     */\\n    function setAuctionPrice(uint256 _rate, uint256 _goal) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_goal > 0, \\\"Crowdsale: goal is 0\\\");\\n        require(_rate > 0, \\\"Crowdsale: rate is 0\\\");\\n        require(marketStatus.commitmentsTotal == 0, \\\"Crowdsale: auction cannot have already started\\\");\\n        marketPrice.rate = BoringMath.to128(_rate);\\n        marketPrice.goal = BoringMath.to128(_goal);\\n        require(_getTokenAmount(_goal) <= uint256(marketInfo.totalTokens), \\\"Crowdsale: minimum target exceeds hard cap\\\");\\n\\n        emit AuctionPriceUpdated(_rate,_goal);\\n    }\\n\\n    /**\\n     * @notice Admin can set the auction wallet through this function.\\n     * @param _wallet Auction wallet is where funds will be sent.\\n     */\\n    function setAuctionWallet(address payable _wallet) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\n        wallet = _wallet;\\n\\n        emit AuctionWalletUpdated(_wallet);\\n    }\\n\\n    /*******************************\\n     *      Market Launchers\\n     *******************************/\\n    \\n    function init(bytes calldata _data) external override payable {}\\n    \\n    /**\\n     * @notice Decodes and hands Crowdsale data to the initCrowdsale function.\\n     * @param _data Encoded data for initialization.\\n     */\\n    function initMarket(bytes calldata _data) public override {\\n        (\\n            address _funder,\\n            address _token,\\n            address _paymentCurrency,\\n            uint256 _totalTokens,\\n            uint256 _startTime,\\n            uint256 _endTime,\\n            uint256 _rate,\\n            uint256 _goal,\\n            address _admin,\\n            address _pointList,\\n            address payable _wallet\\n        ) = abi.decode(_data, (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            address,\\n            address\\n        ));\\n\\n        initCrowdsale(_funder, _token, _paymentCurrency, _totalTokens, _startTime, _endTime, _rate, _goal, _admin, _pointList, _wallet);\\n    }\\n\\n    /**\\n     * @notice Collects data to initialize the crowd sale.\\n     * @param _funder The address that funds the token for crowdsale.\\n     * @param _token Address of the token being sold.\\n     * @param _paymentCurrency The currency the crowdsale accepts for payment. Can be ETH or token address.\\n     * @param _totalTokens The total number of tokens to sell in crowdsale.\\n     * @param _startTime Crowdsale start time.\\n     * @param _endTime Crowdsale end time.\\n     * @param _rate Number of token units a buyer gets per wei or token.\\n     * @param _goal Minimum amount of funds to be raised in weis or tokens.\\n     * @param _admin Address that can finalize crowdsale.\\n     * @param _pointList Address that will manage auction approvals.\\n     * @param _wallet Address where collected funds will be forwarded to.\\n     * @return _data All the data in bytes format.\\n     */\\n    function getCrowdsaleInitData(\\n        address _funder,\\n        address _token,\\n        address _paymentCurrency,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _rate,\\n        uint256 _goal,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    )\\n        external pure returns (bytes memory _data)\\n    {\\n        return abi.encode(\\n            _funder,\\n            _token,\\n            _paymentCurrency,\\n            _totalTokens,\\n            _startTime,\\n            _endTime,\\n            _rate,\\n            _goal,\\n            _admin,\\n            _pointList,\\n            _wallet\\n        );\\n    }\\n\\n    function getBaseInformation() external view returns(\\n        address, \\n        uint64,\\n        uint64,\\n        bool \\n    ) {\\n        return (auctionToken, marketInfo.startTime, marketInfo.endTime, marketStatus.finalized);\\n    }\\n\\n    function getTotalTokens() external view returns(uint256) {\\n        return uint256(marketInfo.totalTokens);\\n    }\\n}\\n\",\"keccak256\":\"0xda0ca2e73bb87eb99be6320bbb0b615cc6a117b16cf5bc420d0ae71d056edb24\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0xe4f8cb9ac9cd376f81da2348709e1f44dc0bd2fb44513c5d230702bb1b9e8b36\",\"license\":\"MIT\"},\"contracts/Interfaces/IFlybyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFlybyMarket {\\n\\n    function init(bytes calldata data) external payable;\\n    function initMarket( bytes calldata data ) external;\\n    function marketTemplate() external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xd862ab29398a22d9a62798c45017d14e702eab21756b96f13b20be4e54eb1bdf\",\"license\":\"MIT\"},\"contracts/Interfaces/IPointList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPointList {\\n    function isInList(address account) external view returns (bool);\\n    function hasPoints(address account, uint256 amount) external view  returns (bool);\\n    function setPoints(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external; \\n    function initPointList(address accessControl) external ;\\n\\n}\\n\",\"keccak256\":\"0x5ca6189f48425c8ef1041cecd626b6c6f66af41464fe8e149554d41632544e5c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/EnumerableSet.sol\\\";\\n\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x70a4ac51d4857ce35422d73f70cbec83f00f568e1f95a804dcfbbe509de5a82c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xe0521887b553a6c5bef0acd727645ff69535b60fe7c5947e40f19391307d70d2\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x01c748c0e9f9c425f95c8f0e7eb6625675a4fde41b7f5444bcf6b894b375e72c\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xc1656b57a49e1aad644a6cb3c589394ac337d328cec38bceef3c8d5bfd7a1949\",\"license\":\"MIT\"},\"contracts/Utils/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\nimport \\\"./BoringERC20.sol\\\";\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string));\\n    }\\n\\n    /**\\n     * @notice Allows batched call to self (this contract).\\n     * @param calls An array of inputs for each call.\\n     * @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n     * @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n     * @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n     * F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n     * F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n     * C3: The length of the loop is fully under user control, so can't be exploited\\n     * C7: Delegatecall is only used on the same contract, so it's safe\\n     */\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /**\\n     * @notice Call wrapper that performs `ERC20.permit` on `token`.\\n     * Lookup `IERC20.permit`.\\n     * F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n     * if part of a batch this could be used to grief once as the second call would not need the permit\\n     */\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0xc8fa0456e38bbb57f17d2397cc712e61904564dcff041cf2c9bd1bc88d5a122d\",\"license\":\"MIT\"},\"contracts/Utils/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../Interfaces/IERC20.sol\\\";\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41;\\n    bytes4 private constant SIG_NAME = 0x06fdde03;\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567;\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb;\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd;\\n\\n    /**\\n     * @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n     * @param token The address of the ERC-20 token contract.\\n     * @return (string) Token symbol.\\n     */\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n     * @param token The address of the ERC-20 token contract.\\n     * @return (string) Token name.\\n     */\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n     * @param token The address of the ERC-20 token contract.\\n     * @return (uint8) Token decimals.\\n     */\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n     * Reverts on a failed transfer.\\n     * @param token The address of the ERC-20 token.\\n     * @param to Transfer tokens to.\\n     * @param amount The token amount.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n     * Reverts on a failed transfer.\\n     * @param token The address of the ERC-20 token.\\n     * @param from Transfer tokens from.\\n     * @param to Transfer tokens to.\\n     * @param amount The token amount.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\",\"keccak256\":\"0x413926605152de55ab59259a7c23e2cd974bd316dbf777113f235f05dbc6e1bb\",\"license\":\"MIT\"},\"contracts/Utils/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"BoringMath: Div zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(type(uint128).max), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(type(uint64).max), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(type(uint32).max), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function to16(uint256 a) internal pure returns (uint16 c) {\\n        require(a <= uint16(type(uint16).max), \\\"BoringMath: uint16 Overflow\\\");\\n        c = uint16(a);\\n    }\\n\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath16 {\\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\",\"keccak256\":\"0x89df8679004bb5921d308b1339717c59cdb689cedbb673cdb2510fceece81b87\",\"license\":\"MIT\"},\"contracts/Utils/Documents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract Documents {\\n\\n    struct Document {\\n        uint32 docIndex;\\n        uint64 lastModified;\\n        string data;\\n    }\\n\\n    mapping(string => Document) internal _documents;\\n    mapping(string => uint32) internal _docIndexes;\\n\\n    string[] _docNames;\\n\\n    event DocumentRemoved(string indexed _name, string _data);\\n    event DocumentUpdated(string indexed _name, string _data);\\n\\n    /**\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\n     */\\n    function _setDocument(string calldata _name, string calldata _data) internal {\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\n        if (_documents[_name].lastModified == uint64(0)) {\\n            _docNames.push(_name);\\n            _documents[_name].docIndex = uint32(_docNames.length);\\n        }\\n        _documents[_name] = Document(_documents[_name].docIndex, uint64(block.timestamp), _data);\\n        emit DocumentUpdated(_name, _data);\\n    }\\n\\n    /**\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     */\\n    function _removeDocument(string calldata _name) internal {\\n        require(_documents[_name].lastModified != uint64(0), \\\"Document should exist\\\");\\n        uint32 index = _documents[_name].docIndex - 1;\\n        if (index != _docNames.length - 1) {\\n            _docNames[index] = _docNames[_docNames.length - 1];\\n            _documents[_docNames[index]].docIndex = index + 1; \\n        }\\n        _docNames.pop();\\n        emit DocumentRemoved(_name, _documents[_name].data);\\n        delete _documents[_name];\\n    }\\n\\n    /**\\n     * @notice Used to return the details of a document with a known name (`string`).\\n     * @param _name Name of the document\\n     * @return string The data associated with the document.\\n     * @return uint256 the timestamp at which the document was last modified.\\n     */\\n    function getDocument(string calldata _name) external view returns (string memory, uint256) {\\n        return (\\n            _documents[_name].data,\\n            uint256(_documents[_name].lastModified)\\n        );\\n    }\\n\\n    /**\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\n     * @return string List of all documents names present in the contract.\\n     */\\n    function getAllDocuments() external view returns (string[] memory) {\\n        return _docNames;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the total documents in the smart contract.\\n     * @return uint256 Count of the document names present in the contract.\\n     */\\n    function getDocumentCount() external view returns (uint256) {\\n        return _docNames.length;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the document name from index in the smart contract.\\n     * @return string Name of the document name.\\n     */\\n    function getDocumentName(uint256 _index) external view returns (string memory) {\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\n        return _docNames[_index];\\n    }\\n}\",\"keccak256\":\"0x554ef7b2fc3356ba0d2ab6c044de3db03e43bfc3103b439e20264dd12a757d5c\",\"license\":\"MIT\"},\"contracts/Utils/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract SafeTransfer {\\n\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to,_amount );\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n    \\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n    \\n    function _safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n    \\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        (bool success, bytes memory data) =\\n            token.call(\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        (bool success, bytes memory data) =\\n            token.call(\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n}\",\"keccak256\":\"0xe07868766e4bb0ca00fcb4b73c692b0aa2ec5d77991042f9defa64e7b30b3b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106104145760003560e01c8063864333741161021e578063c884ef8311610123578063dccfe310116100ab578063e8fcf7231161007a578063e8fcf72314610be6578063f04899d314610c06578063f08b82e614610c1b578063f5b541a614610c30578063fc4e3e0a14610c4557610423565b8063dccfe31014610b62578063dde51f6d14610b82578063e0e081d714610ba2578063e6594abd14610bc657610423565b8063d2423b51116100f2578063d2423b5114610acc578063d539139314610aed578063d547741f14610b02578063d69d3e6214610b22578063dc97e08214610b4257610423565b8063c884ef8314610a4c578063c92bce8714610a6c578063c9fab05914610a8c578063ca15c87314610aac57610423565b80639c64d0ae116101a6578063b3f05b9711610175578063b3f05b97146109b7578063b7928b1d146109cc578063c2507ac1146109ec578063c395fcb314610a0c578063c6b547e614610a2c57610423565b80639c64d0ae146109405780639fa5f50b14610960578063a217fddf14610982578063adbf37761461099757610423565b80639010d07c116101ed5780639010d07c146108ab57806391d14854146108cb5780639478941c146108eb57806399fdb3201461090b5780639a87222c1461092057610423565b8063864333741461084c5780638a845fc0146108615780638d8f2adb146108815780638fa8b7901461089657610423565b806345a15388116103245780636595171c116102ac5780637c516e941161027b5780637c516e94146107b45780637ccb6a64146107d45780637ff9b5961461080257806381353c8e14610817578063857d26081461083757610423565b80636595171c1461073f5780636ae260c11461075f57806373973fcb1461077f57806374cf9fc51461079f57610423565b80634bb278f3116102f35780634bb278f3146106c25780634dc80e15146106d75780634ddf47d4146106f7578063521eb2731461070a57806354f1e1261461071f57610423565b806345a153881461064a57806347535d7b1461066d57806349df728c146106825780634b3e6abb146106a257610423565b806324e4025b116103a757806336568abe1161037657806336568abe146105be57806336d0054b146105de5780633d15cc6d146105f35780633d1c2273146106155780633f16431a1461062a57610423565b806324e4025b1461054657806329762960146105665780632f2ff15d14610579578063314148e21461059957610423565b806317026455116103e357806317026455146104cf5780631b3e460e146104e4578063212f8a8114610506578063248a9ca31461052657610423565b8063031bee0014610428578063099db017146104555780630cc4c03314610482578063113b0ab2146104af57610423565b3661042357610421610c65565b005b600080fd5b34801561043457600080fd5b5061043d610c86565b60405161044c93929190614c5b565b60405180910390f35b34801561046157600080fd5b506104756104703660046138b3565b610cb3565b60405161044c9190614064565b34801561048e57600080fd5b506104a261049d3660046139c4565b610cd5565b60405161044c9190614078565b3480156104bb57600080fd5b506104756104ca3660046138b3565b610d1c565b3480156104db57600080fd5b50610475610d36565b3480156104f057600080fd5b506104f9610d61565b60405161044c919061406f565b34801561051257600080fd5b506104216105213660046139e5565b610d66565b34801561053257600080fd5b506104f9610541366004613b0f565b610e19565b34801561055257600080fd5b50610421610561366004613b4b565b610e2e565b61042161057436600461398c565b610f64565b34801561058557600080fd5b50610421610594366004613b27565b61104a565b3480156105a557600080fd5b506105ae611092565b60405161044c9493929190613f3b565b3480156105ca57600080fd5b506104216105d9366004613b27565b6110ca565b3480156105ea57600080fd5b5061047561110c565b3480156105ff57600080fd5b5061060861112b565b60405161044c9190613e4a565b34801561062157600080fd5b506104f961113a565b34801561063657600080fd5b506104216106453660046138b3565b611140565b34801561065657600080fd5b5061065f6111a2565b60405161044c929190614c33565b34801561067957600080fd5b506104756111bc565b34801561068e57600080fd5b5061042161069d3660046138b3565b6111f1565b3480156106ae57600080fd5b506104216106bd366004613ad7565b61133b565b3480156106ce57600080fd5b5061042161136b565b3480156106e357600080fd5b506104f96106f23660046138b3565b611547565b610421610705366004613b6c565b61108e565b34801561071657600080fd5b5061060861162c565b34801561072b57600080fd5b5061042161073a3660046138b3565b61163b565b34801561074b57600080fd5b5061042161075a3660046138b3565b61169d565b34801561076b57600080fd5b5061042161077a366004613b4b565b6116f2565b34801561078b57600080fd5b506104f961079a366004613b0f565b611845565b3480156107ab57600080fd5b506104a26118c9565b3480156107c057600080fd5b506104216107cf366004613bab565b6118ec565b3480156107e057600080fd5b506107f46107ef366004613b6c565b611960565b60405161044c9291906140ba565b34801561080e57600080fd5b506104f9611a58565b34801561082357600080fd5b50610421610832366004613b6c565b611a67565b34801561084357600080fd5b506104f9611ab7565b34801561085857600080fd5b50610475611ac9565b34801561086d57600080fd5b5061042161087c3660046138b3565b611b1c565b34801561088d57600080fd5b50610421611b7e565b3480156108a257600080fd5b50610421611b89565b3480156108b757600080fd5b506106086108c6366004613b4b565b611c88565b3480156108d757600080fd5b506104756108e6366004613b27565b611ca9565b3480156108f757600080fd5b506104216109063660046138b3565b611cc1565b34801561091757600080fd5b50610608611d23565b34801561092c57600080fd5b5061042161093b3660046138b3565b611d32565b34801561094c57600080fd5b5061042161095b366004613c2d565b611dc0565b34801561096c57600080fd5b50610975611de4565b60405161044c9190614004565b34801561098e57600080fd5b506104f9611ebd565b3480156109a357600080fd5b506104216109b23660046138b3565b611ec2565b3480156109c357600080fd5b50610475611f24565b3480156109d857600080fd5b506104216109e73660046138b3565b611f34565b3480156109f857600080fd5b506104f9610a07366004613b0f565b611f96565b348015610a1857600080fd5b50610475610a273660046138b3565b611fa1565b348015610a3857600080fd5b506104a2610a47366004613b0f565b611fad565b348015610a5857600080fd5b506104f9610a673660046138b3565b61208c565b348015610a7857600080fd5b50610421610a87366004613a6f565b61209e565b348015610a9857600080fd5b50610421610aa73660046139c4565b612142565b348015610ab857600080fd5b506104f9610ac7366004613b0f565b6124fa565b610adf610ada366004613a26565b612511565b60405161044c929190613f6d565b348015610af957600080fd5b506104f9612705565b348015610b0e57600080fd5b50610421610b1d366004613b27565b612717565b348015610b2e57600080fd5b50610421610b3d3660046138b3565b612751565b348015610b4e57600080fd5b50610421610b5d366004613d43565b61276f565b348015610b6e57600080fd5b50610421610b7d3660046138b3565b61277a565b348015610b8e57600080fd5b50610421610b9d366004613b6c565b6127cf565b348015610bae57600080fd5b50610bb76127eb565b60405161044c93929190614c10565b348015610bd257600080fd5b50610421610be13660046138b3565b612810565b348015610bf257600080fd5b506104f9610c013660046138b3565b612873565b348015610c1257600080fd5b50610608612885565b348015610c2757600080fd5b506104f9612894565b348015610c3c57600080fd5b506104f96128aa565b348015610c5157600080fd5b50610475610c603660046138b3565b6128bc565b60405162461bcd60e51b8152600401610c7d90614296565b60405180910390fd5b6007546001600160401b0380821691600160401b810490911690600160801b90046001600160801b031683565b6000610ccd600080516020614ea183398151915283611ca9565b90505b919050565b60608b8b8b8b8b8b8b8b8b8b8b604051602001610cfc9b9a99989796959493929190613e5e565b60405160208183030381529060405290509b9a5050505050505050505050565b6000610ccd600080516020614e6183398151915283611ca9565b6007546000904290610d5b90600160401b90046001600160401b031662093a80614ccb565b10905090565b600181565b60026005541415610d895760405162461bcd60e51b8152600401610c7d90614a6b565b6002600555600b546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610dcd5760405162461bcd60e51b8152600401610c7d90614b98565b80610dda57610dda610c65565b6000610de583611845565b90508015610e0e57600b54610e04906001600160a01b031633836128d6565b610e0e84826129b2565b505060016005555050565b60009081526020819052604090206002015490565b610e3733611fa1565b610e4057600080fd5b60008111610e605760405162461bcd60e51b8152600401610c7d90614b1b565b60008211610e805760405162461bcd60e51b8152600401610c7d9061452c565b6008546001600160801b031615610ea95760405162461bcd60e51b8152600401610c7d90614389565b610eb282612b7d565b600680546001600160801b0319166001600160801b0392909216919091179055610edb81612b7d565b600680546001600160801b03908116600160801b9382168402179091556007549190910416610f0982612baa565b1115610f275760405162461bcd60e51b8152600401610c7d906148ad565b7f622a57040c34e45abc5fadeb22e4c3c687cf48a096c86694cd21a7be9e7851ee8282604051610f58929190614c4d565b60405180910390a15050565b60026005541415610f875760405162461bcd60e51b8152600401610c7d90614a6b565b6002600555600b546001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610fca5760405162461bcd60e51b8152600401610c7d9061473a565b80610fd757610fd7610c65565b6000610fe234611845565b90506000610ff03483612bd5565b905081156110025761100284836129b2565b8015610e0e576040516001600160a01b0385169082156108fc029083906000818181858888f1935050505015801561103e573d6000803e3d6000fd5b50505060016005555050565b600082815260208190526040902060020154611068906108e6612c03565b6110845760405162461bcd60e51b8152600401610c7d906141fb565b61108e8282612c07565b5050565b6009546007546008546001600160a01b03909216926001600160401b0380831693600160401b9093041691600160801b900460ff1690565b6110d2612c03565b6001600160a01b0316816001600160a01b0316146111025760405162461bcd60e51b8152600401610c7d90614b49565b61108e8282612c70565b6006546008546001600160801b03600160801b90920482169116101590565b600b546001600160a01b031681565b60045490565b611158600080516020614e618339815191528261104a565b611160612c03565b6001600160a01b0316816001600160a01b03167f1d5f9ec24c6f91be922ea13ceaad919ad6554a41b5c26087f96289a9baf98ad260405160405180910390a350565b6006546001600160801b0380821691600160801b90041682565b6007546000906001600160401b031642108015906111ec5750600754600160401b90046001600160401b03164211155b905090565b600260055414156112145760405162461bcd60e51b8152600401610c7d90614a6b565b600260055561122161110c565b156112d157600854600160801b900460ff1661124f5760405162461bcd60e51b8152600401610c7d90614876565b600061125a82611547565b90506000811161127c5760405162461bcd60e51b8152600401610c7d90614a34565b6001600160a01b0382166000908152600e602052604090205461129f9082612cd9565b6001600160a01b038084166000908152600e60205260409020919091556009546112cb91168383612d07565b50611333565b600754600160401b90046001600160401b031642116113025760405162461bcd60e51b8152600401610c7d9061482f565b6001600160a01b038082166000908152600d602052604081208054919055600b54909161133191168383612d07565b505b506001600555565b61134433611fa1565b61134d57600080fd5b60088054911515600160881b0260ff60881b19909216919091179055565b6002600554141561138e5760405162461bcd60e51b8152600401610c7d90614a6b565b600260055561139c33611fa1565b806113b15750600a546001600160a01b031633145b806113c057506113c033610d1c565b806113ce57506113ce610d36565b6113ea5760405162461bcd60e51b8152600401610c7d90614ad9565b60088054600160801b900460ff16156114155760405162461bcd60e51b8152600401610c7d906143d7565b600761141f611ac9565b61143b5760405162461bcd60e51b8152600401610c7d90614780565b61144361110c565b156114d557600b54600a548354611470926001600160a01b039081169216906001600160801b0316612d07565b8154600090611487906001600160801b0316612baa565b82549091506000906114a990600160801b90046001600160801b031683612bd5565b905080156114ce57600954600a546114ce916001600160a01b03908116911683612d07565b5050611504565b600954600a548254611504926001600160a01b03908116921690600160801b90046001600160801b0316612d07565b815460ff60801b1916600160801b1782556040517f32bebcfd2d04dbae321298091d96d2cb1d07279f59718cd83bd98245b8b82b5a90600090a150506001600555565b6009546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061157c903090600401613e4a565b60206040518083038186803b15801561159457600080fd5b505afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc9190613d2b565b6001600160a01b0384166000908152600d60205260409020549091506115f190612baa565b6001600160a01b0384166000908152600e6020526040902054909250611618908390612bd5565b915080821115611626578091505b50919050565b600a546001600160a01b031681565b611653600080516020614ea183398151915282612717565b61165b612c03565b6001600160a01b0316816001600160a01b03167f56692a161ffec953ddf9def93b958ea8d1ec95e21b80870c66be91a4374dc4e360405160405180910390a350565b6116a860008261104a565b6116b0612c03565b6001600160a01b0316816001600160a01b03167f2570ac42fd8b322dc453ada624dc2ed0e9bdd67f16f201a25bbd30468f2aa18760405160405180910390a350565b6116fb33611fa1565b61170457600080fd5b6402540be40082106117285760405162461bcd60e51b8152600401610c7d906149d7565b6402540be400811061174c5760405162461bcd60e51b8152600401610c7d906149d7565b4282101561176c5760405162461bcd60e51b8152600401610c7d9061424a565b81811161178b5760405162461bcd60e51b8152600401610c7d906145a2565b6008546001600160801b0316156117b45760405162461bcd60e51b8152600401610c7d90614389565b6117bd82612d4b565b6007805467ffffffffffffffff19166001600160401b03929092169190911790556117e781612d4b565b600780546001600160401b0392909216600160401b0267ffffffffffffffff60401b199092169190911790556040517f5725d1e4352d6944889e54837ffaefde55cdc0b55796b831365d61cd4c87fdb890610f589084908490614c4d565b60008061185183612baa565b60085490915060009061186c906001600160801b0316612baa565b600754909150600160801b90046001600160801b031661188c8284612cd9565b11156118c1576007546118b8906118b390600160801b90046001600160801b031683612bd5565b612d74565b92505050610cd0565b509192915050565b60606040518061018001604052806101518152602001614ec16101519139905090565b60405163d505accf60e01b81526001600160a01b0389169063d505accf90611924908a908a908a908a908a908a908a90600401613ee1565b600060405180830381600087803b15801561193e57600080fd5b505af1158015611952573d6000803e3d6000fd5b505050505050505050505050565b6060600060028484604051611976929190613daf565b908152602001604051809103902060010160028585604051611999929190613daf565b9081526040519081900360200190205481546001600160401b03640100000000909204919091169082906119cc90614db2565b80601f01602080910402602001604051908101604052809291908181526020018280546119f890614db2565b8015611a455780601f10611a1a57610100808354040283529160200191611a45565b820191906000526020600020905b815481529060010190602001808311611a2857829003601f168201915b50505050509150915091505b9250929050565b6006546001600160801b031690565b600080808080808080808080611a7f8c8e018e6138d6565b9a509a509a509a509a509a509a509a509a509a509a50611aa88b8b8b8b8b8b8b8b8b8b8b612142565b50505050505050505050505050565b600080516020614e6183398151915281565b600754600090600160401b90046001600160401b03164211806111ec57506007546008546001600160801b03600160801b909204821691611b1591611b1091166001614ccb565b612baa565b1015905090565b611b34600080516020614e6183398151915282612717565b611b3c612c03565b6001600160a01b0316816001600160a01b03167fe5f1aa9e528307345194b88b24a32401c13926e0823060f1049d9b26c0bb62b260405160405180910390a350565b611b87336111f1565b565b60026005541415611bac5760405162461bcd60e51b8152600401610c7d90614a6b565b6002600555611bba33611fa1565b611bc357600080fd5b60088054600160801b900460ff1615611bee5760405162461bcd60e51b8152600401610c7d906143d7565b80546001600160801b031615611c165760405162461bcd60e51b8152600401610c7d9061463e565b600954600a54600754611c46926001600160a01b03908116921690600160801b90046001600160801b0316612d07565b805460ff60801b1916600160801b1781556040517fa5fb31e47bd1eca58bf14a3312d5e6aeafdc4ee787c8ed348c15c2b092324d9390600090a1506001600555565b6000828152602081905260408120611ca09083612d9c565b90505b92915050565b6000828152602081905260408120611ca09083612da8565b611cd9600080516020614e8183398151915282612717565b611ce1612c03565b6001600160a01b0316816001600160a01b03167f70b25138b6fadeb9992d18b9653564271823e34b3e3257515d12a6d4b15fcddf60405160405180910390a350565b6009546001600160a01b031681565b611d3b33611fa1565b611d4457600080fd5b6001600160a01b038116611d6a5760405162461bcd60e51b8152600401610c7d9061495b565b600a80546001600160a01b0319166001600160a01b0383161790556040517f34ae2bad9265f0212d4cf341708b8250949164bb54f9d0e4f442024f83bb2f9090611db5908390613e4a565b60405180910390a150565b611dc933611fa1565b611dd257600080fd5b611dde84848484612dbd565b50505050565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015611eb4578382906000526020600020018054611e2790614db2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5390614db2565b8015611ea05780601f10611e7557610100808354040283529160200191611ea0565b820191906000526020600020905b815481529060010190602001808311611e8357829003601f168201915b505050505081526020019060010190611e08565b50505050905090565b600081565b611eda600080516020614ea18339815191528261104a565b611ee2612c03565b6001600160a01b0316816001600160a01b03167f0be6ab9784c7401fafb73f7bc47bc67cc4ef8c47a60ad3cb66d1de0353a0784c60405160405180910390a350565b600854600160801b900460ff1690565b611f4c600080516020614e818339815191528261104a565b611f54612c03565b6001600160a01b0316816001600160a01b03167f2d45ee102874989882745a26688d0b4fffee125a18df26536b12582c7fde4e1760405160405180910390a350565b600061162682612baa565b6000610ccd8183611ca9565b6004546060908210611fd15760405162461bcd60e51b8152600401610c7d906148f7565b60048281548110611ff257634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461200790614db2565b80601f016020809104026020016040519081016040528092919081815260200182805461203390614db2565b80156120805780601f1061205557610100808354040283529160200191612080565b820191906000526020600020905b81548152906001019060200180831161206357829003601f168201915b50505050509050919050565b600e6020526000908152604090205481565b6120a733611fa1565b6120b057600080fd5b8260005b8181101561213a576121288686838181106120df57634e487b7160e01b600052603260045260246000fd5b90506020028101906120f19190614c87565b86868581811061211157634e487b7160e01b600052603260045260246000fd5b90506020028101906121239190614c87565b612dbd565b8061213281614de7565b9150506120b4565b505050505050565b6402540be40087106121665760405162461bcd60e51b8152600401610c7d906149d7565b6402540be400861061218a5760405162461bcd60e51b8152600401610c7d906149d7565b428710156121aa5760405162461bcd60e51b8152600401610c7d9061424a565b8686116121c95760405162461bcd60e51b8152600401610c7d9061430e565b600085116121e95760405162461bcd60e51b8152600401610c7d9061452c565b6001600160a01b03811661220f5760405162461bcd60e51b8152600401610c7d9061495b565b6001600160a01b0383166122355760405162461bcd60e51b8152600401610c7d90614675565b600088116122555760405162461bcd60e51b8152600401610c7d90614924565b600084116122755760405162461bcd60e51b8152600401610c7d90614b1b565b896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e69190613d67565b60ff166012146123085760405162461bcd60e51b8152600401610c7d906145f4565b6001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146123bf576000896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561236757600080fd5b505afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190613d67565b60ff16116123bf5760405162461bcd60e51b8152600401610c7d9061455a565b6123c885612b7d565b600680546001600160801b0319166001600160801b03929092169190911790556123f184612b7d565b600680546001600160801b03928316600160801b02921691909117905561241787612d4b565b6007805467ffffffffffffffff19166001600160401b039290921691909117905561244186612d4b565b600780546001600160401b0392909216600160401b0267ffffffffffffffff60401b1990921691909117905561247688612b7d565b600780546001600160801b03928316600160801b029216919091179055600980546001600160a01b03808d166001600160a01b031992831617909255600b80548c8416908316179055600a8054928416929091169190911790556124d983612810565b6124e28261300f565b6124ed8a8c8a6128d6565b5050505050505050505050565b6000818152602081905260408120610ccd90613051565b606080836001600160401b0381111561253a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612563578160200160208202803683370190505b509150836001600160401b0381111561258c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156125bf57816020015b60608152602001906001900390816125aa5790505b50905060005b848110156126fc57600080308888858181106125f157634e487b7160e01b600052603260045260246000fd5b90506020028101906126039190614c87565b604051612611929190613daf565b600060405180830381855af49150503d806000811461264c576040519150601f19603f3d011682016040523d82523d6000602084013e612651565b606091505b50915091508180612660575085155b6126698261305c565b906126875760405162461bcd60e51b8152600401610c7d9190614078565b50818584815181106126a957634e487b7160e01b600052603260045260246000fd5b602002602001019015159081151581525050808484815181106126dc57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806126f490614de7565b9150506125c5565b50935093915050565b600080516020614ea183398151915281565b600082815260208190526040902060020154612735906108e6612c03565b6111025760405162461bcd60e51b8152600401610c7d90614445565b61275a33611fa1565b61276357600080fd5b61276c8161300f565b50565b61108e338383610d66565b612785600082612717565b61278d612c03565b6001600160a01b0316816001600160a01b03167f21ba1239795d4e22874e3dc55f0a9d7b65bfb23069d32965d7c23be9524ccf9560405160405180910390a350565b6127d833611fa1565b6127e157600080fd5b61108e82826130bc565b6008546001600160801b0381169060ff600160801b8204811691600160881b90041683565b60015460ff16156128335760405162461bcd60e51b8152600401610c7d9061418c565b6001600160a01b0381166128595760405162461bcd60e51b8152600401610c7d90614503565b612864600082611084565b506001805460ff191681179055565b600d6020526000908152604090205481565b600c546001600160a01b031681565b600754600160801b90046001600160801b031690565b600080516020614e8183398151915281565b6000610ccd600080516020614e8183398151915283611ca9565b600080846001600160a01b03166323b872dd8530866040516024016128fd93929190613ebd565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516129369190613dbf565b6000604051808303816000865af19150503d8060008114612973576040519150601f19603f3d011682016040523d82523d6000602084013e612978565b606091505b50915091508180156129a25750805115806129a25750808060200190518101906129a29190613af3565b6129ab57600080fd5b5050505050565b6007546001600160401b031642108015906129df5750600754600160401b90046001600160401b03164211155b6129fb5760405162461bcd60e51b8152600401610c7d906147fa565b6001600160a01b038216612a215760405162461bcd60e51b8152600401610c7d906146f0565b6001600160a01b0382166000908152600d6020526040812054612a449083612cd9565b600854909150600160881b900460ff1615612ae457600c54604051631cd53d5560e01b81526001600160a01b0390911690631cd53d5590612a8b9086908590600401613f22565b60206040518083038186803b158015612aa357600080fd5b505afa158015612ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adb9190613af3565b612ae457600080fd5b6001600160a01b0383166000908152600d60205260409020819055600854612b1e90612b19906001600160801b031684612cd9565b612b7d565b600880546001600160801b0319166001600160801b03929092169190911790556040517f077511a636ba1f10551cc7b89c13ff66a6ac9344e8a917527817a9690b15af7a90612b709085908590613f22565b60405180910390a1505050565b60006001600160801b03821115612ba65760405162461bcd60e51b8152600401610c7d9061440e565b5090565b600654600090610ccd906001600160801b0316612bcf84670de0b6b3a7640000613354565b90613394565b600082612be28382614d4a565b9150811115611ca35760405162461bcd60e51b8152600401610c7d9061415d565b3390565b6000828152602081905260409020612c1f90826133bf565b1561108e57612c2c612c03565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020612c8890826133d4565b1561108e57612c95612c03565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081612ce68185614ccb565b9150811015611ca35760405162461bcd60e51b8152600401610c7d90614495565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612d3b57612d3682826133e9565b612d46565b612d46838383613476565b505050565b60006001600160401b03821115612ba65760405162461bcd60e51b8152600401610c7d906146b9565b600654600090610ccd90670de0b6b3a764000090612bcf9085906001600160801b0316613354565b6000611ca0838361349b565b6000611ca0836001600160a01b0384166134f4565b82612dda5760405162461bcd60e51b8152600401610c7d906144cc565b80612df75760405162461bcd60e51b8152600401610c7d906149a0565b60006001600160401b031660028585604051612e14929190613daf565b908152604051908190036020019020546001600160401b03640100000000909104161415612eba5760048054600181018255600091909152612e79907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018585613677565b50600454604051600290612e909087908790613daf565b908152604051908190036020019020805463ffffffff9290921663ffffffff199092169190911790555b604051806060016040528060028686604051612ed7929190613daf565b90815260408051602092819003830190205463ffffffff168352426001600160401b0316838301528051601f860183900483028101830182528581529201919085908590819084018382808284376000920191909152505050915250604051600290612f469087908790613daf565b9081526040805191829003602090810190922083518154858501516001600160401b0316640100000000026bffffffffffffffff000000001963ffffffff90931663ffffffff1990921691909117919091161781559083015180519192612fb5926001850192909101906136f7565b5050604051612fc8915085908590613daf565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405161300192919061408b565b60405180910390a250505050565b6001600160a01b0381161561276c57600c80546001600160a01b0383166001600160a01b03199091161790556008805460ff60881b1916600160881b17905550565b6000610ccd8261350c565b60606044825110156130a2575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610cd0565b60048201915081806020019051810190610ccd9190613c89565b60006001600160401b0316600283836040516130d9929190613daf565b908152604051908190036020019020546001600160401b036401000000009091041614156131195760405162461bcd60e51b8152600401610c7d9061435a565b600060016002848460405161312f929190613daf565b9081526040519081900360200190205461314f919063ffffffff16614d61565b60045490915061316190600190614d4a565b8163ffffffff1614613263576004805461317d90600190614d4a565b8154811061319b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160048263ffffffff16815481106131cc57634e487b7160e01b600052603260045260246000fd5b906000526020600020019080546131e290614db2565b6131ed92919061376b565b506131f9816001614ce3565b600260048363ffffffff168154811061322257634e487b7160e01b600052603260045260246000fd5b906000526020600020016040516132399190613ddb565b908152604051908190036020019020805463ffffffff9290921663ffffffff199092169190911790555b600480548061328257634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600061329e91906137e6565b905582826040516132b0929190613daf565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b2600285856040516132eb929190613daf565b908152602001604051809103902060010160405161330991906140dc565b60405180910390a260028383604051613323929190613daf565b90815260405190819003602001902080546bffffffffffffffffffffffff1916815560006129ab60018301826137e6565b60008115806133785750828261336a8183614d2b565b92506133769083614d0b565b145b611ca35760405162461bcd60e51b8152600401610c7d90614aa2565b60008082116133b55760405162461bcd60e51b8152600401610c7d90614be2565b611ca08284614d0b565b6000611ca0836001600160a01b038416613510565b6000611ca0836001600160a01b03841661355a565b604080516000808252602082019092526001600160a01b0384169083906040516134139190613dbf565b60006040518083038185875af1925050503d8060008114613450576040519150601f19603f3d011682016040523d82523d6000602084013e613455565b606091505b5050905080612d465760405162461bcd60e51b8152600401610c7d906147b7565b600080846001600160a01b031663a9059cbb85856040516024016128fd929190613f22565b815460009082106134be5760405162461bcd60e51b8152600401610c7d906141b9565b8260000182815481106134e157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600061351c83836134f4565b61355257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611ca3565b506000611ca3565b6000818152600183016020526040812054801561366d57600061357e600183614d4a565b855490915060009061359290600190614d4a565b905060008660000182815481106135b957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106135ea57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155613601836001614ccb565b6000828152600189016020526040902055865487908061363157634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611ca3565b6000915050611ca3565b82805461368390614db2565b90600052602060002090601f0160209004810192826136a557600085556136eb565b82601f106136be5782800160ff198235161785556136eb565b828001600101855582156136eb579182015b828111156136eb5782358255916020019190600101906136d0565b50612ba692915061381e565b82805461370390614db2565b90600052602060002090601f01602090048101928261372557600085556136eb565b82601f1061373e57805160ff19168380011785556136eb565b828001600101855582156136eb579182015b828111156136eb578251825591602001919060010190613750565b82805461377790614db2565b90600052602060002090601f01602090048101928261379957600085556136eb565b82601f106137aa57805485556136eb565b828001600101855582156136eb57600052602060002091601f016020900482015b828111156136eb5782548255916001019190600101906137cb565b5080546137f290614db2565b6000825580601f10613804575061276c565b601f01602090049060005260206000209081019061276c91905b5b80821115612ba6576000815560010161381f565b60008083601f840112613844578081fd5b5081356001600160401b0381111561385a578182fd5b6020830191508360208083028501011115611a5157600080fd5b60008083601f840112613885578182fd5b5081356001600160401b0381111561389b578182fd5b602083019150836020828501011115611a5157600080fd5b6000602082840312156138c4578081fd5b81356138cf81614e2e565b9392505050565b60008060008060008060008060008060006101608c8e0312156138f7578687fd5b8b3561390281614e2e565b9a5060208c013561391281614e2e565b995060408c013561392281614e2e565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506101008c013561395681614e2e565b92506101208c013561396781614e2e565b91506101408c013561397881614e2e565b809150509295989b509295989b9093969950565b6000806040838503121561399e578182fd5b82356139a981614e2e565b915060208301356139b981614e43565b809150509250929050565b60008060008060008060008060008060006101608c8e0312156138f7578081fd5b6000806000606084860312156139f9578081fd5b8335613a0481614e2e565b9250602084013591506040840135613a1b81614e43565b809150509250925092565b600080600060408486031215613a3a578081fd5b83356001600160401b03811115613a4f578182fd5b613a5b86828701613833565b9094509250506020840135613a1b81614e43565b60008060008060408587031215613a84578182fd5b84356001600160401b0380821115613a9a578384fd5b613aa688838901613833565b90965094506020870135915080821115613abe578384fd5b50613acb87828801613833565b95989497509550505050565b600060208284031215613ae8578081fd5b81356138cf81614e43565b600060208284031215613b04578081fd5b81516138cf81614e43565b600060208284031215613b20578081fd5b5035919050565b60008060408385031215613b39578182fd5b8235915060208301356139b981614e2e565b60008060408385031215613b5d578182fd5b50508035926020909101359150565b60008060208385031215613b7e578182fd5b82356001600160401b03811115613b93578283fd5b613b9f85828601613874565b90969095509350505050565b600080600080600080600080610100898b031215613bc7578182fd5b8835613bd281614e2e565b97506020890135613be281614e2e565b96506040890135613bf281614e2e565b9550606089013594506080890135935060a0890135613c1081614e51565b979a969950949793969295929450505060c08201359160e0013590565b60008060008060408587031215613c42578182fd5b84356001600160401b0380821115613c58578384fd5b613c6488838901613874565b90965094506020870135915080821115613c7c578384fd5b50613acb87828801613874565b600060208284031215613c9a578081fd5b81516001600160401b0380821115613cb0578283fd5b818401915084601f830112613cc3578283fd5b815181811115613cd557613cd5614e18565b604051601f8201601f191681016020018381118282101715613cf957613cf9614e18565b604052818152838201602001871015613d10578485fd5b613d21826020830160208701614d86565b9695505050505050565b600060208284031215613d3c578081fd5b5051919050565b60008060408385031215613d55578182fd5b8235915060208301356139b981614e43565b600060208284031215613d78578081fd5b81516138cf81614e51565b60008151808452613d9b816020860160208601614d86565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b60008251613dd1818460208701614d86565b9190910192915050565b6000808354613de981614db2565b60018281168015613e015760018114613e1257613e3e565b60ff19841687528287019450613e3e565b8786526020808720875b85811015613e355781548a820152908401908201613e1c565b50505082870194505b50929695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039b8c168152998b1660208b0152978a1660408a01526060890196909652608088019490945260a087019290925260c086015260e0850152841661010084015283166101208301529091166101408201526101600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526001600160401b039283166020850152911660408301521515606082015260800190565b604080825283519082018190526000906020906060840190828701845b82811015613fa8578151151584529284019290840190600101613f8a565b5050508381038285015284518082528282019080840283018401878501865b83811015613ff557601f19868403018552613fe3838351613d83565b94870194925090860190600101613fc7565b50909998505050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561405757603f19888603018452614045858351613d83565b94509285019290850190600101614029565b5092979650505050505050565b901515815260200190565b90815260200190565b600060208252611ca06020830184613d83565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6000604082526140cd6040830185613d83565b90508260208301529392505050565b600060208083528184546140ef81614db2565b8084870152604060018084166000811461411057600181146141245761414f565b60ff1985168984015260608901955061414f565b898852868820885b858110156141475781548b820186015290830190880161412c565b8a0184019650505b509398975050505050505050565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5cd959606a1b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252602c908201527f43726f776473616c653a2073746172742074696d65206973206265666f72652060408201526b63757272656e742074696d6560a01b606082015260800190565b60208082526052908201527f4e6f2061677265656d656e742070726f76696465642c20706c6561736520726560408201527f766965772074686520736d61727420636f6e7472616374206265666f726520696060820152711b9d195c9858dd1a5b99c81dda5d1a081a5d60721b608082015260a00190565b6020808252602c908201527f43726f776473616c653a2073746172742074696d65206973206e6f742062656660408201526b6f726520656e642074696d6560a01b606082015260800190565b602080825260159082015274111bd8dd5b595b9d081cda1bdd5b1908195e1a5cdd605a1b604082015260600190565b6020808252602e908201527f43726f776473616c653a2061756374696f6e2063616e6e6f742068617665206160408201526d1b1c9958591e481cdd185c9d195960921b606082015260800190565b6020808252601c908201527f43726f776473616c653a20616c72656164792066696e616c697a656400000000604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526018908201527f5a65726f206e616d65206973206e6f7420616c6c6f7765640000000000000000604082015260600190565b6020808252600f908201526e125b98dbdc9c9958dd081a5b9c1d5d608a1b604082015260600190565b602080825260149082015273043726f776473616c653a207261746520697320360641b604082015260600190565b60208082526028908201527f43726f776473616c653a205061796d656e742063757272656e6379206973206e60408201526706f742045524332360c41b606082015260800190565b60208082526032908201527f43726f776473616c653a20656e642074696d65206d757374206265206f6c646560408201527172207468616e20737461727420707269636560701b606082015260800190565b6020808252602a908201527f43726f776473616c653a20546f6b656e20646f6573206e6f74206861766520316040820152693820646563696d616c7360b01b606082015260800190565b6020808252601f908201527f43726f776473616c653a2046756e647320616c72656164792072616973656400604082015260600190565b60208082526024908201527f43726f776473616c653a2061646d696e20697320746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601b908201527f426f72696e674d6174683a2075696e743634204f766572666c6f770000000000604082015260600190565b6020808252602a908201527f43726f776473616c653a2062656e656669636961727920697320746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526026908201527f43726f776473616c653a205061796d656e742063757272656e6379206973206e6040820152650dee8408aa8960d31b606082015260800190565b6020808252601f908201527f43726f776473616c653a20486173206e6f742066696e69736865642079657400604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b6020808252818101527f43726f776473616c653a206f7574736964652061756374696f6e20686f757273604082015260600190565b60208082526027908201527f43726f776473616c653a2061756374696f6e20686173206e6f742066696e69736040820152661a1959081e595d60ca1b606082015260800190565b60208082526018908201527f43726f776473616c653a206e6f742066696e616c697a65640000000000000000604082015260600190565b6020808252602a908201527f43726f776473616c653a206d696e696d756d20746172676574206578636565646040820152690732068617264206361760b41b606082015260800190565b602080825260139082015272496e646578206f7574206f6620626f756e647360681b604082015260600190565b6020808252601c908201527f43726f776473616c653a20746f74616c20746f6b656e73206973203000000000604082015260600190565b60208082526025908201527f43726f776473616c653a2077616c6c657420697320746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252601a908201527f53686f756c64206e6f74206265206120656d7074792064617461000000000000604082015260600190565b6020808252603e908201527f43726f776473616c653a20656e74657220616e20756e69782074696d6573746160408201527f6d7020696e207365636f6e64732c206e6f74206d696c697365636f6e64730000606082015260800190565b6020808252601d908201527f43726f776473616c653a206e6f20746f6b656e7320746f20636c61696d000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526022908201527f43726f776473616c653a2073656e646572206d75737420626520616e2061646d60408201526134b760f11b606082015260800190565b602080825260149082015273043726f776473616c653a20676f616c20697320360641b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252602a908201527f43726f776473616c653a205061796d656e742063757272656e6379206973206e60408201526937ba1030903a37b5b2b760b11b606082015260800190565b602080825260149082015273426f72696e674d6174683a20446976207a65726f60601b604082015260600190565b6001600160801b0393909316835290151560208301521515604082015260600190565b6001600160801b0392831681529116602082015260400190565b918252602082015260400190565b6001600160401b0393841681529190921660208201526001600160801b03909116604082015260600190565b6000808335601e19843603018112614c9d578283fd5b8301803591506001600160401b03821115614cb6578283fd5b602001915036819003821315611a5157600080fd5b60008219821115614cde57614cde614e02565b500190565b600063ffffffff808316818516808303821115614d0257614d02614e02565b01949350505050565b600082614d2657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614d4557614d45614e02565b500290565b600082821015614d5c57614d5c614e02565b500390565b600063ffffffff83811690831681811015614d7e57614d7e614e02565b039392505050565b60005b83811015614da1578181015183820152602001614d89565b83811115611dde5750506000910152565b600281046001821680614dc657607f821691505b6020821081141561162657634e487b7160e01b600052602260045260246000fd5b6000600019821415614dfb57614dfb614e02565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461276c57600080fd5b801515811461276c57600080fd5b60ff8116811461276c57600080fdfe9d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873bfd97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a64920756e6465727374616e642074686174204920616d20696e746572616374696e672077697468206120736d61727420636f6e74726163742e204920756e6465727374616e64207468617420746f6b656e7320636f6d6d6974656420617265207375626a65637420746f2074686520746f6b656e2069737375657220616e64206c6f63616c206c617773207768657265206170706c696361626c652e204920726576696577656420636f6465206f662074686520736d61727420636f6e747261637420616e6420756e6465727374616e642069742066756c6c792e204920616772656520746f206e6f7420686f6c6420646576656c6f70657273206f72206f746865722070656f706c65206173736f6369617465642077697468207468652070726f6a656374206c6961626c6520666f7220616e79206c6f73736573206f72206d6973756e6465727374616e64696e6773a26469706673582212205f22e9e7dfd62abe505e853ab224cafca5ffa4d36e6627d3e0b217ed53b9b94964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdminRole(address)": {
        "details": "The sender must have the admin role.",
        "params": {
          "_address": "EOA or contract receiving the new role."
        }
      },
      "addMinterRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "addOperatorRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "addSmartContractRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract receiving the new role"
        }
      },
      "auctionEnded()": {
        "returns": {
          "_0": "auctionEnded True if sold out or time has ended."
        }
      },
      "auctionSuccessful()": {
        "returns": {
          "_0": "auctionSuccessful True if the commitmentsTotal is equal or higher than goal."
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        },
        "returns": {
          "results": "An array with the returned data of each function call, mapped one-to-one to `calls`. F1: External is ok here because this is the batch function, adding it to a batch makes no sense F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value C3: The length of the loop is fully under user control, so can't be exploited C7: Delegatecall is only used on the same contract, so it's safe",
          "successes": "An array indicating the success of a call, mapped one-to-one to `calls`."
        }
      },
      "calculateCommitment(uint256)": {
        "params": {
          "_commitment": "Number of tokens to be commited."
        },
        "returns": {
          "committed": "The amount able to be purchased during a sale."
        }
      },
      "cancelAuction()": {
        "details": "Admin can cancel the auction before it starts"
      },
      "commitEth(address,bool)": {
        "details": "low level token purchase with ETH ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it should not be called by another `nonReentrant` function.",
        "params": {
          "_beneficiary": "Recipient of the token purchase."
        }
      },
      "commitTokens(uint256,bool)": {
        "params": {
          "_amount": "Amount of tokens to commit."
        }
      },
      "commitTokensFrom(address,uint256,bool)": {
        "details": "Users must approve contract prior to committing tokens to auction.",
        "params": {
          "_amount": "Amount of approved ERC20 tokens.",
          "_from": "User ERC20 address."
        }
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contracts finalization function."
      },
      "finalizeTimeExpired()": {
        "returns": {
          "_0": "True if 7 days have passed since the end of the auction"
        }
      },
      "finalized()": {
        "returns": {
          "_0": "bool True if sale has been finalised."
        }
      },
      "getAllDocuments()": {
        "returns": {
          "_0": "string List of all documents names present in the contract."
        }
      },
      "getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)": {
        "params": {
          "_admin": "Address that can finalize crowdsale.",
          "_endTime": "Crowdsale end time.",
          "_funder": "The address that funds the token for crowdsale.",
          "_goal": "Minimum amount of funds to be raised in weis or tokens.",
          "_paymentCurrency": "The currency the crowdsale accepts for payment. Can be ETH or token address.",
          "_pointList": "Address that will manage auction approvals.",
          "_rate": "Number of token units a buyer gets per wei or token.",
          "_startTime": "Crowdsale start time.",
          "_token": "Address of the token being sold.",
          "_totalTokens": "The total number of tokens to sell in crowdsale.",
          "_wallet": "Address where collected funds will be forwarded to."
        },
        "returns": {
          "_data": "All the data in bytes format."
        }
      },
      "getDocument(string)": {
        "params": {
          "_name": "Name of the document"
        },
        "returns": {
          "_0": "string The data associated with the document.",
          "_1": "uint256 the timestamp at which the document was last modified."
        }
      },
      "getDocumentCount()": {
        "returns": {
          "_0": "uint256 Count of the document names present in the contract."
        }
      },
      "getDocumentName(uint256)": {
        "returns": {
          "_0": "string Name of the document name."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAdminRole(address)": {
        "params": {
          "_address": "EOA or contract being checked."
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not."
        }
      },
      "hasMinterRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "hasOperatorRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasSmartContractRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "initAccessControls(address)": {
        "params": {
          "_admin": "Admins address."
        }
      },
      "initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)": {
        "details": "Init function.",
        "params": {
          "_admin": "Address that can finalize auction.",
          "_endTime": "Crowdsale end time.",
          "_funder": "The address that funds the token for crowdsale.",
          "_goal": "Minimum amount of funds to be raised in weis or tokens.",
          "_paymentCurrency": "The currency the crowdsale accepts for payment. Can be ETH or token address.",
          "_pointList": "Address that will manage auction approvals.",
          "_rate": "Number of token units a buyer gets per wei or token.",
          "_startTime": "Crowdsale start time.",
          "_token": "Address of the token being sold.",
          "_totalTokens": "The total number of tokens to sell in crowdsale.",
          "_wallet": "Address where collected funds will be forwarded to."
        }
      },
      "initMarket(bytes)": {
        "params": {
          "_data": "Encoded data for initialization."
        }
      },
      "isOpen()": {
        "returns": {
          "_0": "isOpen True if the crowdsale is open, false otherwise."
        }
      },
      "marketParticipationAgreement()": {
        "details": "Attribution to the awesome delta.financial contracts"
      },
      "removeAdminRole(address)": {
        "details": "The sender must have the admin role.",
        "params": {
          "_address": "EOA or contract affected."
        }
      },
      "removeMinterRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "removeOperatorRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "removeSmartContractRole(address)": {
        "details": "The sender must have the admin role",
        "params": {
          "_address": "EOA or contract affected"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAuctionPrice(uint256,uint256)": {
        "params": {
          "_goal": "Minimum amount raised and goal for the auction.",
          "_rate": "Price per token."
        }
      },
      "setAuctionTime(uint256,uint256)": {
        "params": {
          "_endTime": "Auction end time.",
          "_startTime": "Auction start time."
        }
      },
      "setAuctionWallet(address)": {
        "params": {
          "_wallet": "Auction wallet is where funds will be sent."
        }
      },
      "tokensClaimable(address)": {
        "returns": {
          "claimerCommitment": "How many tokens the user is able to claim."
        }
      },
      "withdrawTokens(address)": {
        "details": "Withdraw tokens only after crowdsale ends.",
        "params": {
          "beneficiary": "Whose tokens will be withdrawn."
        }
      }
    },
    "stateVariables": {
      "marketTemplate": {
        "details": "For different marketplace types, this must be incremented."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MinterRoleGranted(address,address)": {
        "notice": "Events for adding and removing various roles"
      }
    },
    "kind": "user",
    "methods": {
      "MINTER_ROLE()": {
        "notice": "Role definitions"
      },
      "addAdminRole(address)": {
        "notice": "Grants the admin role to an address."
      },
      "addMinterRole(address)": {
        "notice": "Grants the minter role to an address"
      },
      "addOperatorRole(address)": {
        "notice": "Grants the operator role to an address"
      },
      "addSmartContractRole(address)": {
        "notice": "Grants the smart contract role to an address"
      },
      "auctionEnded()": {
        "notice": "Checks if the sale has ended."
      },
      "auctionSuccessful()": {
        "notice": "Checks if the sale minimum amount was raised."
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "calculateCommitment(uint256)": {
        "notice": "Checks if the commitment does not exceed the goal of this sale."
      },
      "cancelAuction()": {
        "notice": "Cancel Auction"
      },
      "commitEth(address,bool)": {
        "notice": "Checks the amount of ETH to commit and adds the commitment. Refunds the buyer if commit is too high."
      },
      "commitTokens(uint256,bool)": {
        "notice": "Buy Tokens by commiting approved ERC20 tokens to this contract address."
      },
      "commitTokensFrom(address,uint256,bool)": {
        "notice": "Checks how much is user able to commit and processes that commitment."
      },
      "finalize()": {
        "notice": "Manually finalizes the Crowdsale."
      },
      "finalized()": {
        "notice": "Checks if the sale has been finalised."
      },
      "getAllDocuments()": {
        "notice": "Used to retrieve a full list of documents attached to the smart contract."
      },
      "getCrowdsaleInitData(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "Collects data to initialize the crowd sale."
      },
      "getDocument(string)": {
        "notice": "Used to return the details of a document with a known name (`string`)."
      },
      "getDocumentCount()": {
        "notice": "Used to retrieve the total documents in the smart contract."
      },
      "getDocumentName(uint256)": {
        "notice": "Used to retrieve the document name from index in the smart contract."
      },
      "hasAdminRole(address)": {
        "notice": "Used to check whether an address has the admin role."
      },
      "hasMinterRole(address)": {
        "notice": "Used to check whether an address has the minter role"
      },
      "hasOperatorRole(address)": {
        "notice": "Used to check whether an address has the operator role"
      },
      "hasSmartContractRole(address)": {
        "notice": "Used to check whether an address has the smart contract role"
      },
      "initAccessControls(address)": {
        "notice": "Initializes access controls."
      },
      "initCrowdsale(address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "Initializes main contract variables and transfers funds for the sale."
      },
      "initMarket(bytes)": {
        "notice": "Decodes and hands Crowdsale data to the initCrowdsale function."
      },
      "isOpen()": {
        "notice": "Checks if the sale is open."
      },
      "marketTemplate()": {
        "notice": "FLYBYMarket template id for the factory contract."
      },
      "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`. F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert) if part of a batch this could be used to grief once as the second call would not need the permit"
      },
      "removeAdminRole(address)": {
        "notice": "Removes the admin role from an address."
      },
      "removeMinterRole(address)": {
        "notice": "Removes the minter role from an address"
      },
      "removeOperatorRole(address)": {
        "notice": "Removes the operator role from an address"
      },
      "removeSmartContractRole(address)": {
        "notice": "Removes the smart contract role from an address"
      },
      "setAuctionPrice(uint256,uint256)": {
        "notice": "Admin can set auction price through this function."
      },
      "setAuctionTime(uint256,uint256)": {
        "notice": "Admin can set start and end time through this function."
      },
      "setAuctionWallet(address)": {
        "notice": "Admin can set the auction wallet through this function."
      },
      "tokensClaimable(address)": {
        "notice": "Adjusts users commitment depending on amount already claimed and unclaimed tokens left."
      },
      "withdrawTokens(address)": {
        "notice": "Withdraws bought tokens, or returns commitment if the sale is unsuccessful."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12488,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)12483_storage)"
      },
      {
        "astId": 215,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "initAccess",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 20763,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "_documents",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Document)20758_storage)"
      },
      {
        "astId": 20767,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "_docIndexes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint32)"
      },
      {
        "astId": 20770,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "_docNames",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 15264,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2215,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "marketPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(MarketPrice)2212_storage"
      },
      {
        "astId": 2225,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "marketInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MarketInfo)2222_storage"
      },
      {
        "astId": 2235,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "marketStatus",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(MarketStatus)2232_storage"
      },
      {
        "astId": 2237,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "auctionToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2239,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "wallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      },
      {
        "astId": 2241,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "paymentCurrency",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2243,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "pointList",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2247,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "commitments",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2251,
        "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
        "label": "claimed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)12483_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)12483_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Document)20758_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Documents.Document)",
        "numberOfBytes": "32",
        "value": "t_struct(Document)20758_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)14934_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 14933,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)14657_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Document)20758_storage": {
        "encoding": "inplace",
        "label": "struct Documents.Document",
        "members": [
          {
            "astId": 20753,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "docIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 20755,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "lastModified",
            "offset": 4,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 20757,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)2222_storage": {
        "encoding": "inplace",
        "label": "struct Crowdsale.MarketInfo",
        "members": [
          {
            "astId": 2217,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2219,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "endTime",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2221,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "totalTokens",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarketPrice)2212_storage": {
        "encoding": "inplace",
        "label": "struct Crowdsale.MarketPrice",
        "members": [
          {
            "astId": 2209,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2211,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "goal",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarketStatus)2232_storage": {
        "encoding": "inplace",
        "label": "struct Crowdsale.MarketStatus",
        "members": [
          {
            "astId": 2227,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "commitmentsTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2229,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "finalized",
            "offset": 16,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2231,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "usePointList",
            "offset": 17,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)12483_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 12480,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)14934_storage"
          },
          {
            "astId": 12482,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)14657_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 14652,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 14656,
            "contract": "contracts/Auctions/Crowdsale.sol:Crowdsale",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}